<?xml version='1.0' encoding='utf-8'?>
<doc>
    <assembly>
        <name>DesignData.SDS2.Model</name>
    </assembly>
    <members>
        <member name="T:DesignData.SDS2.Model.VertBraceBeamClipSizeSpecification">
             <summary>
             A specification for how a clip angle is sized
             when a vertical brace gusset plate
             connects to a column and beam.
             </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.VertBraceBeamClipSizeSpecification.MatchColumnClip">
             <summary>Use the same size on the beam as the clip angle connected to the column</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.VertBraceBeamClipSizeSpecification.FromSetupOrConnSpec">
             <summary>Use the size defined in the connection specification or setup.</summary> 
            </member>
        <member name="M:DesignData.SDS2.Model.IStitchPlateSettingsSwigImpl.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.IStitchPlateSettingsSwigImpl.getCPtr(DesignData.SDS2.Model.IStitchPlateSettingsSwigImpl)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.IStitchPlateSettingsSwigImpl.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.IStitchPlateSettingsSwigImpl.Dispose(System.Boolean)">
            
            </member>
        <member name="P:DesignData.SDS2.Model.IStitchPlateSettingsSwigImpl.IsAutoStitchPlateGap">
             </member>
        <member name="P:DesignData.SDS2.Model.IStitchPlateSettingsSwigImpl.StitchPlateGap">
             </member>
        <member name="P:DesignData.SDS2.Model.IStitchPlateSettingsSwigImpl.IsAutoMaxStitchPlateSpacing">
             </member>
        <member name="P:DesignData.SDS2.Model.IStitchPlateSettingsSwigImpl.MaxStitchPlateSpacing">
             </member>
        <member name="P:DesignData.SDS2.Model.IStitchPlateSettingsSwigImpl.IsAutoNumberOfStitchPlates">
             </member>
        <member name="P:DesignData.SDS2.Model.IStitchPlateSettingsSwigImpl.NumberOfStitchPlates">
             </member>
        <member name="T:DesignData.SDS2.Model.ConnSpecHoleTypeSubset">
             <summary>
             Set of connection specification values representing a subset of hole types appropriate for a connection
             </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ConnSpecHoleTypeSubset.StandardRound">
             <summary>A standard, perfectly round, hole.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ConnSpecHoleTypeSubset.ShortSlot">
             <summary>An oblong shaped hole, diameter is typically 1/16th of an inch larger than the input bolt diameter.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ConnSpecHoleTypeSubset.Oversize">
             <summary>A round hole, typically 3/16ths of an inch larger than the input bolt diameter.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ConnSpecHoleTypeSubset.LongSlot">
             <summary>Similar to a ShortSlot, but with a longer slot length (2.5" for a 1" diameter bolt)</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.ModelViewDefinition">
             <summary>The order of these model view definition values is critical,
             and MUST stay in sync with the MVD_XXX defines in mdl_link_ext.h</summary>
            </member>
        <member name="F:DesignData.SDS2.Model.ModelViewDefinition.Unknown">
             <summary>Using 'unknown' is an error condition</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ModelViewDefinition.CoordinationView2">
             <summary>IFC 2x3 Coordination View 2.0 is the most common MVD used worldwide</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ModelViewDefinition.EM11SteelFabrication">
             <summary>IFC 2x3 EM11 is an AISC creation used only by steel fabricators</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ModelViewDefinition.DesignTransferView">
             <summary>IFC 4 Design Transfer View is the most common, general purpose IFC 4 MVD</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ModelViewDefinition.ACI131ConcreteReinforcement">
             <summary>IFC 4 ACI 131.2R-17 contains only concrete reinforcement materials</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ModelViewDefinition.ReferenceView">
             <summary>IFC 4 Reference View provides little benefit and isn't supported yet</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.HoleGroup">
             <summary>A group of holes, and properties holes share with other holes
             in the same group.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleGroup.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleGroup.getCPtr(DesignData.SDS2.Model.HoleGroup)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleGroup.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleGroup.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleGroup.GetToMaterialCoordinates">
             <summary>The relative location and orientation of the hole group on
             the material being drilled.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleGroup.GetToGlobalCoordinates">
             <summary>The relative location and orientation of the hole group
             in global coordinates</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleGroup.GetDiameter">
             <summary>The diameter of the hole.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleGroup.GetBoltDiameter">
             <summary>The expected bolt diameter for the hole.  If bolts are added to this
             hole their diameter will follow this property.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleGroup.GetSlotLength">
             <summary>The widest part of a slot hole, its slot length</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleGroup.GetSlotRotation">
             <summary>The rotation of the slot about its center.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleGroup.GetUseTrueGageOfOutsideLegFromMaterial">
             <summary>True if this should be referenced on the outside leg gage of
             a clip angle.  The actual measurement comes from the material being drilled,
             this just controls whether that measurement will be used or not.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleGroup.GetPreferredBoltType">
             <summary>The bolt type to add to this hole, if possible.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleGroup.GetHashCode">
                 
            </member>
        <member name="M:DesignData.SDS2.Model.HoleGroup.Equals(System.Object)">
            
            </member>
        <member name="P:DesignData.SDS2.Model.HoleGroup.ToMaterialCoordinates">
             <summary>The relative location and orientation of the hole group on
             the material being drilled.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HoleGroup.ToGlobalCoordinates">
             <summary>The relative location and orientation of the hole group
             in global coordinates</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HoleGroup.Diameter">
             <summary>The diameter of the hole.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HoleGroup.BoltDiameter">
             <summary>The expected bolt diameter for the hole.  If bolts are added to this
             hole their diameter will follow this property.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HoleGroup.SlotLength">
             <summary>The widest part of a slot hole, its slot length</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HoleGroup.SlotRotation">
             <summary>The rotation of the slot about its center.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HoleGroup.UseTrueGageOfOutsideLegFromMaterial">
             <summary>True if this should be referenced on the outside leg gage of
             a clip angle.  The actual measurement comes from the material being drilled,
             this just controls whether that measurement will be used or not.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HoleGroup.PreferredBoltType">
             <summary>The bolt type to add to this hole, if possible.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.WeldPositionType">
             <summary>Enumerated weld positions</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.WeldPositionType.NoPosition">
             <summary>No prequalified weld tail position</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.WeldPositionType.Flat">
             <summary>Flat prequalified weld tail position, tail text F</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.WeldPositionType.Horizontal">
             <summary>Horizontal prequalified weld tail position, tail text H</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.WeldPositionType.Vertical">
             <summary>Vertical prequalified weld tail position, tail text V</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.WeldPositionType.Overhead">
             <summary>Overhead prequalified weld tail position, tail text OH</summary> 
            </member>
        <member name="T:DesignData.SDS2.Model.SeismicCopeShopWeld">
             <summary>A cope for seismic shop welds.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeismicCopeShopWeld.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeismicCopeShopWeld.getCPtr(DesignData.SDS2.Model.SeismicCopeShopWeld)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeismicCopeShopWeld.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeismicCopeShopWeld.GetCopeLength">
             <summary>The length of the cope along the work point line</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeismicCopeShopWeld.GetReEntrantLength">
             <summary>Depth of the cope from the inside of the flange.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeismicCopeShopWeld.GetReEntrantDepth">
             <summary>Length of the reentrant cut.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeismicCopeShopWeld.GetClipWeb">
             <summary>How many inches to clip back the web at the edge of the cope.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeismicCopeShopWeld.GetFlangeFlushLength">
             <summary>Distance from the end of the flange to the beginning of
             the reentrant cut on the flange.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeismicCopeShopWeld.GetReEntrantRadius">
             <summary>The radius of the corner of the cope</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeismicCopeShopWeld.GetGrooveAngle">
             <summary>Angle of the bevel on the flange</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeismicCopeShopWeld.GetReEntrantHoleDistance">
             <summary>Depth of the center of the reentrant cut hole from the
             inside of the flange.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SeismicCopeShopWeld.CopeLength">
             <summary>The length of the cope along the work point line</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SeismicCopeShopWeld.ReEntrantLength">
             <summary>Depth of the cope from the inside of the flange.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SeismicCopeShopWeld.ReEntrantDepth">
             <summary>Length of the reentrant cut.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SeismicCopeShopWeld.ClipWeb">
             <summary>How many inches to clip back the web at the edge of the cope.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SeismicCopeShopWeld.FlangeFlushLength">
             <summary>Distance from the end of the flange to the beginning of
             the reentrant cut on the flange.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SeismicCopeShopWeld.ReEntrantRadius">
             <summary>The radius of the corner of the cope</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SeismicCopeShopWeld.GrooveAngle">
             <summary>Angle of the bevel on the flange</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SeismicCopeShopWeld.ReEntrantHoleDistance">
             <summary>Depth of the center of the reentrant cut hole from the
             inside of the flange.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeismicCopeShopWeld.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.TurnedSolidLayout">
             <summary>A turned solid formed by a planar loop of points, a Layout3D</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.TurnedSolidLayout.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.TurnedSolidLayout.getCPtr(DesignData.SDS2.Model.TurnedSolidLayout)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.TurnedSolidLayout.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.TurnedSolidLayout.GetIncludedAngle">
             <summary>An angle more than 0 and less than 2PI radians.  This is
             the share of a circle that the turned solid fills.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.TurnedSolidLayout.GetFabricationMethod">
             <summary>The method used to fabricate the turned solid</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.TurnedSolidLayout.GetLayout">
             <summary>Get the layout used to generate this turned solid in
             material coordinates. The layout is in the XY plane and is turned
             about the Y axis in the negative direction. Mutations to the
             returned value do not change the material; SetLayout() must be
             used to modify the layout on the material.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.TurnedSolidLayout.SetLayout(DesignData.SDS2.Primitives.Layout3D)">
             <summary>Set the layout used to generate this turned solid.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.TurnedSolidLayout.IncludedAngle">
             <summary>An angle more than 0 and less than 2PI radians.  This is
             the share of a circle that the turned solid fills.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.TurnedSolidLayout.FabricationMethod">
             <summary>The method used to fabricate the turned solid</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.TurnedSolidLayout.BendSegments">
             </member>
        <member name="M:DesignData.SDS2.Model.TurnedSolidLayout.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.BentPlateSpecification">
             <summary>A bent plate connection</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlateSpecification.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlateSpecification.getCPtr(DesignData.SDS2.Model.BentPlateSpecification)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlateSpecification.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlateSpecification.#ctor">
                  
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlateSpecification.GetGage">
             <summary>Specify whether this is a heavy, wide, or narrow gage clip</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlateSpecification.GetAttachmentMethodToSupported">
             <summary>How to attach the connection to the beam being supported</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlateSpecification.GetAttachToMember">
             <summary>How to attach the connection to the supporting member</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlateSpecification.GetFullDepthTee">
             <summary>If true, the system creates a built-up tee that is the
             full depth of the supporting beam.
            
             If false, the built-up tee is designed to the depth of the
             connection if the top and bottom flanges of the supported beam
             (this beam) are entirely below or entirely above the half-depth
             of the supporting beam. If the depth of the supported beam is
             greater than half the depth of the supporting beam, the built-up
             tee is designed to the full depth of the supporting beam.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlateSpecification.GetAttachmentMethodToSupporting">
             <summary>How to attach the connection to the supporting member</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlateSpecification.GetStagger">
             <summary>See documentation on the returned ClipAngleStagger enumeration</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlateSpecification.GetSide">
             <summary>Which side of the supported member to put clip angles
             on, or both.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlateSpecification.GetAutoGrade">
             <summary>If true, this has the system determine the plate grade
             for the bent plate.  If false, whatever value is set to Grade
             will be used.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlateSpecification.GetGrade">
             <summary>The grade to set on the new bent plate material for this
             connection.</summary>
             <remarks>Setting this fill flip AutoGrade to false</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BentPlateSpecification.Gage">
             <summary>Specify whether this is a heavy, wide, or narrow gage clip</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BentPlateSpecification.AttachmentMethodToSupported">
             <summary>How to attach the connection to the beam being supported</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BentPlateSpecification.AttachToMember">
             <summary>How to attach the connection to the supporting member</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BentPlateSpecification.IsFullDepthTee">
             <summary>If true, the system creates a built-up tee that is the
             full depth of the supporting beam.
            
             If false, the built-up tee is designed to the depth of the
             connection if the top and bottom flanges of the supported beam
             (this beam) are entirely below or entirely above the half-depth
             of the supporting beam. If the depth of the supported beam is
             greater than half the depth of the supporting beam, the built-up
             tee is designed to the full depth of the supporting beam.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BentPlateSpecification.AttachmentMethodToSupporting">
             <summary>How to attach the connection to the supporting member</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BentPlateSpecification.Stagger">
             <summary>See documentation on the returned ClipAngleStagger enumeration</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BentPlateSpecification.Side">
             <summary>Which side of the supported member to put clip angles
             on, or both.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BentPlateSpecification.IsAutoGrade">
             <summary>If true, this has the system determine the plate grade
             for the bent plate.  If false, whatever value is set to Grade
             will be used.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BentPlateSpecification.Grade">
             <summary>The grade to set on the new bent plate material for this
             connection.</summary>
             <remarks>Setting this fill flip AutoGrade to false</remarks>
            
            </member>
        <member name="T:DesignData.SDS2.Model.LockableShearWeldType">
             <summary>Lockable value for ShearWeldType</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableShearWeldType.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableShearWeldType.getCPtr(DesignData.SDS2.Model.LockableShearWeldType)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableShearWeldType.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableShearWeldType.#ctor">
                  
            </member>
        <member name="M:DesignData.SDS2.Model.LockableShearWeldType.GetValue">
             <summary>The underlying value</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableShearWeldType.#ctor(DesignData.SDS2.Model.ShearWeldType)">
             <summary>Create a locked ViaMemberEdit LockableShearWeldType from a ShearWeldType</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableShearWeldType.op_Implicit(DesignData.SDS2.Model.ShearWeldType)~DesignData.SDS2.Model.LockableShearWeldType">
             <summary>Implicit conversion using the ShearWeldType constructor</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableShearWeldType.op_Implicit(DesignData.SDS2.Model.LockableShearWeldType)~DesignData.SDS2.Model.ShearWeldType">
             <summary>Implicit conversion to value type</summary>
            </member>
        <member name="P:DesignData.SDS2.Model.LockableShearWeldType.Value">
             <summary>The underlying value</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.CustomPropertyMap">
             <summary>
             A set of custom properties for a member, material, bolt, weld,
             or other item with custom properties.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CustomPropertyMap.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CustomPropertyMap.getCPtr(DesignData.SDS2.Model.CustomPropertyMap)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CustomPropertyMap.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CustomPropertyMap.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CustomPropertyMap.Get(DesignData.SDS2.Database.CustomPropertyMapHandle)">
             <summary>
             Get a CustomPropertyMap object for the handle passed in.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CustomPropertyMap.GetString(System.String)">
             <summary>Lookup the value for the custom property name on this member</summary>
             <param name="name">Set to the value if it's found, and true is returned.</param>
             <returns>true if the value is found and is of the correct type</returns>
             <exception cref="T:DesignData.SDS2.Exceptions.CustomPropertyMissingException">If the custom property is not found in the schema</exception>
             <exception cref="T:DesignData.SDS2.Exceptions.CustomPropertyTypeMismatchException">If the custom property is in the schema with a type other than string</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CustomPropertyMap.GetDate(System.String)">
             <summary>Get the value for the custom property name on this member</summary>
             <param name="name">Set to the value if it's found, and true is returned.</param>
             <returns>true if the value is found and is of the correct type</returns>
             <exception cref="T:DesignData.SDS2.Exceptions.CustomPropertyMissingException">If the custom property is not found in the schema</exception>
             <exception cref="T:DesignData.SDS2.Exceptions.CustomPropertyTypeMismatchException">If the custom property is in the schema with a type other than DateTime</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CustomPropertyMap.GetDouble(System.String)">
             <summary>Get the value for the custom property name on this member</summary>
             <param name="name">Set to the value if it's found, and true is returned.</param>
             <returns>true if the value is found and is of the correct type</returns>
             <exception cref="T:DesignData.SDS2.Exceptions.CustomPropertyMissingException">If the custom property is not found in the schema</exception>
             <exception cref="T:DesignData.SDS2.Exceptions.CustomPropertyTypeMismatchException">If the custom property is in the schema with a type other than double</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CustomPropertyMap.GetBool(System.String)">
             <summary>Get the value for the custom property name on this member</summary>
             <param name="name">Set to the value if it's found, and true is returned.</param>
             <returns>true if the value is found and is of the correct type</returns>
             <exception cref="T:DesignData.SDS2.Exceptions.CustomPropertyMissingException">If the custom property is not found in the schema</exception>
             <exception cref="T:DesignData.SDS2.Exceptions.CustomPropertyTypeMismatchException">If the custom property is in the schema with a type other than double</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CustomPropertyMap.SetString(System.String,System.String)">
             <summary>Set the value for the custom property name on this member</summary>
             <param name="name">Set to the value if it's found, and true is returned.</param>
             <param name="newValue">The new value to set it to</param>
             <exception cref="T:DesignData.SDS2.Exceptions.CustomPropertyMissingException">If the custom property is not found in the schema</exception>
             <exception cref="T:DesignData.SDS2.Exceptions.CustomPropertyTypeMismatchException">If the custom property is in the schema with a type other than string</exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CustomPropertyMap.SetDate(System.String,System.Nullable{System.DateTime})">
             <summary>Set the value for the custom property name on this member</summary>
             <param name="name">Set to the value if it's found, and true is returned.</param>
             <param name="newValue">The new value to set it to</param>
             <exception cref="T:DesignData.SDS2.Exceptions.CustomPropertyMissingException">If the custom property is not found in the schema</exception>
             <exception cref="T:DesignData.SDS2.Exceptions.CustomPropertyTypeMismatchException">If the custom property is in the schema with a type other than DateTime</exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CustomPropertyMap.SetDouble(System.String,System.Double)">
             <summary>Set the value for the custom property name on this member</summary>
             <param name="name">Set to the value if it's found, and true is returned.</param>
             <param name="newValue">The new value to set it to</param>
             <exception cref="T:DesignData.SDS2.Exceptions.CustomPropertyMissingException">If the custom property is not found in the schema</exception>
             <exception cref="T:DesignData.SDS2.Exceptions.CustomPropertyTypeMismatchException">If the custom property is in the schema with a type other than double</exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CustomPropertyMap.SetBool(System.String,System.Boolean)">
             <summary>Set the value for the custom property name on this member</summary>
             <param name="name">Set to the value if it's found, and true is returned.</param>
             <param name="newValue">The new value to set it to</param>
             <exception cref="T:DesignData.SDS2.Exceptions.CustomPropertyMissingException">If the custom property is not found in the schema</exception>
             <exception cref="T:DesignData.SDS2.Exceptions.CustomPropertyTypeMismatchException">If the custom property is in the schema with a type other than bool</exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CustomPropertyMap.GetPropertyType(System.String)">
             <summary>Get the type of a value.  Which will be None if this does not exist</summary>
             <remarks>For Dimensions this returns Double to maintain compatibility, and reduce unnecessary code.
             To distinguish between doubles and dimensions look at Setup.CustomPropertySchema, that type will be
             dimension if it's a dimension.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CustomPropertyMap.Get(System.String,System.String@)">
            <summary>Lookup the value for the custom property name on this member</summary>
             <param name="name">Set to the value if it's found, and true is returned.</param>
             <returns>true if the value is found and is of the correct type</returns>
             <exception cref="T:DesignData.SDS2.Exceptions.CustomPropertyMissingException">If the custom property is not found in the schema</exception>
             <exception cref="T:DesignData.SDS2.Exceptions.CustomPropertyTypeMismatchException">If the custom property is in the schema with a type other than string</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CustomPropertyMap.Get(System.String,System.Nullable{System.DateTime}@)">
            <summary>Get the value for the custom property name on this member</summary>
             <param name="name">Set to the value if it's found, and true is returned.</param>
             <returns>true if the value is found and is of the correct type</returns>
             <exception cref="T:DesignData.SDS2.Exceptions.CustomPropertyMissingException">If the custom property is not found in the schema</exception>
             <exception cref="T:DesignData.SDS2.Exceptions.CustomPropertyTypeMismatchException">If the custom property is in the schema with a type other than DateTime</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CustomPropertyMap.Get(System.String,System.Double@)">
            <summary>Get the value for the custom property name on this member</summary>
             <param name="name">Set to the value if it's found, and true is returned.</param>
             <returns>true if the value is found and is of the correct type</returns>
             <exception cref="T:DesignData.SDS2.Exceptions.CustomPropertyMissingException">If the custom property is not found in the schema</exception>
             <exception cref="T:DesignData.SDS2.Exceptions.CustomPropertyTypeMismatchException">If the custom property is in the schema with a type other than double</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CustomPropertyMap.Get(System.String,System.Boolean@)">
            <summary>Get the value for the custom property name on this member</summary>
             <param name="name">Set to the value if it's found, and true is returned.</param>
             <returns>true if the value is found and is of the correct type</returns>
             <exception cref="T:DesignData.SDS2.Exceptions.CustomPropertyMissingException">If the custom property is not found in the schema</exception>
             <exception cref="T:DesignData.SDS2.Exceptions.CustomPropertyTypeMismatchException">If the custom property is in the schema with a type other than double</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CustomPropertyMap.Set(System.String,System.String)">
            <summary>Set the value for the custom property name on this member</summary>
             <param name="name">Set to the value if it's found, and true is returned.</param>
             <param name="newValue">The new value to set it to</param>
             <exception cref="T:DesignData.SDS2.Exceptions.CustomPropertyMissingException">If the custom property is not found in the schema</exception>
             <exception cref="T:DesignData.SDS2.Exceptions.CustomPropertyTypeMismatchException">If the custom property is in the schema with a type other than string</exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CustomPropertyMap.Set(System.String,System.Boolean)">
            <summary>Set the value for the custom property name on this member</summary>
             <param name="name">Set to the value if it's found, and true is returned.</param>
             <param name="newValue">The new value to set it to</param>
             <exception cref="T:DesignData.SDS2.Exceptions.CustomPropertyMissingException">If the custom property is not found in the schema</exception>
             <exception cref="T:DesignData.SDS2.Exceptions.CustomPropertyTypeMismatchException">If the custom property is in the schema with a type other than bool</exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CustomPropertyMap.Set(System.String,System.Double)">
            <summary>Set the value for the custom property name on this member</summary>
             <param name="name">Set to the value if it's found, and true is returned.</param>
             <param name="newValue">The new value to set it to</param>
             <exception cref="T:DesignData.SDS2.Exceptions.CustomPropertyMissingException">If the custom property is not found in the schema</exception>
             <exception cref="T:DesignData.SDS2.Exceptions.CustomPropertyTypeMismatchException">If the custom property is in the schema with a type other than double</exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CustomPropertyMap.Set(System.String,System.Nullable{System.DateTime})">
            <summary>Set the value for the custom property name on this member</summary>
             <param name="name">Set to the value if it's found, and true is returned.</param>
             <param name="newValue">The new value to set it to</param>
             <exception cref="T:DesignData.SDS2.Exceptions.CustomPropertyMissingException">If the custom property is not found in the schema</exception>
             <exception cref="T:DesignData.SDS2.Exceptions.CustomPropertyTypeMismatchException">If the custom property is in the schema with a type other than DateTime</exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="T:DesignData.SDS2.Model.Weld">
             <summary>
             Weld provides access to information about welds on a member.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Weld.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Weld.getCPtr(DesignData.SDS2.Model.Weld)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Weld.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Weld.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Weld.GetGuid">
             <summary>The SDS2 Guid/UUID for this weld.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Weld.GetIsSystemGenerated">
             <summary>Is the weld system generated.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Weld.GetIsFieldWeld">
             <summary>
             True indicates if a weld is applied between in the field. False indicates
             the weld is applied in the shop.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Weld.GetIsWeldedAllAround">
             <summary>
             Indicates a weld-all-around weld
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Weld.GetIsSpacerBarRequired">
             <summary>
             Indicates the supplementary symbol for a spacer bar ('M' inside a rectangle)
             will be drawn as a part of the weld symbol for V and Bevel groove welds
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Weld.GetUsePrequalifiedWeldTailText">
             <summary>
             Determines whether PrequalifiedTailText, WeldJointType, JointDesignation,
             Process, and Position are used
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Weld.GetWeldJointType">
             <summary>
             Prequalified weld tail joint
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Weld.GetPenetration">
             <summary>
             Prequalified weld tail penetration
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Weld.GetProcess">
             <summary>
             Prequalified weld tail process
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Weld.GetPosition">
             <summary>
             Prequalified weld tail position
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Weld.GetJointDesignation">
             <summary>
             A letter (1 character) prequalified weld tail joint designation.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist or
             is set to an invalid value.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Weld.GetTailText">
             <summary>
             Prequalified weld tail text
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Weld.GetMaterial">
             <summary>
             One of the materials welded by this weld
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Weld.GetOrigin">
             <summary>The origin, in global inches, of the weld</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Weld.GetNormal1">
             <summary>
             One of the normal directions, in global coordinates, for the weld
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Weld.GetNormal2">
             <summary>
             One of the normal directions, in global coordinates, for the weld
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Weld.HasWeld2">
             <summary>Is the other weld side separable.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Weld.GetArrowSide">
             <summary>The 'arrow' side of the weld.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Weld.GetOtherSide">
             <summary>The 'other' side of the weld.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Weld.GetToMemberCoordinates">
             <summary>
             Matrix, in inches, representing a transformation from weld coordinates
             to member coordinates
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Weld.GetToGlobalCoordinates">
             <summary>
             Matrix, in inches, representing a transformation from weld coordinates
             to global coordinates
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Weld.GetSurface">
             <summary>
             The Surface, or polygons, for this weld, in weld coordinates, which
             also happens to be global coordinates.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Weld.GetIsStitchWeld">
             <summary>Is the weld stitched</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Weld.GetOtherStitchType">
             <summary>Stitch spacing type for the other side.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Weld.GetCustomPropertyMapHandle">
             <summary>
             A handle to the custom properties for this weld.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the weld handle is invalid.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Weld.Handle">
             </member>
        <member name="P:DesignData.SDS2.Model.Weld.Guid">
             <summary>The SDS2 Guid/UUID for this weld.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Weld.IsOtherSideSeparable">
             <summary>Is the other weld side separable.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Weld.ArrowSide">
             <summary>The 'arrow' side of the weld.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Weld.OtherSide">
             <summary>The 'other' side of the weld.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Weld.IsSystemGenerated">
             <summary>Is the weld system generated.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Weld.IsFieldWeld">
             <summary>
             True indicates if a weld is applied between in the field. False indicates
             the weld is applied in the shop.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Weld.IsWeldedAllAround">
             <summary>
             Indicates a weld-all-around weld
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Weld.IsSpacerBarRequired">
             <summary>
             Indicates the supplementary symbol for a spacer bar ('M' inside a rectangle)
             will be drawn as a part of the weld symbol for V and Bevel groove welds
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Weld.UsePrequalifiedWeldTailText">
             <summary>
             Determines whether PrequalifiedTailText, WeldJointType, JointDesignation,
             Process, and Position are used
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Weld.WeldJoint">
             <summary>
             Prequalified weld tail joint
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Weld.Penetration">
             <summary>
             Prequalified weld tail penetration
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Weld.Process">
             <summary>
             Prequalified weld tail process
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Weld.Position">
             <summary>
             Prequalified weld tail position
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Weld.JointDesignation">
             <summary>
             A letter (1 character) prequalified weld tail joint designation.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist or
             is set to an invalid value.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Weld.TailText">
             <summary>
             Prequalified weld tail text
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Weld.ToMemberCoordinates">
             <summary>
             Matrix, in inches, representing a transformation from weld coordinates
             to member coordinates
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Weld.ToGlobalCoordinates">
             <summary>
             Matrix, in inches, representing a transformation from weld coordinates
             to global coordinates
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Weld.IsStitched">
             <summary>Is the weld stitched</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Weld.OtherStitchType">
             <summary>Stitch spacing type for the other side.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Weld.Origin">
             <summary>The origin, in global inches, of the weld</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Weld.Normal1">
             <summary>
             One of the normal directions, in global coordinates, for the weld
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Weld.Normal2">
             <summary>
             One of the normal directions, in global coordinates, for the weld
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Weld.Material">
             <summary>
             One of the materials welded by this weld
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Weld.CustomPropertyMapHandle">
             <summary>
             A handle to the custom properties for this weld.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the weld handle is invalid.
             </exception>
            
            </member>
        <member name="T:DesignData.SDS2.Model.LineType">
             <summary>Enumerated line types</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.LineType.Solid">
             <summary>Solid</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.LineType.Dot">
             <summary>Equally spaced dots</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.LineType.Dash">
             <summary>Equally spaced dashes</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.LineType.Dash2">
             <summary>Equally spaced long dashes</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.LineType.Dashes_Dot">
             <summary>Consecutive dashes, dot: -- . </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.LineType.Dashes_Dash">
             <summary>Consecutive dashes, dash: -- - </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.LineType.Dashes_Dash_Dash">
             <summary>Consecutive dashes, dash, dash: -- - - </summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.WeldSide">
             <summary>
             WeldSide provides access to the arrow and other side information of a weld
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldSide.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldSide.getCPtr(DesignData.SDS2.Model.WeldSide)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldSide.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldSide.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldSide.GetSegments">
             <summary>The weld path.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldSide.GetWeldSize">
             <summary>
             Indicates depth of preparation, size or strength of the weld in inches.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist or
             is set to an invalid value.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldSide.GetWeldLength">
             <summary>
             The weld length in inches. To adjust the length change the setbacks.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist or
             is set to an invalid value.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldSide.GetLeftSetback">
             <summary>
             Inches the left end of the weld is set back from the edge of the material.
             Zero makes the left end of the weld go to the edge of the material.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist or
             is set to an invalid value.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldSide.GetRightSetback">
             <summary>
             Inches the right end of the weld is set back from the edge of the material.
             Zero makes the right end of the weld go to the edge of the material.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist or
             is set to an invalid value.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldSide.GetRootFace">
             <summary>
             Inches of a prepared edge that is not beveled or grooved for groove welds.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist or
             is set to an invalid value.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldSide.GetRootOpening">
             <summary>The weld root opening in inches for groove welds.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist or
             is set to an invalid value.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldSide.GetEffectiveThroat">
             <summary>
             In a fillet weld, this is the inches from the root to the face of
             the weld. The distance is measured in the plane where the weld is
             most likely to fail. An "Effective throat" distance may be applied
             to weld symbols for bevel and groove welds, not just fillet welds.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist or
             is set to an invalid value.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldSide.GetFinishSymbol">
             <summary>
             A letter (1 character) to appear on the weld symbol to designate the finish.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist or
             is set to an invalid value.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldSide.GetWeldType">
             <summary>The weld type.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldSide.GetContour">
             <summary>The weld contour.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldSide.GetGrooveAngle">
             <summary>
             Radians [-1.309 (75 degrees), 1.309] that define the angle for bevel
             groove or V groove welds.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldSide.GetUseFilletBackupWeld">
             <summary>
             Apply a fillet backup weld to a square, bevel, or J groove weld.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldSide.GetStitchLength">
             <summary>Inches between the beginning of each weld stitch.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist or
             is set to an invalid value.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldSide.GetStitchSpacing">
             <summary>The weld stitch spacing in inches.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist or
             is set to an invalid value.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldSide.GetStitchLeftTermination">
             <summary>The weld stitch left termination in inches.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist or
             is set to an invalid value.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldSide.GetStitchRightTermination">
             <summary>The weld stitch right termination in inches.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist or
             is set to an invalid value.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldSide.GetShowSymbolSize">
             <summary>
             Show weld size on the symbol.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldSide.GetShowSymbolLength">
             <summary>
             Show weld length on the symbol.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldSide.GetIsArrowSide">
             <summary>
             Is this side the arrow side of the weld.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.WeldSide.WeldSize">
             <summary>
             Indicates depth of preparation, size or strength of the weld in inches.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist or
             is set to an invalid value.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.WeldSide.WeldLength">
             <summary>
             The weld length in inches. To adjust the length change the setbacks.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist or
             is set to an invalid value.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.WeldSide.LeftSetback">
             <summary>
             Inches the left end of the weld is set back from the edge of the material.
             Zero makes the left end of the weld go to the edge of the material.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist or
             is set to an invalid value.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.WeldSide.RightSetback">
             <summary>
             Inches the right end of the weld is set back from the edge of the material.
             Zero makes the right end of the weld go to the edge of the material.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist or
             is set to an invalid value.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.WeldSide.RootFace">
             <summary>
             Inches of a prepared edge that is not beveled or grooved for groove welds.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist or
             is set to an invalid value.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.WeldSide.RootOpening">
             <summary>The weld root opening in inches for groove welds.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist or
             is set to an invalid value.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.WeldSide.EffectiveThroat">
             <summary>
             In a fillet weld, this is the inches from the root to the face of
             the weld. The distance is measured in the plane where the weld is
             most likely to fail. An "Effective throat" distance may be applied
             to weld symbols for bevel and groove welds, not just fillet welds.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist or
             is set to an invalid value.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.WeldSide.FinishSymbol">
             <summary>
             A letter (1 character) to appear on the weld symbol to designate the finish.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist or
             is set to an invalid value.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.WeldSide.WeldType">
             <summary>The weld type.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.WeldSide.Contour">
             <summary>The weld contour.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.WeldSide.GrooveAngle">
             <summary>
             Radians [-1.309 (75 degrees), 1.309] that define the angle for bevel
             groove or V groove welds.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.WeldSide.UseFilletBackupWeld">
             <summary>
             Apply a fillet backup weld to a square, bevel, or J groove weld.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.WeldSide.StitchLength">
             <summary>Inches between the beginning of each weld stitch.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist or
             is set to an invalid value.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.WeldSide.StitchSpacing">
             <summary>The weld stitch spacing in inches.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist or
             is set to an invalid value.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.WeldSide.StitchLeftTermination">
             <summary>The weld stitch left termination in inches.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist or
             is set to an invalid value.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.WeldSide.StitchRightTermination">
             <summary>The weld stitch right termination in inches.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist or
             is set to an invalid value.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.WeldSide.IsSizeOnSymbol">
             <summary>
             Show weld size on the symbol.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.WeldSide.IsLengthOnSymbol">
             <summary>
             Show weld length on the symbol.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown if the weld does not exist.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.WeldSide.IsArrowSide">
             <summary>
             Is this side the arrow side of the weld.
             </summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.HorizontalBrace">
             <summary>
             A builtin steel horizontal brace member.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorizontalBrace.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorizontalBrace.getCPtr(DesignData.SDS2.Model.HorizontalBrace)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorizontalBrace.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorizontalBrace.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorizontalBrace.GetSideOfGusset">
             <summary>Determines the side of gusset the brace is on</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorizontalBrace.GetDoubleMaterial">
             <summary>Determines if the brace's material is doubled.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorizontalBrace.GetLongLeg">
             <summary>Long leg value of brace.</summary>
             <value>Outstanding bolts the short leg of the angle brace to the gusset plate,
                    with the long leg outstanding.
                    ToGusset bolts the long leg of the angle brace to the
                    gusset plate.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorizontalBrace.GetAllowMaterialWorklineOffset">
             <summary>The behavior of the workline offset of the brace.</summary>
             <value>Automatic applies choice specified in "Allow material workline offset"
                    in Fabricator Setup &gt; Member Detailing Settings &gt; Horizontal Braces.
                    Yes allows connection design to offset the main material by the gusset
                    plate thickness so the brace can connect to the bottom flange of the beam.
                    No results in the main material not being offset.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorizontalBrace.GetLocateOnNeutralAxis">
             <summary>The behavior of the neutral axis parameter.  Only valid for angle material.</summary>
             <value>Automatic applies the choice made to Fabricator Setup &gt;
                    Member Detailing Settings &gt; Horizontal Braces.
                    Yes causes the angle material's X-X asix or Y-Y axis to intersect with the
                    member line of the brace.
                    No instructs connection design to align the gage line of the angle material
                    with the brace's member line.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorizontalBrace.GetStaggerBolts">
             <summary>Sets if connection design staggers the bolts that connect the angle
                      to the gusset.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorizontalBrace.GetOneGageLine">
             <summary>Gage line setting.  Only applies to angle materials.</summary>
             <value>When true, creates a single column of bolts to connect to the gusset.
                    when false, creates two columns of bolts to connect to the gusset.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorizontalBrace.GetAutoMinGussetThickness">
             <summary>Flag to determine if user specified minimum gusset thickness will be used.</summary>
             <value>API value should be opposite of the internal value, this is to keep consistency with
             user input. Internal: 0=checked, 1=unchecked. API: false=unchecked, true=checked.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorizontalBrace.GetMinGussetThickness">
             <summary>User specified minimum gusset thickness.</summary>
             <value>Double in the range of 0-1200. Specifies the minimum thickness a gusset will be allowed
             to use.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorizontalBrace.GetBreakApart">
             <summary>Used to determine if connection material not welded to the member main
             material will be broken apart from the member</summary>
             <value>true = process and create soilds will break apart member
             false = process and create solids will combine member material</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorizontalBrace.GetEnds">
             <summary>
             Get both ends in a single list, left then right.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorizontalBrace.IsAutoStitchPlateGap">
             </member>
        <member name="P:DesignData.SDS2.Model.HorizontalBrace.StitchPlateGap">
             </member>
        <member name="P:DesignData.SDS2.Model.HorizontalBrace.IsAutoMaxStitchPlateSpacing">
             </member>
        <member name="P:DesignData.SDS2.Model.HorizontalBrace.MaxStitchPlateSpacing">
             </member>
        <member name="P:DesignData.SDS2.Model.HorizontalBrace.IsAutoNumberOfStitchPlates">
             </member>
        <member name="P:DesignData.SDS2.Model.HorizontalBrace.NumberOfStitchPlates">
             </member>
        <member name="P:DesignData.SDS2.Model.HorizontalBrace.SideOfGusset">
             <summary>Determines the side of gusset the brace is on</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorizontalBrace.IsDoubleMaterial">
             <summary>Determines if the brace's material is doubled.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorizontalBrace.LongLeg">
             <summary>Long leg value of brace.</summary>
             <value>Outstanding bolts the short leg of the angle brace to the gusset plate,
                    with the long leg outstanding.
                    ToGusset bolts the long leg of the angle brace to the
                    gusset plate.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorizontalBrace.AllowMaterialWorklineOffset">
             <summary>The behavior of the workline offset of the brace.</summary>
             <value>Automatic applies choice specified in "Allow material workline offset"
                    in Fabricator Setup &gt; Member Detailing Settings &gt; Horizontal Braces.
                    Yes allows connection design to offset the main material by the gusset
                    plate thickness so the brace can connect to the bottom flange of the beam.
                    No results in the main material not being offset.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorizontalBrace.LocateOnNeutralAxis">
             <summary>The behavior of the neutral axis parameter.  Only valid for angle material.</summary>
             <value>Automatic applies the choice made to Fabricator Setup &gt;
                    Member Detailing Settings &gt; Horizontal Braces.
                    Yes causes the angle material's X-X asix or Y-Y axis to intersect with the
                    member line of the brace.
                    No instructs connection design to align the gage line of the angle material
                    with the brace's member line.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorizontalBrace.StaggerBolts">
             <summary>Sets if connection design staggers the bolts that connect the angle
                      to the gusset.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorizontalBrace.IsOneGageLine">
             <summary>Gage line setting.  Only applies to angle materials.</summary>
             <value>When true, creates a single column of bolts to connect to the gusset.
                    when false, creates two columns of bolts to connect to the gusset.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorizontalBrace.IsAutoMinGussetThickness">
             <summary>Flag to determine if user specified minimum gusset thickness will be used.</summary>
             <value>API value should be opposite of the internal value, this is to keep consistency with
             user input. Internal: 0=checked, 1=unchecked. API: false=unchecked, true=checked.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorizontalBrace.MinGussetThickness">
             <summary>User specified minimum gusset thickness.</summary>
             <value>Double in the range of 0-1200. Specifies the minimum thickness a gusset will be allowed
             to use.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorizontalBrace.IsBreakApart">
             <summary>Used to determine if connection material not welded to the member main
             material will be broken apart from the member</summary>
             <value>true = process and create soilds will break apart member
             false = process and create solids will combine member material</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorizontalBrace.Ends">
             <summary>
             Get both ends in a single list, left then right.
             </summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.Decking">
             <summary>
             Deck material is prefabricated sheets of corrugated steel.  Sometimes it is
             referred to as cellular roof deck or as form deck material. It may be
             used for stay-in-place forms for structural concrete slabs, but is also
             used without concrete. Deck is typically cut to fit form lengths and
             field welded to the top of beams and joists.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Decking.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Decking.getCPtr(DesignData.SDS2.Model.Decking)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Decking.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Decking.GetOrderLength">
             <summary>
             The actual length along the longitudinal axis, i.e. X material axis.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Decking.GetWidth">
             <summary>
             The width of of the material along the material Y axis based on the following
             calculation: RibCount * RibSpacing
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Decking.GetRibCount">
             <summary>
             The number of bars parallel with the decking's X axis. Changing
             the number of bearing bars will impact the decking width.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Decking.GetDepth">
             <summary>
             Decking depth measured along the material Z axis from the bottom of the
             deck to the top of any one rib, i.e. the rib height.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Decking.GetThickness">
             <summary>
             Thickness of the decking material.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Decking.GetRibWidth">
             <summary>
             The width of the top surface of every rib.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Decking.GetRibSpacing">
             <summary>
             Distance from the center of one rib to the center of an adjacent rib.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Decking.GetBaseWidth">
             <summary>
             The distance from the inside corner of one bend to the inside corner of
             the next bend at the base of the deck.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Decking.GetEnds">
             <summary>
             The left and right end information of the decking material.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Decking.OrderLength">
             <summary>
             The actual length along the longitudinal axis, i.e. X material axis.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Decking.Width">
             <summary>
             The width of of the material along the material Y axis based on the following
             calculation: RibCount * RibSpacing
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Decking.RibCount">
             <summary>
             The number of bars parallel with the decking's X axis. Changing
             the number of bearing bars will impact the decking width.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Decking.Depth">
             <summary>
             Decking depth measured along the material Z axis from the bottom of the
             deck to the top of any one rib, i.e. the rib height.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Decking.Thickness">
             <summary>
             Thickness of the decking material.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Decking.RibWidth">
             <summary>
             The width of the top surface of every rib.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Decking.RibSpacing">
             <summary>
             Distance from the center of one rib to the center of an adjacent rib.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Decking.BaseWidth">
             <summary>
             The distance from the inside corner of one bend to the inside corner of
             the next bend at the base of the deck.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Decking.Ends">
             <summary>
             The left and right end information of the decking material.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Decking.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.LockableThreadDirection">
             <summary>Lockable value for ThreadDirection</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableThreadDirection.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableThreadDirection.getCPtr(DesignData.SDS2.Model.LockableThreadDirection)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableThreadDirection.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableThreadDirection.#ctor">
                  
            </member>
        <member name="M:DesignData.SDS2.Model.LockableThreadDirection.GetValue">
             <summary>The underlying value</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableThreadDirection.#ctor(DesignData.SDS2.Model.ThreadDirection)">
             <summary>Create a locked ViaMemberEdit LockableThreadDirection from a ThreadDirection</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableThreadDirection.op_Implicit(DesignData.SDS2.Model.ThreadDirection)~DesignData.SDS2.Model.LockableThreadDirection">
             <summary>Implicit conversion using the ThreadDirection constructor</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableThreadDirection.op_Implicit(DesignData.SDS2.Model.LockableThreadDirection)~DesignData.SDS2.Model.ThreadDirection">
             <summary>Implicit conversion to value type</summary>
            </member>
        <member name="P:DesignData.SDS2.Model.LockableThreadDirection.Value">
             <summary>The underlying value</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.AxialLoadCheckOption">
             <summary>Values for the AxialLoadCheck option on ShearTabSpecification</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.AxialLoadCheckOption.IfRequired">
             <summary>results in design calculations 265 and 264 being
             potential causes of connection failure when applicable. Design
             calculation 265 is applicable when the shear plate connection on
             this end of the supported beam has a "Tension load" applied to it
             and that shear plate welds to a supporting HSS
             column. Calculation 264 is applicable when the shear plate
             connection on this end of the supported beam (this beam) has a
             "Tension" load applied to it and the shear plate welds to a
             supporting HSS beam.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.AxialLoadCheckOption.ForSupportingColumn">
             <summary>results in calculation 265 being a potential cause of
             connection failure in the design of the shear plate on this end
             of the supported beam (this beam) when that end has a "Tension
             load" applied to it and the shear plate welds to a supporting HSS
             column. Calculation 264 will not result in connection failure of
             a shear plate to an HSS beam, though the calculation will still
             be done, and a for-information-only note reporting the results of
             the calculation will be provided, when applicable, in both design
             calculations reports.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.AxialLoadCheckOption.ForSupportingBeam">
             <summary>results in calculation 264 being a potential cause of
             connection failure in the design of the shear plate on this end
             of the supported beam (this beam) when that end has a "Tension
             load" applied to it and the shear plate welds to an HSS
             beam. Calculation 265 will not result in connection failure of a
             shear plate to an HSS column, though the calculation will still
             be done, and a for-information-only note reporting the results of
             the calculation will be provided, when applicable, in both design
             calculations reports.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.AxialLoadCheckOption.Never">
             <summary>results in calculations 265 and 264 still being
             performed, if applicable, but not ever causing the connection to
             fail. In the Connection Design Calculations or Expanded
             Connection Design Calculations, the results of the check will be
             reported with a parenthetical, for-information-only note such as
             "(Allowable local axial transverse force on the HSS wall: K1,
             (264) 8.7 kips )" for a beam. For a column, the parenthetical
             note will be something like "(Allowable local longitudinal axial
             force on the HSS wall: K1, (265) 21.1 kips )."</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.PresetView">
             <summary>Preset detail view types</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.PresetView.Main">
             <summary>Main view</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.PresetView.Face1">
             <summary>Top, or face A for columns, view</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.PresetView.Face3">
             <summary>Bottom flange cross section, or face C for columns, view</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.PresetView.MainSection">
             <summary>Main view, cross section</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.PresetView.End0">
             <summary>Left, or bottom for columns, end view</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.PresetView.End1">
             <summary>Right, or top for columns, end view</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.PresetView.Detail">
             <summary>Detail view</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.PresetView.CrossSection">
             <summary>Cross section view</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.PresetView.CrossSectionMidEnd1ToEnd0">
             <summary>Main view, Cross section, right to left view</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.PresetView.CrossSectionMidEnd0ToEnd1">
             <summary>Main view, Cross section, left to right view</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.PresetView.SurfaceTemplate">
             <summary>3D placeholder in material isolation and 2D material unfoled template view</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.PresetView.WormFace3">
             <summary>Bottom flange view for beams</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.PresetView.UserMainView">
             <summary>Main view</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.PresetView.StairInsideCrossSection">
             <summary>Inside stringer, cross section view for stairs</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.PresetView.WormEnd0">
             <summary>Bottom end view for columns</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.PresetView.MaterialLabel">
             <summary>Special view for material label</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.PresetView.View61">
             <summary>Special view</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.PresetView.LeftEndLoad">
             <summary>Special left, end-load label</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.PresetView.RightEndLoad">
             <summary>Special right, end-load label</summary> 
            </member>
        <member name="T:DesignData.SDS2.Model.Plate">
             <summary>Base class for steel plates.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Plate.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Plate.getCPtr(DesignData.SDS2.Model.Plate)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Plate.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Plate.GetThickness">
             <summary>The thickness of the plate.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Plate.GetCheckered">
             <summary>If true this plate is a checkered plate, which is a
             steel plate with raised ribs on its near-side surface to prevent
             slippage on items such as floors and stair treads</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Plate.GetGrade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Plate.GetAvailableSteelGrades">
             <summary>A list of steel grades, valid for Plates, which can be
             assigned to the Grade property of a Plate</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Plate.Grade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Plate.Thickness">
             <summary>The thickness of the plate.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Plate.IsCheckered">
             <summary>If true this plate is a checkered plate, which is a
             steel plate with raised ribs on its near-side surface to prevent
             slippage on items such as floors and stair treads</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Plate.AvailableSteelGrades">
             <summary>A list of steel grades, valid for Plates, which can be
             assigned to the Grade property of a Plate</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.ShapeMaterial">
             <summary>A material whose definition is based on a Shape from the
             MaterialFile</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShapeMaterial.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShapeMaterial.getCPtr(DesignData.SDS2.Model.ShapeMaterial)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShapeMaterial.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShapeMaterial.GetShape">
             <summary>
             Get the Shape for this material.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShapeMaterial.SetShape(DesignData.SDS2.Setup.Shape)">
             <summary>
             Set the Shape for this material, and return this material
             as the proper type for the shape.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ShapeMaterial.Shape">
             <summary>
             Get the Shape for this material.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ShapeMaterial.Ends">
            <summary>Information specific to the ends of the material.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShapeMaterial.GetEnds">
             <summary>Information specific to the ends of the material.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.ShearSupportCondition">
             <summary>For ASD9 and LRFD3 design codes.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ShearSupportCondition.Automatic">
                  
            </member>
        <member name="F:DesignData.SDS2.Model.ShearSupportCondition.Flexible">
                  
            </member>
        <member name="F:DesignData.SDS2.Model.ShearSupportCondition.Rigid">
                  
            </member>
        <member name="F:DesignData.SDS2.Model.BeamEndList.swigCMemOwn">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BeamEndList.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BeamEndList.Dispose(System.Boolean)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.BeamEndList.BeamEndListEnumerator">
             Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
             whenever the collection is modified. This has been done for changes in the size of the
             collection but not when one of the elements of the collection is modified as it is a bit
             tricky to detect unmanaged code that modifies the collection under our feet.
            </member>
        <member name="M:DesignData.SDS2.Model.BeamEndList.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BeamEndList.#ctor(DesignData.SDS2.Model.BeamEndList)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BeamEndList.#ctor(System.Int32)">
            
            </member>
        <member name="F:DesignData.SDS2.Model.CuttableMaterialEndList.swigCMemOwn">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CuttableMaterialEndList.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CuttableMaterialEndList.Dispose(System.Boolean)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.CuttableMaterialEndList.CuttableMaterialEndListEnumerator">
             Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
             whenever the collection is modified. This has been done for changes in the size of the
             collection but not when one of the elements of the collection is modified as it is a bit
             tricky to detect unmanaged code that modifies the collection under our feet.
            </member>
        <member name="M:DesignData.SDS2.Model.CuttableMaterialEndList.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CuttableMaterialEndList.#ctor(DesignData.SDS2.Model.CuttableMaterialEndList)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CuttableMaterialEndList.#ctor(System.Int32)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.ClipAngleSide">
             <summary>Which side of the beam to place clip angles on</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ClipAngleSide.NearSide">
             <summary>Facing the end of the left end of the beam, the near
             side is on the left.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ClipAngleSide.FarSide">
             <summary>Facing the end of the right end of the beam, the far
             side is on the right.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ClipAngleSide.Both">
             <summary>Place clip angles on both sides</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.Rail">
             <summary>Rail material</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.Rail.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Rail.getCPtr(DesignData.SDS2.Model.Rail)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Rail.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Rail.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Rail.#ctor(DesignData.SDS2.Setup.RailShape)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Rail.GetShape">
             <summary>
             The Shape for this material.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Rail.GetPartLength">
             <summary>This reports the distance parallel with the X axis of
             the material from the furthest point on the material's left end
             (first work point end) to the furthest point on the material's
             right end. Unlike the OrderLength, this distance is measured
             after end cuts are made to the material. In most cases, the PartLength
             and OrderLength are exactly the same.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Rail.GetWorkPointLength">
             <summary>The distance between work points of the material, from
             the first point located.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Rail.PartLength">
             <summary>This reports the distance parallel with the X axis of
             the material from the furthest point on the material's left end
             (first work point end) to the furthest point on the material's
             right end. Unlike the OrderLength, this distance is measured
             after end cuts are made to the material. In most cases, the PartLength
             and OrderLength are exactly the same.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Rail.RollType">
             <summary>The type of roll on this material, or None if there is
             no roll on this material.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Rail.MidOrdinateRoll">
             <summary>The measurement from the center of the curved member to
             point halfway between the left and right end.  For Camber, this
             is the only valid value to set.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Rail.IncludedAngleRoll">
             <summary>The included angle of the rolling operation.  This can be set
             for any operation besides a camber roll</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Rail.RollingRadius">
             <summary>The rolling radius for any roll operation besides a camber roll.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Rail.SpiralRollOffset">
             <summary>The positive or negative distance that the right end
             will be offset from the right work point in the member's Z axis.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Rail.AngleOfTwist">
             <summary>The angle (in radians) of twist from one end of the
             material to the other.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Rail.Ends">
             <summary>Information specific to the ends of the material.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Rail.WorkPointLength">
             <summary>The distance between work points of the material, from
             the first point located.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Rail.Shape">
             <summary>
             The Shape for this material.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Rail.GetRollType">
             <summary>The type of roll on this material, or None if there is
             no roll on this material.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Rail.GetMidOrdinateRoll">
             <summary>The measurement from the center of the curved member to
             point halfway between the left and right end.  For Camber, this
             is the only valid value to set.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Rail.GetIncludedAngleRoll">
             <summary>The included angle of the rolling operation.  This can be set
             for any operation besides a camber roll</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Rail.GetRollingRadius">
             <summary>The rolling radius for any roll operation besides a camber roll.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Rail.GetSpiralRollOffset">
             <summary>The positive or negative distance that the right end
             will be offset from the right work point in the member's Z axis.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Rail.GetAngleOfTwist">
             <summary>The angle (in radians) of twist from one end of the
             material to the other.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Rail.GetLayout">
             <summary>Get the layout used to generate this
             RolledShapeMaterial. This value may be null. Mutations to the
             returned value do not change the material; SetLayout() must be
             used to modify the layout on the material.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Rail.SetLayout(DesignData.SDS2.Primitives.Layout3D)">
             <summary>Set the layout used to generate this material.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Rail.GetEnds">
             <summary>Information specific to the ends of the material.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.StairConnectionClipAngle">
             <summary>Clip angle connection between stair stringer and supporting material</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionClipAngle.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionClipAngle.getCPtr(DesignData.SDS2.Model.StairConnectionClipAngle)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionClipAngle.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionClipAngle.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionClipAngle.GetStringerSide">
             <summary>Specifies the side of the stringer the clip angle touches.</summary> 
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionClipAngle.GetAttachToMember">
             <summary>Specifies which member that the clip angle ships with.</summary> 
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionClipAngle.GetAttachmentSupporting">
             <summary>Specifies how the clip angle connects to the supporting material.</summary>
             <remarks>This data is a copy of the attachment</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for null attachments.</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionClipAngle.GetAttachmentSupported">
             <summary>Specifies how the clip angle connects to the stair stringer.</summary>
             <remarks>This data is a copy of the attachment</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for null attachments.</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionClipAngle.GetShape">
             <summary>Specifies the clip angle shape.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for null shapes.</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionClipAngle.GetLength">
             <summary>Specifies the clip angle length.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for dimensions less than or equal to 0.0.</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionClipAngle.GetLongLegTo">
             <summary>Specifies which member the long leg of the clip angle touches.</summary> 
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionClipAngle.GetGrade">
             <summary>Specifies the clip angle material grade.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for invalid grades.</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionClipAngle.GetDimensionToStringerEdge">
             <summary>Specifies the vertical distance from the stringer edge to the clip angle.</summary> 
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionClipAngle.StringerSide">
             <summary>Specifies the side of the stringer the clip angle touches.</summary> 
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionClipAngle.AttachToMember">
             <summary>Specifies which member that the clip angle ships with.</summary> 
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionClipAngle.Length">
             <summary>Specifies the clip angle length.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for dimensions less than or equal to 0.0.</exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionClipAngle.DimensionToStringerEdge">
             <summary>Specifies the vertical distance from the stringer edge to the clip angle.</summary> 
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionClipAngle.LongLegTo">
             <summary>Specifies which member the long leg of the clip angle touches.</summary> 
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionClipAngle.Shape">
             <summary>Specifies the clip angle shape.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for null shapes.</exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionClipAngle.Grade">
             <summary>Specifies the clip angle material grade.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for invalid grades.</exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionClipAngle.AttachmentSupporting">
             <summary>Specifies how the clip angle connects to the supporting material.</summary>
             <remarks>This data is a copy of the attachment</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for null attachments.</exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionClipAngle.AttachmentSupported">
             <summary>Specifies how the clip angle connects to the stair stringer.</summary>
             <remarks>This data is a copy of the attachment</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for null attachments.</exception>
            
            </member>
        <member name="T:DesignData.SDS2.Model.BentPlateLayout">
             <summary>A bent plate formed by a planar list of points, a Layout3D,
             does not need to be a closed loop.</summary>
             <remarks>Bent plates cannot be modified and regenerated because their
             layout cannot be recovered.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlateLayout.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlateLayout.getCPtr(DesignData.SDS2.Model.BentPlateLayout)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlateLayout.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlateLayout.GetOrderLength">
             <summary>The length of the plate as it would need to be ordered.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlateLayout.GetWidth">
             <summary>The width of the plate.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlateLayout.GetThicknessReferencePoint">
             <summary>The center plane of the plate.  Changing this shifts the
             plate without changing the work points of the plate.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlateLayout.GetLayout">
             <summary>Get the layout used to generate this plate, in material
             coordinates. Mutations to the returned value do not change the
             material; SetLayout() must be used to modify the layout on the
             material.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlateLayout.SetLayout(DesignData.SDS2.Primitives.Layout3D)">
             <summary>Set the layout used to generate this plate, in material coordinates.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BentPlateLayout.ThicknessReferencePoint">
             <summary>The center plane of the plate.  Changing this shifts the
             plate without changing the work points of the plate.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BentPlateLayout.OrderLength">
             <summary>The length of the plate as it would need to be ordered.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BentPlateLayout.Width">
             <summary>The width of the plate.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlateLayout.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.MemberApproval">
             <summary>Possible approval states for a member</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.MemberApproval.NotApproved">
             <summary>Submitted and rejected, or not yet approved.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.MemberApproval.ReviseAndResubmit">
             <summary>Revisions needed before resubmitting.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.MemberApproval.ApprovedAsNoted">
             <summary>Approved, but with caveats.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.MemberApproval.ApprovedAsIs">
             <summary>Approved</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.MemberApproval.NotSubmitted">
             <summary>This has not been submitted for approval</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.HoleOperationThreaded">
             <summary>A threaded hole operation</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationThreaded.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationThreaded.getCPtr(DesignData.SDS2.Model.HoleOperationThreaded)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationThreaded.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationThreaded.GetDirection">
             <summary>The thread direction</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationThreaded.GetThreadsPerInch">
             <summary>The number of threads per inch</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationThreaded.GetDepth">
             <summary>The depth of the threads</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationThreaded.GetSize">
             <summary>The nominal diameter of the threaded hole</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationThreaded.GetFitClass">
             <value>A UTF-8 encoded string that is 7 or fewer bytes long</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationThreaded.GetSeries">
             <summary>The form or series of the threads</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationThreaded.GetHashCode">
                 
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationThreaded.Equals(System.Object)">
            
            </member>
        <member name="P:DesignData.SDS2.Model.HoleOperationThreaded.Direction">
             <summary>The thread direction</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HoleOperationThreaded.ThreadsPerInch">
             <summary>The number of threads per inch</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HoleOperationThreaded.Depth">
             <summary>The depth of the threads</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HoleOperationThreaded.Size">
             <summary>The nominal diameter of the threaded hole</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HoleOperationThreaded.FitClass">
             <value>A UTF-8 encoded string that is 7 or fewer bytes long</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HoleOperationThreaded.Series">
             <summary>The form or series of the threads</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.CutLocation">
             <summary>The location of a cut</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.CutLocation.None">
                  
            </member>
        <member name="F:DesignData.SDS2.Model.CutLocation.TopNearSide">
                  
            </member>
        <member name="F:DesignData.SDS2.Model.CutLocation.TopFarSide">
                  
            </member>
        <member name="F:DesignData.SDS2.Model.CutLocation.BottomNearSide">
                  
            </member>
        <member name="F:DesignData.SDS2.Model.CutLocation.BottomFarSide">
                  
            </member>
        <member name="F:DesignData.SDS2.Model.RoundBarEndList.swigCMemOwn">
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundBarEndList.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundBarEndList.Dispose(System.Boolean)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.RoundBarEndList.RoundBarEndListEnumerator">
             Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
             whenever the collection is modified. This has been done for changes in the size of the
             collection but not when one of the elements of the collection is modified as it is a bit
             tricky to detect unmanaged code that modifies the collection under our feet.
            </member>
        <member name="M:DesignData.SDS2.Model.RoundBarEndList.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundBarEndList.#ctor(DesignData.SDS2.Model.RoundBarEndList)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundBarEndList.#ctor(System.Int32)">
            
            </member>
        <member name="F:DesignData.SDS2.Model.RectangularPlateEndList.swigCMemOwn">
            
            </member>
        <member name="M:DesignData.SDS2.Model.RectangularPlateEndList.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.RectangularPlateEndList.Dispose(System.Boolean)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.RectangularPlateEndList.RectangularPlateEndListEnumerator">
             Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
             whenever the collection is modified. This has been done for changes in the size of the
             collection but not when one of the elements of the collection is modified as it is a bit
             tricky to detect unmanaged code that modifies the collection under our feet.
            </member>
        <member name="M:DesignData.SDS2.Model.RectangularPlateEndList.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.RectangularPlateEndList.#ctor(DesignData.SDS2.Model.RectangularPlateEndList)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.RectangularPlateEndList.#ctor(System.Int32)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.IMemberRollingOperation">
            
            <summary>
               Interface for rolling operation properties.
             </summary>
            </member>
        <member name="P:DesignData.SDS2.Model.IMemberRollingOperation.RollType">
            
            <summary>The type of roll on this material, or None if there is
            no roll on this material.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.IMemberRollingOperation.MidOrdinateRoll">
            
            <summary>The measurement from the center of the curved member to
            point halfway between the left and right end.  For Camber, this
            is the only valid value to set.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.IMemberRollingOperation.IncludedAngleRoll">
            
            <summary>The included angle of the rolling operation.  This can be set
            for any operation besides a camber roll</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.IMemberRollingOperation.RollingRadius">
            
            <summary>The rolling radius for any roll operation besides a camber roll.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.IMemberRollingOperation.SpiralRollOffset">
            
            <summary>The positive or negative distance that the right end
            will be offset from the right work point in the member's Z axis.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.ThreadDirection">
             <summary>Fastener thread direction</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ThreadDirection.Left">
                  
            </member>
        <member name="F:DesignData.SDS2.Model.ThreadDirection.Right">
                  
            </member>
        <member name="T:DesignData.SDS2.Model.CutOperation">
             <summary>Cut operations for plates</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.CutOperation.Cope">
             <summary>Cope out the corner</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.CutOperation.Clip">
             <summary>Clip the corner</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.Bolt">
             <summary>Describes a bolt fastener:  The bolt plus any washers and any nuts.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.getCPtr(DesignData.SDS2.Model.Bolt)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetDiameter">
             <summary>The diameter of the bolt shaft.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetLength">
             <summary>The length of the bolt shaft</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetRotation">
             <summary>The rotation of the bolt</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetGripLength">
             <summary>The distance between the inside of the bolt head and inside of the nut</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetHillsideWasherAngle">
             <summary>The angle from perpendicular of the fastener axis to the fastened material surface.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetBoltType">
             <summary>Bolt setup information currently used on bolt</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetFieldBolt">
             <summary>True if this is a bolt to be installed in the field,
             false if it's to be installed in the shop</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetTensionControl">
             <summary>True if this is a tension control bolt</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetHeadless">
             <summary>If true, then this bolt has no bolt head.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetBoltless">
             <summary>If true then this bolt has only a bolt head</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetBreakoutNutAndWasherOnBill">
             <summary>If true, then nuts and washers are broken out into their own lines on the bill of material.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetCombineMaterialPlateWashers">
             <summary>If true, then washers will be combined based on the
             PlateWasherCombinationMethod setting.  If false, then each bolt
             will get its own plate washer.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws
             std::logic_error if referenced bolt does not exist.  </exception>
             <see cref="P:DesignData.SDS2.Model.Bolt.PlateWasherCombinationMethod" />
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetFinish">
             <summary>The finish type of the bolt</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetPlateWasherCombinationMethod">
             <summary>Return the plate washer method set.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetWasherNutPrimary">
             <summary>
             Primary washer under the nut.
             A washer with WasherType.None indicates there is no washer.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetWasherNutSecondary">
             <summary>
             Secondary washer under the nut.
             A washer with WasherType.None indicates there is no washer.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetWasherNutTertiary">
             <summary>
             Tertiary washer under the nut.
             A washer with WasherType.None indicates there is no washer.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetWasherHeadPrimary">
             <summary>
             Primary washer under the bolt head.
             A washer with WasherType.None indicates there is no washer.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetWasherHeadSecondary">
             <summary>
             Secondary washer under the bolt head.
             A washer with WasherType.None indicates there is no washer.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetWasherHeadTertiary">
             <summary>
             Tertiary washer under the bolt head.
             A washer with WasherType.None indicates there is no washer.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetWashersUnderNut">
             <summary>A list of washers on this bolt under the nut with some positive quantity and non WasherType.None.  Note that modifying the list will
             not add, remove, or re-order the washers on the bolt.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetWashersUnderHead">
             <summary>A list of washers on this bolt under the nut with some positive quantity and non WasherType.None.  Note that modifying the list will
             not add, remove, or re-order the washers on the bolt.
             </summary>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.AddWasherNut">
             <summary>Added a washer into the first free slot.  There are three washers
             allowed for each bolt (ignoring the Quantity field), this will find the first
             of those three that's set to WasherType.None and put in a WasherType.Hardened
             or set with quantity 0 and set to a quantity of 1
             and return it.  If all slots are full, this will return null.</summary>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.RemoveWasher(DesignData.SDS2.Model.Washer)">
             <summary>This will clear the slot represented by the washer passed in.</summary>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.AddWasherHead">
             <summary>Added a washer into the first free slot.  There are three washers
             allowed for each bolt (ignoring the Quantity field), this will find the first
             of those three that's set to WasherType.None and put in a WasherType.Hardened
             or set with quantity 0 and set to a quantity of 1
             and return it.  If all slots are full, this will return null.</summary>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetNuts">
             <summary>The list of nuts.  This list is a copy, so modifying
             this list will not remove, add, or reorder nuts.  Use AddNut and
             RemoveNut if you need to do so.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.AddNut">
             <summary>Added a nut into the first free slot.  There are two
             nuts allowed for each bolt, this will find the first of those two
             that's set to NutType.None and put in a NutType.HeavyHex and
             return it.  If all slots are full, this will return
             null.</summary>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.RemoveNut(DesignData.SDS2.Model.Nut)">
             <summary>This will clear the slot represented by the nut passed in.</summary>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetHandle">
             <summary>The database handle for this object</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetToMemberCoordinates">
             <summary>The position and orientation of the bolt in member coordinates.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetToGlobalCoordinates">
             <summary>The position and orientation of the bolt in global coordinates.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetSystemGenerated">
             <summary>Indicates if a bolt was added by the system, during process, or if
             it was added by an interactive tool.  Bolts created by custom members and components
             are considered system.</summary>
             <value>True if this bolt was created by the system.</value>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetConnectionBolt">
             <summary>True if this bolt was created for an SDS2 designed connection</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetConnectionEnd">
             <summary>The end of the member this is a connection for, if ConnectionBolt is true.
             If ConnectionBolt is false, this will just be MemberEnd.Left</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetConnectionMember">
             <summary>The member this connection comes from, if ConnectionBolt is true.
             If ConnectionBolt is false, this will be null.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetMaterialUnderHead">
             <summary>Retrieve the material under the head of this bolt</summary>
             <remarks>For some bolt types, like point to point, this may be null</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetMaterialUnderNut">
             <summary>Retrieve the material under the nut of this bolt</summary>
             <remarks>For some bolt types, like point to point, this may be null</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetGuid">
             <summary>
             The SDS2 Guid/UUID for this bolt.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetSurface">
             <summary>The Surface, or polygons, for this bolt, in bolt local coordinates.
             To get these into global coordinates, transform by the bolt transform, then by
             the member transform.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Bolt.GetCustomPropertyMapHandle">
             <summary>
             A handle to the custom properties for this bolt.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Bolt.Handle">
             <summary>The database handle for this object</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Bolt.ToMemberCoordinates">
             <summary>The position and orientation of the bolt in member coordinates.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Bolt.ToGlobalCoordinates">
             <summary>The position and orientation of the bolt in global coordinates.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Bolt.Diameter">
             <summary>The diameter of the bolt shaft.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Bolt.Length">
             <summary>The length of the bolt shaft</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Bolt.Rotation">
             <summary>The rotation of the bolt</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Bolt.GripLength">
             <summary>The distance between the inside of the bolt head and inside of the nut</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Bolt.HillsideWasherAngle">
             <summary>The angle from perpendicular of the fastener axis to the fastened material surface.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Bolt.BoltType">
             <summary>Bolt setup information currently used on bolt</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Bolt.IsFieldBolt">
             <summary>True if this is a bolt to be installed in the field,
             false if it's to be installed in the shop</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Bolt.IsTensionControl">
             <summary>True if this is a tension control bolt</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Bolt.IsSystemGenerated">
             <summary>Indicates if a bolt was added by the system, during process, or if
             it was added by an interactive tool.  Bolts created by custom members and components
             are considered system.</summary>
             <value>True if this bolt was created by the system.</value>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Bolt.IsConnectionBolt">
             <summary>True if this bolt was created for an SDS2 designed connection</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Bolt.ConnectionEnd">
             <summary>The end of the member this is a connection for, if ConnectionBolt is true.
             If ConnectionBolt is false, this will just be MemberEnd.Left</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Bolt.ConnectionMember">
             <summary>The member this connection comes from, if ConnectionBolt is true.
             If ConnectionBolt is false, this will be null.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Bolt.IsHeadless">
             <summary>If true, then this bolt has no bolt head.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Bolt.IsBoltless">
             <summary>If true then this bolt has only a bolt head</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Bolt.BreakoutNutAndWasherOnBill">
             <summary>If true, then nuts and washers are broken out into their own lines on the bill of material.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Bolt.CombineMaterialPlateWashers">
             <summary>If true, then washers will be combined based on the
             PlateWasherCombinationMethod setting.  If false, then each bolt
             will get its own plate washer.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws
             std::logic_error if referenced bolt does not exist.  </exception>
             <see cref="P:DesignData.SDS2.Model.Bolt.PlateWasherCombinationMethod" />
            
            </member>
        <member name="P:DesignData.SDS2.Model.Bolt.Finish">
             <summary>The finish type of the bolt</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Bolt.MaterialUnderHead">
             <summary>Retrieve the material under the head of this bolt</summary>
             <remarks>For some bolt types, like point to point, this may be null</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Bolt.MaterialUnderNut">
             <summary>Retrieve the material under the nut of this bolt</summary>
             <remarks>For some bolt types, like point to point, this may be null</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Bolt.Guid">
             <summary>
             The SDS2 Guid/UUID for this bolt.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Bolt.PlateWasherCombinationMethod">
             <summary>Return the plate washer method set.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Bolt.WasherNutPrimary">
             <summary>
             Primary washer under the nut.
             A washer with WasherType.None indicates there is no washer.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Bolt.WasherNutSecondary">
             <summary>
             Secondary washer under the nut.
             A washer with WasherType.None indicates there is no washer.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Bolt.WasherNutTertiary">
             <summary>
             Tertiary washer under the nut.
             A washer with WasherType.None indicates there is no washer.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Bolt.WasherHeadPrimary">
             <summary>
             Primary washer under the bolt head.
             A washer with WasherType.None indicates there is no washer.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Bolt.WasherHeadSecondary">
             <summary>
             Secondary washer under the bolt head.
             A washer with WasherType.None indicates there is no washer.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Bolt.WasherHeadTertiary">
             <summary>
             Tertiary washer under the bolt head.
             A washer with WasherType.None indicates there is no washer.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Bolt.WashersUnderNut">
             <summary>A list of washers on this bolt under the nut with some positive quantity and non WasherType.None.  Note that modifying the list will
             not add, remove, or re-order the washers on the bolt.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Bolt.WashersUnderHead">
             <summary>A list of washers on this bolt under the nut with some positive quantity and non WasherType.None.  Note that modifying the list will
             not add, remove, or re-order the washers on the bolt.
             </summary>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Bolt.Nuts">
             <summary>The list of nuts.  This list is a copy, so modifying
             this list will not remove, add, or reorder nuts.  Use AddNut and
             RemoveNut if you need to do so.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Bolt.CustomPropertyMapHandle">
             <summary>
             A handle to the custom properties for this bolt.
             </summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.ToeDirection">
             <summary>For materials with a "toe" (such as a flange on one side)
             the toe direction is the direction these materials are
             flipped.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ToeDirection.Out">
             <summary>Toe out</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ToeDirection.In">
             <summary>Toe in</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.ClipAngleStagger">
             <summary>Specifies where to stagger the bolts when clip angles share
             the same bolts.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ClipAngleStagger.Neither">
             <summary>instructs the system to create a clip angle with
             identical vertical hole spacing in both legs of the
             angle.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ClipAngleStagger.Supporting">
             <summary>specifies normal vertical hole spacing in the leg to
             the supported member and a staggered hole pattern in the leg to
             the supporting member.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ClipAngleStagger.Supported">
             <summary>specifies normal vertical hole spacing in the leg to the
             supporting member and a staggered hole pattern in the leg to the
             supported member.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.LockableInt">
             <summary>A lockable value holding an integer</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableInt.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableInt.getCPtr(DesignData.SDS2.Model.LockableInt)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableInt.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableInt.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableInt.GetValue">
             <summary>The underlying integer value</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableInt.#ctor(System.Int32)">
             <summary>Create a locked ViaMemberEdit LockableInt from a int</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableInt.op_Implicit(System.Int32)~DesignData.SDS2.Model.LockableInt">
             <summary>Implicit conversion using the int constructor</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableInt.op_Implicit(DesignData.SDS2.Model.LockableInt)~System.Int32">
             <summary>Implicit conversion to value type</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableInt.op_Addition(DesignData.SDS2.Model.LockableInt,System.Int32)">
            </member>
        <member name="M:DesignData.SDS2.Model.LockableInt.op_Subtraction(DesignData.SDS2.Model.LockableInt,System.Int32)">
            </member>
        <member name="M:DesignData.SDS2.Model.LockableInt.op_Multiply(DesignData.SDS2.Model.LockableInt,System.Int32)">
            </member>
        <member name="M:DesignData.SDS2.Model.LockableInt.op_Division(DesignData.SDS2.Model.LockableInt,System.Int32)">
            </member>
        <member name="P:DesignData.SDS2.Model.LockableInt.Value">
             <summary>The underlying integer value</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.ReEntrantCut">
             <summary>The re-entrant cut method to use for a welded moment connection</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ReEntrantCut.Automatic">
             <summary>Decides between Alternate3 and Alternate1 based on setup
             options</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ReEntrantCut.Alternate3">
             <summary>instructs the system to use the "Re-entrant cut radius"
             that is entered in Weld Design Criteria. The
             TopFlangeCutOperation and BottomFlangeCutOperation on this end of
             this beam will be set to CopeFieldWeldN3Standard.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ReEntrantCut.Alternate1">
             <summary>configures the system to apply the values entered to the
             Weld Design Criteria window for "Alternate 1 re-entrant cut
             radius" and "Alternate 1 re-entrant cut length" and "Alternate 1
             re-entrant cut depth" and "Alternate 1 flange flush length." The
             TopFlangeCutOperation and BottomFlangeCutOperation on this end of
             this beam will be set to CopeFieldWeldN1FEMA.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.NotchWeb">
             <summary>Notch the Near/Far sides of a hollow section.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.NotchWeb.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.NotchWeb.getCPtr(DesignData.SDS2.Model.NotchWeb)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.NotchWeb.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.NotchWeb.#ctor">
             <summary>
                 Default constructor for NotchWeb.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.NotchWeb.GetLength">
             <summary>Length of the notch.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.NotchWeb.GetWidth">
             <summary>Width of the notch.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.NotchWeb.GetOffset">
             <summary>Offset from center of the notch.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.NotchWeb.GetRadius">
             <summary>Radius of the end of the notch. When the
             radius is 0, the notch is cut square.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.NotchWeb.Length">
             <summary>Length of the notch.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.NotchWeb.Width">
             <summary>Width of the notch.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.NotchWeb.Offset">
             <summary>Offset from center of the notch.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.NotchWeb.Radius">
             <summary>Radius of the end of the notch. When the
             radius is 0, the notch is cut square.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="T:DesignData.SDS2.Model.Model">
            
            </member>
        <member name="T:DesignData.SDS2.Model.BothNearFar">
             <summary>
             Set of connection specification values describing possible sides of a material
             </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.BothNearFar.Both">
             <summary> Both near side and far side of a material. </summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.BothNearFar.NearSide">
             <summary> Only the near side of a material. </summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.BothNearFar.FarSide">
             <summary> Only the far side of a material. </summary> 
            </member>
        <member name="T:DesignData.SDS2.Model.SFlange">
             <summary>A S flange material</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.SFlange.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.SFlange.getCPtr(DesignData.SDS2.Model.SFlange)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.SFlange.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.SFlange.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.SFlange.#ctor(DesignData.SDS2.Setup.SFlangeShape)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.SFlange.GetGrade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SFlange.GetAvailableSteelGrades">
             <summary>A list of steel grades, valid for SFlange, which can be
             assigned to the Grade property of a SFlange</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SFlange.Grade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SFlange.AvailableSteelGrades">
             <summary>A list of steel grades, valid for SFlange, which can be
             assigned to the Grade property of a SFlange</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.NutType">
             <summary>The style of nut</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.NutType.None">
                 
            </member>
        <member name="F:DesignData.SDS2.Model.NutType.HeavyHex">
                 
            </member>
        <member name="F:DesignData.SDS2.Model.NutType.HeavySquare">
                 
            </member>
        <member name="F:DesignData.SDS2.Model.NutType.Jam">
                 
            </member>
        <member name="F:DesignData.SDS2.Model.Guid.swigCMemOwn">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Guid.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Guid.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Guid.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Guid.#ctor(System.String)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Guid.#ctor(DesignData.SDS2.Model.Guid)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.Purlin">
             <summary>
             A builtin steel purlin member.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Purlin.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Purlin.getCPtr(DesignData.SDS2.Model.Purlin)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Purlin.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Purlin.#ctor">
            
            </member>
        <member name="P:DesignData.SDS2.Model.Purlin.RollType">
             </member>
        <member name="P:DesignData.SDS2.Model.Purlin.MidOrdinateRoll">
             </member>
        <member name="P:DesignData.SDS2.Model.Purlin.IncludedAngleRoll">
             </member>
        <member name="P:DesignData.SDS2.Model.Purlin.RollingRadius">
             </member>
        <member name="P:DesignData.SDS2.Model.Purlin.SpiralRollOffset">
             </member>
        <member name="T:DesignData.SDS2.Model.RolledShapeMaterial">
             <summary>A material primarily defined by its associated Shape</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RolledShapeMaterial.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.RolledShapeMaterial.getCPtr(DesignData.SDS2.Model.RolledShapeMaterial)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.RolledShapeMaterial.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.RolledShapeMaterial.GetCenteredOnDepth">
             <summary> Whether this material is centered on its axis or not.
             Generally, not centered means the logical member line will pass
             through the center of the top of steel.  Centered means that the
             logical member line will pass through the center of the web.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RolledShapeMaterial.GetOrderLength">
             <summary>The length of material ordered before any cuts are made.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidOperationException">
             If a rolling operation is set, attempting to set OrderLength will throw
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RolledShapeMaterial.GetPartLength">
             <summary>This reports the distance parallel with the X axis of
             the material from the furthest point on the material's left end
             (first work point end) to the furthest point on the material's
             right end. Unlike the OrderLength, this distance is measured
             after end cuts are made to the material. In most cases, the PartLength
             and OrderLength are exactly the same.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RolledShapeMaterial.GetWorkPointLength">
             <summary>The distance between work points of the material, from
             the first point located.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RolledShapeMaterial.IsCenteredOnDepth">
             <summary> Whether this material is centered on its axis or not.
             Generally, not centered means the logical member line will pass
             through the center of the top of steel.  Centered means that the
             logical member line will pass through the center of the web.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RolledShapeMaterial.OrderLength">
             <summary>The length of material ordered before any cuts are made.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidOperationException">
             If a rolling operation is set, attempting to set OrderLength will throw
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RolledShapeMaterial.PartLength">
             <summary>This reports the distance parallel with the X axis of
             the material from the furthest point on the material's left end
             (first work point end) to the furthest point on the material's
             right end. Unlike the OrderLength, this distance is measured
             after end cuts are made to the material. In most cases, the PartLength
             and OrderLength are exactly the same.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RolledShapeMaterial.WorkPointLength">
             <summary>The distance between work points of the material, from
             the first point located.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RolledShapeMaterial.RollType">
             <summary>The type of roll on this material, or None if there is
             no roll on this material.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RolledShapeMaterial.MidOrdinateRoll">
             <summary>The measurement from the center of the curved member to
             point halfway between the left and right end.  For Camber, this
             is the only valid value to set.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RolledShapeMaterial.IncludedAngleRoll">
             <summary>The included angle of the rolling operation.  This can be set
             for any operation besides a camber roll</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RolledShapeMaterial.RollingRadius">
             <summary>The rolling radius for any roll operation besides a camber roll.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RolledShapeMaterial.SpiralRollOffset">
             <summary>The positive or negative distance that the right end
             will be offset from the right work point in the member's Z axis.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RolledShapeMaterial.AngleOfTwist">
             <summary>The angle (in radians) of twist from one end of the
             material to the other.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RolledShapeMaterial.GetRollType">
             <summary>The type of roll on this material, or None if there is
             no roll on this material.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RolledShapeMaterial.GetMidOrdinateRoll">
             <summary>The measurement from the center of the curved member to
             point halfway between the left and right end.  For Camber, this
             is the only valid value to set.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RolledShapeMaterial.GetIncludedAngleRoll">
             <summary>The included angle of the rolling operation.  This can be set
             for any operation besides a camber roll</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RolledShapeMaterial.GetRollingRadius">
             <summary>The rolling radius for any roll operation besides a camber roll.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RolledShapeMaterial.GetSpiralRollOffset">
             <summary>The positive or negative distance that the right end
             will be offset from the right work point in the member's Z axis.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RolledShapeMaterial.GetAngleOfTwist">
             <summary>The angle (in radians) of twist from one end of the
             material to the other.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RolledShapeMaterial.GetLayout">
             <summary>Get the layout used to generate this
             RolledShapeMaterial. This value may be null. Mutations to the
             returned value do not change the material; SetLayout() must be
             used to modify the layout on the material.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RolledShapeMaterial.SetLayout(DesignData.SDS2.Primitives.Layout3D)">
             <summary>Set the layout used to generate this material.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.IStitchPlateSettings">
            
             <summary>Interface for stitch plate settings (on brace main
             material)</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.IStitchPlateSettings.IsAutoStitchPlateGap">
            
             <summary>If true, then StitchPlateGap will be determined by the
             system during process (not instantly).  If false, then you can
             set StitchPlateGap and the system will follow that
             setting.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.IStitchPlateSettings.StitchPlateGap">
            
             <summary>The gap between two pieces of material for stitch plates
             to sit in.  If AutoStitchPlateGap is true, then this field is
             calculated during process and should not be set by API users.  If
             that field is false, then set this to cause the system to design
             with whatever gap you set.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.IStitchPlateSettings.IsAutoMaxStitchPlateSpacing">
            
             <summary>If true, then MaxStitchPlateSpacing will be determined
             during process and should not be set here.  If false, then it
             should be set here and it will be followed by process</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.IStitchPlateSettings.MaxStitchPlateSpacing">
            
             <summary>The center to center distance between stitch plates along
             the brace work line.  This is the max distance, some may have to fall
             closer than this because the work line may not be simply divisible by
             this value</summary>
             <remarks>If AutoMaxStitchPlateSpacing is false, then this should
             be set by the user or API and will be used during process.  If
             the auto field is true, then this will be set during process and
             you should not set it from the API.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.IStitchPlateSettings.IsAutoNumberOfStitchPlates">
            
             <summary>If true, then NumberOfStitchPlates will be set
             by the system during process.  If false, then the user or API
             must set NumberOfStichPlates before process.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.IStitchPlateSettings.NumberOfStitchPlates">
            
             <summary>If AutoNumberOfStitchPlates is false, then set this and
             process will create this many stitch plates.  If true, then
             during process the system will calculate the number of stitch
             plates and this will be set to that calculation</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.IRollingOperation">
             <summary>
               Interface for rolling operation properties.
             </summary>
            </member>
        <member name="P:DesignData.SDS2.Model.IRollingOperation.RollType">
            
            <summary>The type of roll on this material, or None if there is
            no roll on this material.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.IRollingOperation.MidOrdinateRoll">
            
            <summary>The measurement from the center of the curved member to
            point halfway between the left and right end.  For Camber, this
            is the only valid value to set.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.IRollingOperation.IncludedAngleRoll">
            
            <summary>The included angle of the rolling operation.  This can be set
            for any operation besides a camber roll</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.IRollingOperation.RollingRadius">
            
            <summary>The rolling radius for any roll operation besides a camber roll.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.IRollingOperation.SpiralRollOffset">
            
            <summary>The positive or negative distance that the right end
            will be offset from the right work point in the member's Z axis.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.IRollingOperation.AngleOfTwist">
             <summary>
               The angle (in radians) of twist from one end of the
               material to the other.
             </summary>
            </member>
        <member name="M:DesignData.SDS2.Model.IRollingOperation.GetLayout">
             <summary>Get the layout used to generate this
             RolledShapeMaterial. This value may be null. Mutations to the
             returned value do not change the material; SetLayout() must be
             used to modify the layout on the material.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.IRollingOperation.SetLayout(DesignData.SDS2.Primitives.Layout3D)">
             <summary>Set the layout used to generate this material.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.Component">
             <summary>Base class for components on members</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Component.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Component.getCPtr(DesignData.SDS2.Model.Component)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Component.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Component.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Component.GetHandle">
             <summary>The handle for this component</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Component.Handle">
             <summary>The handle for this component</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.VertBraceWideFlangeHorzConnectionArrangement">
             <summary>
             A specification for how a horizontal wide flange
             brace connects to the gusset plate.
             </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.VertBraceWideFlangeHorzConnectionArrangement.FlangeGussets">
             <summary>Connect with plates on the wide flange flanges</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.VertBraceWideFlangeHorzConnectionArrangement.WebClawAngles">
             <summary>Connect with angles on the wide flange web</summary> 
            </member>
        <member name="T:DesignData.SDS2.Model.Stair">
             <summary>
             A builtin stair member.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.getCPtr(DesignData.SDS2.Model.Stair)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetLeftNearSideStringer">
             <summary>The left, near side, stringer settings for this stair.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetRightNearSideStringer">
             <summary>The right, near side, stringer settings for this stair.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetLeftFarSideStringer">
             <summary>The left, far side, stringer settings for this stair.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetRightFarSideStringer">
             <summary>The right, far side, stringer settings for this stair.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetIntermediateTreadSchedule">
             <summary>The intermediate stair tread for this stair. Values either come
             from setup, or a user created custom stair tread.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetTopTreadSchedule">
             <summary>The top stair tread for this stair. Values either come
             from setup, or a user created custom stair tread.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetBottomTreadSchedule">
             <summary>The top stair tread for this stair. Values either come
             from setup, or a user created custom stair tread.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetTreadWidth">
             <summary>Total width of the stair tread.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetAutoNumberRisers">
             <summary>Controls if the number of risers will be automatically
             chosen.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetNumberRisers">
             <summary>Total number of risers for the stair tread.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetTreadFinish">
             <summary>Finish that will be applied to the tread surface.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetRiserDimension">
             <summary>The height (rise) of the stair divided by the number of
             treads/risers</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetTreadDimension">
             <summary>The horizontal length (run) of the stair divided by the
             number of treads/risers</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetOverrideFarSideMaterial">
             <summary>Sets if the default far side material is overwritten.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetShopAssembled">
             <summary>Sets if the stair is shop assembled.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetAttachSupportsToTread">
             <summary>Applies only to field assembled stairs (ShopAssembled is false).</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetStringerFinish">
             <summary>The surface finish on the stair stringers.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetStringerNearSideShape">
             <summary>The near side stringer material.  If OverrideFarSideMaterial is false,
                      the far side material is also set to this material.</summary>
             <value>A channel, tube steel or plate material</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetStringerFarSideShape">
             <summary>The far side stringer shape.  If OverrideFarSideMaterial is false,
                      this value is ignored.</summary>
             <value>A channel, tube steel or plate material</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetStringerNearSideGrade">
             <summary>The near side stringer steel grade.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetStringerFarSideGrade">
             <summary>The far side stringer steel grade.  If OverrideFarSideMaterial is false,
                      this value is ignored.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetStringerNearSideLength">
             <summary>Use near side stringer part length on BOM. This applies when the end
                      condition for the near side stringer is 'Bolt to Floor'.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetStringerFarSideLength">
             <summary>Use far side stringer part length on BOM. This applies when the end
                      condition for the far side stringer is 'Bolt to Floor'.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetCenterOffset">
             <summary>The positive/negative horizontal offset of the stair from the workline</summary>
             <value>The offset from the workline.
                    Positive offsets toward the near side of the workline.
                    Negative offsets toward the far side of the workline.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetNosingDimension">
             <summary>The distance between the top flange of the stringer and the workline.
                      Distance is measured perpendicular to the workline.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetBottomRiserSetback">
             <summary>The positive/negative vertical extension of the bottom riser.</summary>
             <value>And setback of '0' results in the bottom riser's dimension being the same
                    as the other risers in the stair.
                    A positive distance extends the riser downward, toward the floor.
                    A negative distance sets the riser back from the floor.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetBottomRiserReturnLength">
             <summary>The positive/negative horizontal extension of the bottom riser return.</summary>
             <value>And setback of '0' results in no return.
                    A positive distance results in an extension inward, towards the stair.
                    A negative distance results in an extension outward, away from the stair.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetCNCMarks">
             <summary>Determines what CNC marks to automatically add to the inside faces
                      of stair stringers to facilitate proper alignment of treads or
                      tread supports.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetDrawingScale">
             <summary>The scale at which the member detail of the stair is drawn.</summary>\
             <value>If imperial units are being used, sets the number of inches on the
                    stair detail that represent a foot in the shop or construction site.
                    If metric units are used, sets the number of milimeters that represent
                    10 milimeters in the shop or construction site.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetInABM">
             <summary>Sets whether or not the stair is included in the ABM.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetAutoABMLength">
             <summary>Sets if the ABM length is auto-generated. If this is false, length
                      can be set using the ABMLength property</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetABMNote">
             <summary>The ABM Note for this stair.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetABMLength">
             <summary>The length of the stair in the ABM.  If AutoABMLength is true, this
                      property is read-only, and will throw an exception if trying to set
                      it</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetUsePointToPointLength">
             <summary>Sets whether or not to use point to point in the ABM length calculation.</summary>
             <value>If True, will calculate length using point to point method.  If false, the
                    standard ABM length is used.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetConnectionLeftNS">
             <summary>The connection between the left, near side stringer and its support</summary> 
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetConnectionLeftFS">
             <summary>The connection between the left, far side stringer and its support</summary> 
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetConnectionRightNS">
             <summary>The connection between the right, near side stringer and its support</summary> 
            </member>
        <member name="M:DesignData.SDS2.Model.Stair.GetConnectionRightFS">
             <summary>The connection between the right, far side stringer and its support</summary> 
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.IntermediateTreadSchedule">
             <summary>The intermediate stair tread for this stair. Values either come
             from setup, or a user created custom stair tread.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.TopTreadSchedule">
             <summary>The top stair tread for this stair. Values either come
             from setup, or a user created custom stair tread.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.BottomTreadSchedule">
             <summary>The top stair tread for this stair. Values either come
             from setup, or a user created custom stair tread.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.TreadWidth">
             <summary>Total width of the stair tread.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.AutoNumberRisers">
             <summary>Controls if the number of risers will be automatically
             chosen.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.NumberRisers">
             <summary>Total number of risers for the stair tread.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.OverrideFarSideMaterial">
             <summary>Sets if the default far side material is overwritten.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.ShopAssembled">
             <summary>Sets if the stair is shop assembled.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.AttachSupportsToTread">
             <summary>Applies only to field assembled stairs (ShopAssembled is false).</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.TreadFinish">
             <summary>Finish that will be applied to the tread surface.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.StringerFinish">
             <summary>The surface finish on the stair stringers.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.TreadSurfaceFinish">
             <summary>Finish that will be applied to the tread surface.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.StringerSurfaceFinish">
             <summary>The surface finish on the stair stringers.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.StringerNearSideShape">
             <summary>The near side stringer material.  If OverrideFarSideMaterial is false,
                      the far side material is also set to this material.</summary>
             <value>A channel, tube steel or plate material</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.StringerFarSideShape">
             <summary>The far side stringer shape.  If OverrideFarSideMaterial is false,
                      this value is ignored.</summary>
             <value>A channel, tube steel or plate material</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.StringerNearSideGrade">
             <summary>The near side stringer steel grade.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.StringerFarSideGrade">
             <summary>The far side stringer steel grade.  If OverrideFarSideMaterial is false,
                      this value is ignored.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.StringerNearSideLength">
             <summary>Use near side stringer part length on BOM. This applies when the end
                      condition for the near side stringer is 'Bolt to Floor'.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.StringerFarSideLength">
             <summary>Use far side stringer part length on BOM. This applies when the end
                      condition for the far side stringer is 'Bolt to Floor'.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.CenterOffset">
             <summary>The positive/negative horizontal offset of the stair from the workline</summary>
             <value>The offset from the workline.
                    Positive offsets toward the near side of the workline.
                    Negative offsets toward the far side of the workline.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.NosingDimension">
             <summary>The distance between the top flange of the stringer and the workline.
                      Distance is measured perpendicular to the workline.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.BottomRiserSetback">
             <summary>The positive/negative vertical extension of the bottom riser.</summary>
             <value>And setback of '0' results in the bottom riser's dimension being the same
                    as the other risers in the stair.
                    A positive distance extends the riser downward, toward the floor.
                    A negative distance sets the riser back from the floor.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.BottomRiserReturnLength">
             <summary>The positive/negative horizontal extension of the bottom riser return.</summary>
             <value>And setback of '0' results in no return.
                    A positive distance results in an extension inward, towards the stair.
                    A negative distance results in an extension outward, away from the stair.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.CNCMarks">
             <summary>Determines what CNC marks to automatically add to the inside faces
                      of stair stringers to facilitate proper alignment of treads or
                      tread supports.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.DrawingScale">
             <summary>The scale at which the member detail of the stair is drawn.</summary>\
             <value>If imperial units are being used, sets the number of inches on the
                    stair detail that represent a foot in the shop or construction site.
                    If metric units are used, sets the number of milimeters that represent
                    10 milimeters in the shop or construction site.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.InABM">
             <summary>Sets whether or not the stair is included in the ABM.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.IsAutoABMLength">
             <summary>Sets if the ABM length is auto-generated. If this is false, length
                      can be set using the ABMLength property</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.ABMNote">
             <summary>The ABM Note for this stair.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.ABMLength">
             <summary>The length of the stair in the ABM.  If AutoABMLength is true, this
                      property is read-only, and will throw an exception if trying to set
                      it</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.UsePointToPointLength">
             <summary>Sets whether or not to use point to point in the ABM length calculation.</summary>
             <value>If True, will calculate length using point to point method.  If false, the
                    standard ABM length is used.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.LeftNearSideStringer">
             <summary>The left, near side, stringer settings for this stair.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.LeftFarSideStringer">
             <summary>The left, far side, stringer settings for this stair.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.RightNearSideStringer">
             <summary>The right, near side, stringer settings for this stair.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.RightFarSideStringer">
             <summary>The right, far side, stringer settings for this stair.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.RiserDimension">
             <summary>The height (rise) of the stair divided by the number of
             treads/risers</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.TreadDimension">
             <summary>The horizontal length (run) of the stair divided by the
             number of treads/risers</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.ConnectionLeftNearSide">
             <summary>The connection between the left, near side stringer and its support</summary> 
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.ConnectionLeftFarSide">
             <summary>The connection between the left, far side stringer and its support</summary> 
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.ConnectionRightNearSide">
             <summary>The connection between the right, near side stringer and its support</summary> 
            </member>
        <member name="P:DesignData.SDS2.Model.Stair.ConnectionRightFarSide">
             <summary>The connection between the right, far side stringer and its support</summary> 
            </member>
        <member name="T:DesignData.SDS2.Model.SeatSpecificationMaterial">
             <summary>Allowed materials for seated connection specifications</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.SeatSpecificationMaterial.Plate">
             <summary>Two plates welded in the shape of a tee</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.SeatSpecificationMaterial.Angle">
             <summary>Angle</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.SeatSpecificationMaterial.Tee">
             <summary>A rolled section tee shape</summary> 
            </member>
        <member name="T:DesignData.SDS2.Model.StringerLength">
             <summary>Enumeration denoting the stringer length reported in the stair's BOM.</summary>
            </member>
        <member name="F:DesignData.SDS2.Model.StringerLength.PreCut">
             <summary>Results in length reported for stringer in stair BOM to be the order length
                      of the material.  Corresponds to saw length in the CNC setup. This is the
                      length of the stringer material _before_ cuts were made to its end so that
                      it could be bolted to the floor. </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.StringerLength.PostCut">
             <summary>Results in stringer length in the stair BOM being its part length. Corresponds
                      to the final length in the CNC setup.  This is the length of the stringer _after_
                      its end was cut so that it could be bolted to the floor.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.View">
             <summary>
             Data representing a view of the model.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.View.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.View.getCPtr(DesignData.SDS2.Model.View)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.View.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.View.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.View.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.View.#ctor(DesignData.SDS2.Model.View)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.View.GetToViewCoordinates">
             <summary>
             Matrix, in inches, representing a transformation from global coordinates
             to the view coordinates
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.View.GetToGlobalCoordinates">
             <summary>
             Matrix, in inches, representing a transformation from view coordinates
             to global coordinates
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.View.GetToClippingCoordinates">
             <summary>
             Matrix, in inches, representing a transformation from global coordinates
             to the clipping coordinates. The clipping coordinates define a plane in the
             model in which DepthNear and DepthFar are used to clip solids out of the view.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.View.GetClippingToGlobalCoordinates">
             <summary>
             Matrix, in inches, representing a transformation from clipping coordinates
             to global coordinates. The clipping coordinates define a plane in the
             model in which DepthNear and DepthFar are used to clip solids out of the view.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.View.GetViewableArea">
             <summary>
             Area of view coordinates that is visable
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.View.GetDepthNear">
             <summary>
             The distance, in inches, from the origin of the clipping coordinates to the positive Z clipping plane
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.View.GetDepthFar">
             <summary>
             The distance, in inches, from the origin of the clipping coordinates to the negative Z clipping plane
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.View.GetIsDepthCheckOn">
             <summary>
             Specifies whether the objects in the view are clipped by the DepthNear and DepthFar clipping planes
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.View.GetHashCode">
                  
            </member>
        <member name="M:DesignData.SDS2.Model.View.Equals(System.Object)">
            
            </member>
        <member name="P:DesignData.SDS2.Model.View.ToViewCoordinates">
             <summary>
             Matrix, in inches, representing a transformation from global coordinates
             to the view coordinates
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.View.ToGlobalCoordinates">
             <summary>
             Matrix, in inches, representing a transformation from view coordinates
             to global coordinates
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.View.ToClippingCoordinates">
             <summary>
             Matrix, in inches, representing a transformation from global coordinates
             to the clipping coordinates. The clipping coordinates define a plane in the
             model in which DepthNear and DepthFar are used to clip solids out of the view.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.View.ClippingToGlobalCoordinates">
             <summary>
             Matrix, in inches, representing a transformation from clipping coordinates
             to global coordinates. The clipping coordinates define a plane in the
             model in which DepthNear and DepthFar are used to clip solids out of the view.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.View.ViewableArea">
             <summary>
             Area of view coordinates that is visable
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.View.DepthNear">
             <summary>
             The distance, in inches, from the origin of the clipping coordinates to the positive Z clipping plane
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.View.DepthFar">
             <summary>
             The distance, in inches, from the origin of the clipping coordinates to the negative Z clipping plane
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.View.IsDepthCheckOn">
             <summary>
             Specifies whether the objects in the view are clipped by the DepthNear and DepthFar clipping planes
             </summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.LongLeg">
             <summary>Defines the which leg of an angle brace with
                      unequal legs is bolted to the gusset plate.</summary>
            </member>
        <member name="F:DesignData.SDS2.Model.LongLeg.ToGusset">
             <summary>Bolts the long leg of the angle to the gusset plate.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.LongLeg.Outstanding">
             <summary>Bolts the short leg of the angle to the gusset plate</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.WeldedWideFlange">
             <summary>Welded plate wide flange material</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.WeldedWideFlange.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldedWideFlange.getCPtr(DesignData.SDS2.Model.WeldedWideFlange)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldedWideFlange.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldedWideFlange.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldedWideFlange.#ctor(DesignData.SDS2.Setup.WeldedWideFlangeShape)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldedWideFlange.GetGrade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldedWideFlange.GetAvailableSteelGrades">
             <summary>A list of steel grades for instances of this material type</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.WeldedWideFlange.Grade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.WeldedWideFlange.AvailableSteelGrades">
             <summary>A list of steel grades for instances of this material type</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.BasePlateWeldWithGroove">
             <summary>Base plate weld options when there is a groove</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.BasePlateWeldWithGroove.None">
             <summary>No weld</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.BasePlateWeldWithGroove.SingleFillet">
             <summary>Fillet weld for general welding of material</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.BasePlateWeldWithGroove.SingleBevelGroove">
             <summary>
             Bevel groove weld for general full penetration welding of material.
             </summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.VertBracePlateSpecification">
             <summary>
             A specification for connecting a vertical brace to one or more supporting
             members via a gusset plate and possibly clip angles.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.getCPtr(DesignData.SDS2.Model.VertBracePlateSpecification)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetAutoGrade">
             <summary>
             If true, the system determines the plate grade.
             If false, the value specified in the Grade property will be used.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetGrade">
             <summary>
             The grade to set on the plate material for this connection.
             </summary>
             <remarks>Setting this fill flip AutoGrade to false</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetUseOversizedHoles">
             <summary>
             Specifies whether oversized round holes should be used for the brace-to-gusset interface.
             </summary>
             <remarks>As per AISC guidelines, connection design will use slip critical bolts for oversized holes</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetWideFlangeConnectionArrangement">
             <summary>
             Specifies the horizontal wide flange brace connection arrangement to the gusset plate.
             </summary>
             <remarks>Applies to horizontal wide flange braces.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetWideFlangeWebAttachment">
             <summary>
             Specifies how the web of a vertical wide flange brace attaches to the gusset plate.
             </summary>
             <remarks>Applies to vertical wide flange braces.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetWideFlangeAttachment">
             <summary>
             Specifies how the flanges of a vertical wide flange brace attach to the gusset plate.
             </summary>
             <remarks>Applies to vertical wide flange braces.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetHssAttachment">
             <summary>
             Specifies how a HSS brace attaches to the gusset plate.
             </summary>
             <remarks>Applies to HSS braces.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetNotchClearance">
             <summary>
             Specifies the distance, in inches, that the notch on a welded HSS section extends past the gusset plate.
             </summary>
             <remarks>Applies to non bolted HSS brace connections.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetErectionBolt">
             <summary>
             Specifies the number of erection bolts used to connect a welded HSS section to the gusset plate.
             </summary>
             <remarks>Applies to welded HSS brace connections.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetAngleAttachment">
             <summary>
             Specifies how the end of a single angle brace is attached to the gusset plate.
             </summary>
             <remarks>Applies for single angle braces. Double angles will be bolted.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetIncludeEndWeld">
             <summary>
             Specifies whether an additional weld is applied to the end of
             a brace that runs perpendicular to the longitudinal axis of the brace.
             </summary>
             <remarks>Applies when a non HSS brace is welded to the gusset plate.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetBalancedWelds">
             <summary>
             Specifies whether the welds connecting a brace to the gussest are balanced.
             </summary>
             <remarks>Applies when a non HSS brace is welded to the gusset plate.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetUseReinforcementPlate">
             <summary>
             Specifies whether a reinforcement plate is used between the gusset plate and a HSS column face.
             </summary>
             <remarks>Only applies when framing to a HHS tube column with a thin wall.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetClipEndOperation">
             <summary>
             Specifies if the corner of the gusset plate connected to the brace is clipped.
             </summary>
             <remarks>Only applies to certain brace types, e.g angle, tee, and wide flange.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetSupportingAttachment">
             <summary>
             Specifies how the gusset plate is attached to the supporting member(s).
             </summary>
             <remarks>
             Some values do not apply in certain situations.
             See SDS2's help on vertical brace connections for more information.
             </remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetBeamClipSize">
             <summary>
             Specifies how the clip angle is sized when a vertical brace connects to
             a column and beam with a clip angle attachment.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetClipAnglesAttachment">
             <summary>
             Specifies how the clip angles attatch to the gusset plate when
             the gusset plate bolts to the supporting member(s).
             </summary>
             <remarks>
             See SDS2's help on vertical brace connections for more information.
             </remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetIsAutoClipAngleShape">
             <summary>
             Specifies whether the clip angle shape connecting a gusset
             plate to the supporting member(s) is based on setup.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetClipAngleShape">
             <summary>
             Specifies the clip angle shape for connecting a gusset plate
             and the supporting member when IsAutoClipAngleShape is False.
             </summary>
             <remarks>
             See SDS2's help on vertical brace connections for more information.
             </remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetClipAngleLongLegTo">
             <summary>
             Specifies the long leg orientation of the clip angle connecting the
             gusset plate to the supporting member(s).
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetIsAutoClipAngleSupportedHoleType">
             <summary>
             Specifies if the hole type on the leg of the clip angle connecting the
             gusset plate to the supported member is determined by setup.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetClipAngleSupportedHoleType">
             <summary>
             Specifies the hole type on the leg of the clip angle connecting the
             gusset plate to the supported member.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetIsAutoClipAngleSupportingHoleType">
             <summary>
             Specifies if the hole type on the leg of the clip angle connecting the
             gusset plate to the supporting member is determined by setup.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetClipAngleSupportingHoleType">
             <summary>
             Specifies the hole type on the leg of the clip angle connecting the
             gusset plate to the supporting member.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetIsAutoClipAngleBoltType">
             <summary>
             Specifies if the bolt type for the bolts involved in connecting the clip angle
             to the supporting member and the brace gusset plate is using the value defined in setup.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetClipAngleBoltType">
             <summary>
             Specifies the bolt type for the bolts involved in connecting the clip angle
             to the supporting member and the brace gusset plate.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetIsAutoClipAngleBoltDiameter">
             <summary>
             Specifies if the bolt diameter for the bolts involved in connecting the clip angle
             to the supporting member and the brace gusset plate is using the value defined in setup.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetClipAngleBoltDiameter">
             <summary>
             Specifies the bolt diameter, in inches, for the bolts involved in connecting the clip angle
             to the supporting member and the brace gusset plate is using the value defined in setup.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetClipAngleBoltStagger">
             <summary>
             Specifies if the bolts on the two legs of a clip angle
             connecting the supporting member and the brace gusset plate are staggered.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetIsAutoGageOnSupporting">
             <summary>
             Specifies whether setup determines the center-to-center dimension between columns of holes
             on the outstanding legs of clip angles or whether this specification does.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetGageOnSupporting">
             <summary>
             Specifies the center-to-center dimension between columns of holes
             on the outstanding legs of clip angles.
             </summary>
             <remarks>
             Applies when IsAutoGageOnSupporting is false. Does not apply when
             the brace frames to a column and beam. If the specified gage
             does not work, e.g. 0, the system will determine a correct gage.
             See SDS2 help on vertical brace connections for more information.
             </remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetUFMSpecialCase">
             <summary>
             Specifies how the system spreads the load across a connection between
             a supporting column and beam.
             </summary>
             <remarks>
             See SDS2 help on vertical brace connections for more information.
             </remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetIsAutoUFMSpecialCase2PercentTransfer">
             <summary>
             Specifies whether setup determines the UFM special case 2 transfer percent.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetUFMSpecialCase2PercentTransfer">
             <summary>
             Specifies the UFM special case 2 transfer percent.
             </summary>
             <remarks>
             Does not apply when IsAutoUFMSpecialCase2_PercentTransfer is true.
             </remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetSupportingMemberWebStressCheck">
             <summary>
             Specifies how the limit state is incorporated as a check within connection design
             that can potentially cause the connection to fail.
             </summary>
             <remarks>
             See SDS2's help on vertical brace connections for more information.
             </remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetSupportingMemberWebCripplingCheck">
             <summary>
             Specifies how the limit state is incorporated as a check within connection design
             that can potentially cause the connection to fail.
             </summary>
             <remarks>
             See SDS2's help on vertical brace connections for more information.
             </remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetSupportingMemberWebShearCheck">
             <summary>
             Specifies how the limit state is incorporated as a check within connection design
             that can potentially cause the connection to fail.
             </summary>
             <remarks>
             See SDS2's help on vertical brace connections for more information.
             </remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetSupportingMemberFlangeBendingCheck">
             <summary>
             Specifies how the limit state is incorporated as a check within connection design
             that can potentially cause the connection to fail.
             </summary>
             <remarks>
             See SDS2's help on vertical brace connections for more information.
             </remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VertBracePlateSpecification.GetAISC1stEdition2ptGussets">
             <summary>
             Specifies AISC 1st edition 2 point gussets.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.IsAutoGrade">
             <summary>
             If true, the system determines the plate grade.
             If false, the value specified in the Grade property will be used.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.Grade">
             <summary>
             The grade to set on the plate material for this connection.
             </summary>
             <remarks>Setting this fill flip AutoGrade to false</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.UseOversizedHoles">
             <summary>
             Specifies whether oversized round holes should be used for the brace-to-gusset interface.
             </summary>
             <remarks>As per AISC guidelines, connection design will use slip critical bolts for oversized holes</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.WideFlangeConnectionArrangement">
             <summary>
             Specifies the horizontal wide flange brace connection arrangement to the gusset plate.
             </summary>
             <remarks>Applies to horizontal wide flange braces.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.WideFlangeWebAttachment">
             <summary>
             Specifies how the web of a vertical wide flange brace attaches to the gusset plate.
             </summary>
             <remarks>Applies to vertical wide flange braces.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.WideFlangeAttachment">
             <summary>
             Specifies how the flanges of a vertical wide flange brace attach to the gusset plate.
             </summary>
             <remarks>Applies to vertical wide flange braces.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.HssAttachment">
             <summary>
             Specifies how a HSS brace attaches to the gusset plate.
             </summary>
             <remarks>Applies to HSS braces.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.NotchClearance">
             <summary>
             Specifies the distance, in inches, that the notch on a welded HSS section extends past the gusset plate.
             </summary>
             <remarks>Applies to non bolted HSS brace connections.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.ErectionBolt">
             <summary>
             Specifies the number of erection bolts used to connect a welded HSS section to the gusset plate.
             </summary>
             <remarks>Applies to welded HSS brace connections.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.AngleAttachment">
             <summary>
             Specifies how the end of a single angle brace is attached to the gusset plate.
             </summary>
             <remarks>Applies for single angle braces. Double angles will be bolted.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.IncludeEndWeld">
             <summary>
             Specifies whether an additional weld is applied to the end of
             a brace that runs perpendicular to the longitudinal axis of the brace.
             </summary>
             <remarks>Applies when a non HSS brace is welded to the gusset plate.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.BalancedWelds">
             <summary>
             Specifies whether the welds connecting a brace to the gussest are balanced.
             </summary>
             <remarks>Applies when a non HSS brace is welded to the gusset plate.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.UseReinforcementPlate">
             <summary>
             Specifies whether a reinforcement plate is used between the gusset plate and a HSS column face.
             </summary>
             <remarks>Only applies when framing to a HHS tube column with a thin wall.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.ClipEndOperation">
             <summary>
             Specifies if the corner of the gusset plate connected to the brace is clipped.
             </summary>
             <remarks>Only applies to certain brace types, e.g angle, tee, and wide flange.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.SupportingAttachment">
             <summary>
             Specifies how the gusset plate is attached to the supporting member(s).
             </summary>
             <remarks>
             Some values do not apply in certain situations.
             See SDS2's help on vertical brace connections for more information.
             </remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.BeamClipSize">
             <summary>
             Specifies how the clip angle is sized when a vertical brace connects to
             a column and beam with a clip angle attachment.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.ClipAnglesAttachment">
             <summary>
             Specifies how the clip angles attatch to the gusset plate when
             the gusset plate bolts to the supporting member(s).
             </summary>
             <remarks>
             See SDS2's help on vertical brace connections for more information.
             </remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.IsAutoClipAngleShape">
             <summary>
             Specifies whether the clip angle shape connecting a gusset
             plate to the supporting member(s) is based on setup.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.ClipAngleShape">
             <summary>
             Specifies the clip angle shape for connecting a gusset plate
             and the supporting member when IsAutoClipAngleShape is False.
             </summary>
             <remarks>
             See SDS2's help on vertical brace connections for more information.
             </remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.ClipAngleLongLegTo">
             <summary>
             Specifies the long leg orientation of the clip angle connecting the
             gusset plate to the supporting member(s).
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.IsAutoClipAngleSupportedHoleType">
             <summary>
             Specifies if the hole type on the leg of the clip angle connecting the
             gusset plate to the supported member is determined by setup.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.ClipAngleSupportedHoleType">
             <summary>
             Specifies the hole type on the leg of the clip angle connecting the
             gusset plate to the supported member.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.IsAutoClipAngleSupportingHoleType">
             <summary>
             Specifies if the hole type on the leg of the clip angle connecting the
             gusset plate to the supporting member is determined by setup.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.ClipAngleSupportingHoleType">
             <summary>
             Specifies the hole type on the leg of the clip angle connecting the
             gusset plate to the supporting member.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.IsAutoClipAngleBoltType">
             <summary>
             Specifies if the bolt type for the bolts involved in connecting the clip angle
             to the supporting member and the brace gusset plate is using the value defined in setup.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.ClipAngleBoltType">
             <summary>
             Specifies the bolt type for the bolts involved in connecting the clip angle
             to the supporting member and the brace gusset plate.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.IsAutoClipAngleBoltDiameter">
             <summary>
             Specifies if the bolt diameter for the bolts involved in connecting the clip angle
             to the supporting member and the brace gusset plate is using the value defined in setup.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.ClipAngleBoltDiameter">
             <summary>
             Specifies the bolt diameter, in inches, for the bolts involved in connecting the clip angle
             to the supporting member and the brace gusset plate is using the value defined in setup.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.ClipAngleBoltStagger">
             <summary>
             Specifies if the bolts on the two legs of a clip angle
             connecting the supporting member and the brace gusset plate are staggered.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.IsAutoGageOnSupporting">
             <summary>
             Specifies whether setup determines the center-to-center dimension between columns of holes
             on the outstanding legs of clip angles or whether this specification does.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.GageOnSupporting">
             <summary>
             Specifies the center-to-center dimension between columns of holes
             on the outstanding legs of clip angles.
             </summary>
             <remarks>
             Applies when IsAutoGageOnSupporting is false. Does not apply when
             the brace frames to a column and beam. If the specified gage
             does not work, e.g. 0, the system will determine a correct gage.
             See SDS2 help on vertical brace connections for more information.
             </remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.UFMSpecialCase">
             <summary>
             Specifies how the system spreads the load across a connection between
             a supporting column and beam.
             </summary>
             <remarks>
             See SDS2 help on vertical brace connections for more information.
             </remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.IsAutoUFMSpecialCase2PercentTransfer">
             <summary>
             Specifies whether setup determines the UFM special case 2 transfer percent.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.UFMSpecialCase2PercentTransfer">
             <summary>
             Specifies the UFM special case 2 transfer percent.
             </summary>
             <remarks>
             Does not apply when IsAutoUFMSpecialCase2_PercentTransfer is true.
             </remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.SupportingMemberWebStressCheck">
             <summary>
             Specifies how the limit state is incorporated as a check within connection design
             that can potentially cause the connection to fail.
             </summary>
             <remarks>
             See SDS2's help on vertical brace connections for more information.
             </remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.SupportingMemberWebCripplingCheck">
             <summary>
             Specifies how the limit state is incorporated as a check within connection design
             that can potentially cause the connection to fail.
             </summary>
             <remarks>
             See SDS2's help on vertical brace connections for more information.
             </remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.SupportingMemberWebShearCheck">
             <summary>
             Specifies how the limit state is incorporated as a check within connection design
             that can potentially cause the connection to fail.
             </summary>
             <remarks>
             See SDS2's help on vertical brace connections for more information.
             </remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.SupportingMemberFlangeBendingCheck">
             <summary>
             Specifies how the limit state is incorporated as a check within connection design
             that can potentially cause the connection to fail.
             </summary>
             <remarks>
             See SDS2's help on vertical brace connections for more information.
             </remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VertBracePlateSpecification.AISC1stEdition2ptGussets">
             <summary>
             Specifies AISC 1st edition 2 point gussets.
             </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.HorizontalBraceEndList.swigCMemOwn">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorizontalBraceEndList.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorizontalBraceEndList.Dispose(System.Boolean)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.HorizontalBraceEndList.HorizontalBraceEndListEnumerator">
             Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
             whenever the collection is modified. This has been done for changes in the size of the
             collection but not when one of the elements of the collection is modified as it is a bit
             tricky to detect unmanaged code that modifies the collection under our feet.
            </member>
        <member name="M:DesignData.SDS2.Model.HorizontalBraceEndList.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorizontalBraceEndList.#ctor(DesignData.SDS2.Model.HorizontalBraceEndList)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorizontalBraceEndList.#ctor(System.Int32)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.ClipFlange">
             <summary>Clips the flange based on the flange cut angle on the
             material, from the edge of the flange the center of the
             material</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipFlange.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipFlange.getCPtr(DesignData.SDS2.Model.ClipFlange)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipFlange.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipFlange.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.WeldedBox">
             <summary>Welded plate box material</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.WeldedBox.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldedBox.getCPtr(DesignData.SDS2.Model.WeldedBox)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldedBox.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldedBox.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldedBox.#ctor(DesignData.SDS2.Setup.WeldedBoxShape)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldedBox.GetGrade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldedBox.GetAvailableSteelGrades">
             <summary>A list of steel grades for instances of this material type</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.WeldedBox.Grade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.WeldedBox.AvailableSteelGrades">
             <summary>A list of steel grades for instances of this material type</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.DetailView">
             <summary>Information for a member view</summary> 
            </member>
        <member name="M:DesignData.SDS2.Model.DetailView.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.DetailView.getCPtr(DesignData.SDS2.Model.DetailView)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.DetailView.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.DetailView.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.DetailView.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.DetailView.MemberPreset(DesignData.SDS2.Database.MemberHandle,DesignData.SDS2.Model.PresetView)">
             <summary>
             A view corresponding to the specified member and preset view
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.DetailView.GetToViewCoordinates">
             <summary>
             Matrix, in inches, representing a transformation from global coordinates
             to view coordinates
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.DetailView.GetClippingBounds">
             <summary>
             The view clipping bounds, in inches.
             </summary>
             <remarks>
              The maximum coordinate representing no bounds is 240,000 and the minimum is -240,000
             </remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.DetailView.GetViewType">
             <summary>Type of the view</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.DetailView.GetCutFrom">
             <summary>The view used to cut this view from, or null if not cut from another view</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.DetailView.GetScale">
             <summary>The scale of the view</summary>
             <remarks>The typical scale is 1.0</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.DetailView.GetMiscellaneousOffset">
             <summary>An offset for the view</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.DetailView.GetViewUse">
             <summary>Specifies the view use</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.DetailView.GetProjectionUse">
             <summary>Specifies the projected view use</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.DetailView.GetIsUserCreated">
             <summary>Specifies if the view is user created</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.DetailView.GetIsInsideClipBox">
             <summary>Specifies if the view is inside the clipping bounds</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.DetailView.GetIsProjectedFromCutView">
             <summary>Specifies if the view is projected from the CutFrom view</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.DetailView.GetIsForced">
             <summary>Specifies if the view is forced on the detail</summary>
             <remarks>
             Legacy, i.e. non template, detailing sometimes requires certain system
             views to be forced before they will be added to a detail.
             </remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.DetailView.ToViewCoordinates">
             <summary>
             Matrix, in inches, representing a transformation from global coordinates
             to view coordinates
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.DetailView.ClippingBounds">
             <summary>
             The view clipping bounds, in inches.
             </summary>
             <remarks>
              The maximum coordinate representing no bounds is 240,000 and the minimum is -240,000
             </remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.DetailView.ViewType">
             <summary>Type of the view</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.DetailView.CutFrom">
             <summary>The view used to cut this view from, or null if not cut from another view</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.DetailView.Scale">
             <summary>The scale of the view</summary>
             <remarks>The typical scale is 1.0</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.DetailView.MiscellaneousOffset">
             <summary>An offset for the view</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.DetailView.ViewUse">
             <summary>Specifies the view use</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.DetailView.ProjectionUse">
             <summary>Specifies the projected view use</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.DetailView.IsUserCreated">
             <summary>Specifies if the view is user created</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.DetailView.IsInsideClipBox">
             <summary>Specifies if the view is inside the clipping bounds</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.DetailView.IsProjectedFromCutView">
             <summary>Specifies if the view is projected from the CutFrom view</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.DetailView.IsForced">
             <summary>Specifies if the view is forced on the detail</summary>
             <remarks>
             Legacy, i.e. non template, detailing sometimes requires certain system
             views to be forced before they will be added to a detail.
             </remarks>
            
            </member>
        <member name="T:DesignData.SDS2.Model.StairConnectionAttachmentSpecification">
             <summary>Base class for StairConnection attachments</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionAttachmentSpecification.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionAttachmentSpecification.getCPtr(DesignData.SDS2.Model.StairConnectionAttachmentSpecification)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionAttachmentSpecification.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionAttachmentSpecification.Dispose(System.Boolean)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.STee">
             <summary>A S tee material</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.STee.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.STee.getCPtr(DesignData.SDS2.Model.STee)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.STee.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.STee.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.STee.#ctor(DesignData.SDS2.Setup.STeeShape)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.STee.GetGrade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.STee.GetAvailableSteelGrades">
             <summary>A list of steel grades, valid for STee, which can be
             assigned to the Grade property of a STee</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.STee.Grade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.STee.AvailableSteelGrades">
             <summary>A list of steel grades, valid for STee, which can be
             assigned to the Grade property of a STee</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.MaterialSetbackType">
             <summary>Determines the meaning of the MaterialSetbackValue on the end
             of the main material.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.MaterialSetbackType.ConnectionSetback">
             <summary>distance from the face of the designed clip angle or
             bent plate to this end of this beam (the supported
             beam).</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.MaterialSetbackType.InputMaterialSetback">
             <summary>distance measured parallel with the workline of the beam
             from the work point for this end of the beam to the beam's main
             material.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.MaterialSetbackType.AutomaticMaterialSetback">
             <summary>distance measured parallel with the workline of the beam
             from the work point at this end of the beam to the end of the
             beam's main material. When this option is used, the system
             calculates the material setback distance for you.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.StudType">
             <summary>Type of Stud.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.StudType.Shear">
             <summary> Shear Stud </summary>
                  
            </member>
        <member name="F:DesignData.SDS2.Model.StudType.Threaded">
             <summary> Threaded Stud </summary>
                  
            </member>
        <member name="T:DesignData.SDS2.Model.AutoSupportingSupported">
             <summary>
             Set of connection specification values describing possible sides of a material
             </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.AutoSupportingSupported.Auto">
             <summary> Clip angle long leg to material on member defined in setup. </summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.AutoSupportingSupported.Supporting">
             <summary> Clip angle long leg attaches to material on supporting member. </summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.AutoSupportingSupported.Supported">
             <summary> Clip angle long leg attaches to material on supported member. </summary> 
            </member>
        <member name="T:DesignData.SDS2.Model.VertBraceHssAttachmentMethod">
             <summary>
             A specification for how a HSS wide flange vertical brace
             connects to the gusset plate.
             </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.VertBraceHssAttachmentMethod.Welded">
             <summary>Welded connection</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.VertBraceHssAttachmentMethod.Bolted">
             <summary>Bolted connection</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.VertBraceHssAttachmentMethod.PaddlePlate">
             <summary>Paddle plate connection</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.VertBraceHssAttachmentMethod.PaddlePlateDoubleShear">
             <summary>Paddle plate (double shear) connection</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.VertBraceHssAttachmentMethod.DoublePaddlePlate">
             <summary>Double paddle plate connection</summary> 
            </member>
        <member name="T:DesignData.SDS2.Model.JoistStabilizingMaterial">
             <summary>What kind of stabilizing material to use for a joist
             connection</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.JoistStabilizingMaterial.None">
             <summary>Use no stabilizing material</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.JoistStabilizingMaterial.Angle">
             <summary>Use an angle for stabilizing material</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.JoistStabilizingMaterial.Plate">
             <summary>Use a plate for stabilizing material</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.ShearThroughPlate">
             <summary>Through plate options for shear tabs attaching to tubes</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ShearThroughPlate.None">
             <summary>Do not go through the tube</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ShearThroughPlate.Through">
             <summary>Go through the tube with a single plate connecting to
             beams on both sides</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ShearThroughPlate.Split">
             <summary>Go through the tube, splitting the plate if it
             encounters another through plate intersecting it.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.MaterialList.swigCMemOwn">
            
            </member>
        <member name="M:DesignData.SDS2.Model.MaterialList.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.MaterialList.Dispose(System.Boolean)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.MaterialList.MaterialListEnumerator">
             Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
             whenever the collection is modified. This has been done for changes in the size of the
             collection but not when one of the elements of the collection is modified as it is a bit
             tricky to detect unmanaged code that modifies the collection under our feet.
            </member>
        <member name="M:DesignData.SDS2.Model.MaterialList.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.MaterialList.#ctor(DesignData.SDS2.Model.MaterialList)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.MaterialList.#ctor(System.Int32)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.TurnedShellLayout">
             <summary>A turned shell formed by a planar loop of points, a Layout3D</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.TurnedShellLayout.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.TurnedShellLayout.getCPtr(DesignData.SDS2.Model.TurnedShellLayout)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.TurnedShellLayout.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.TurnedShellLayout.GetThickness">
             <summary>The thickness of the turned shell.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.TurnedShellLayout.GetIncludedAngle">
             <summary>An angle more than 0 and less than 2PI radians.  This is
             the share of a circle that the turned shell fills.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.TurnedShellLayout.GetFabricationMethod">
             <summary>The method used to fabricate the turned shell</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.TurnedShellLayout.GetThicknessReference">
             <summary>The thickness reference position</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.TurnedShellLayout.GetLayout">
             <summary>Get the layout used to generate this turned shell in
             material coordinates. The layout is in the XY plane and is turned
             about the Y axis in the negative direction. Mutations to the
             returned value do not change the material; SetLayout() must be
             used to modify the layout on the material.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.TurnedShellLayout.SetLayout(DesignData.SDS2.Primitives.Layout3D)">
             <summary>Set the layout used to generate this turned shell.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.TurnedShellLayout.ThicknessReference">
             <summary>The thickness reference position</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.TurnedShellLayout.Thickness">
             <summary>The thickness of the turned shell.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.TurnedShellLayout.IncludedAngle">
             <summary>An angle more than 0 and less than 2PI radians.  This is
             the share of a circle that the turned shell fills.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.TurnedShellLayout.FabricationMethod">
             <summary>The method used to fabricate the turned shell</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.TurnedShellLayout.BendSegments">
             </member>
        <member name="M:DesignData.SDS2.Model.TurnedShellLayout.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.StandardPart">
             <summary>A standard part, in SDS2, is a piece of material that the
             system knows nothing about beyond a few basic attributes like
             material color and grade.  It could come from a library of parts, or
             it could come from fusing together two pieces of material.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StandardPart.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StandardPart.getCPtr(DesignData.SDS2.Model.StandardPart)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StandardPart.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StandardPart.GetGrade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StandardPart.GetAvailableSteelGrades">
             <summary>A list of steel grades, valid for StandardParts, which can be
             assigned to the Grade property of a StandardPart</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.StandardPart.Grade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.StandardPart.AvailableSteelGrades">
             <summary>A list of steel grades, valid for StandardParts, which can be
             assigned to the Grade property of a StandardPart</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StandardPart.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.LockableDouble">
             <summary>A lockable value holding a double</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableDouble.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableDouble.getCPtr(DesignData.SDS2.Model.LockableDouble)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableDouble.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableDouble.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableDouble.GetValue">
             <summary>The underlying floating point value</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableDouble.#ctor(System.Double)">
             <summary>Create a locked ViaMemberEdit LockableDouble from a double</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableDouble.op_Implicit(System.Double)~DesignData.SDS2.Model.LockableDouble">
             <summary>Implicit conversion using the double constructor</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableDouble.op_Implicit(DesignData.SDS2.Model.LockableDouble)~System.Double">
             <summary>Implicit conversion to value type</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableDouble.op_Addition(DesignData.SDS2.Model.LockableDouble,System.Double)">
            </member>
        <member name="M:DesignData.SDS2.Model.LockableDouble.op_Subtraction(DesignData.SDS2.Model.LockableDouble,System.Double)">
            </member>
        <member name="M:DesignData.SDS2.Model.LockableDouble.op_Multiply(DesignData.SDS2.Model.LockableDouble,System.Double)">
            </member>
        <member name="M:DesignData.SDS2.Model.LockableDouble.op_Division(DesignData.SDS2.Model.LockableDouble,System.Double)">
            </member>
        <member name="P:DesignData.SDS2.Model.LockableDouble.Value">
             <summary>The underlying floating point value</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.IFC4">
              
            </member>
        <member name="F:DesignData.SDS2.Model.IFC4.swigCMemOwn">
            
            </member>
        <member name="M:DesignData.SDS2.Model.IFC4.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.IFC4.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.IFC4.Export(DesignData.SDS2.Database.MemberHandleList,DesignData.SDS2.Model.ModelViewDefinition,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Double,System.Boolean,System.Double,System.Double,System.Double,System.Double)">
             <summary>Export an IFC4 file, returned as a byte array</summary>
             <remarks>
             This requires the ModelLink license feature.
            
             This function will change the current working directory for the program
             temporarily.  While it's being called the directory will change to SDS2's data directory
             and then it will be put back before it exits.
            
             So be very careful calling this in a multi-threaded environment where you may also
             change the working directory.
            
             This may print to standard error, this is due to the library SDS2 uses for
             outputting IFC and is outside of our control.
             </remarks>
             <param name="members">The members to include in this IFC export</param>
             <param name="modelViewDefinition">Can be any option in the enumeration</param>
             <param name="withHoles">true to include holes in the IFC</param>
             <param name="withBolts">true to include bolts in the IFC</param>
             <param name="withWelds">true to include welds in the IFC</param>
             <param name="revitFriendly">if true, make modifications to the IFC to aid
             in importing it with revit</param>
             <param name="storiesByZoneAndSequence">Export stories by zone and sequence</param>
             <param name="exportScheduling">if true, export scheduling info for Synchro.  See the
             schedulingXML parameter to supply necessary information</param>
             <param name="schedulingXML">if exportScheduling:true, then give a Synchro XML file here</param>
             <param name="withCenterOfMassLocation">if true, export the center of mass location
             This option is will dramatically increase the time to generate an export.</param>
             <param name="withCustomProperties">if true, export custom property information</param>
             <param name="withLogs">if true, export logs found under custom properties</param>
             <param name="withGrids">if true, export grids</param>
             <param name="gridDistance">Grid lines, in SDS2, are infinite.  This is the distance,
             outside of the model's bounding box, to cut off grid lines.  Only applies if withGrids is true.</param>
             <param name="compress">if true, the IFC blob will be a compressed zip file with the IFC in it</param>
             <param name="translateX">The global translation on X axis to apply to all elements</param>
             <param name="translateY">The global translation on Y axis to apply to all elements</param>
             <param name="translateZ">The global translation on Z axis to apply to all elements</param>
             <param name="rotateCCWAboutZAxis">The rotation of CCW about the Z axis in radians</param>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLicensedException">thrown when the ModelLink license
             is not available or the current platform does not support IFC export.  (Note, all Microsoft
             Windows systems support IFC export).</exception>
            
            </member>
        <member name="T:DesignData.SDS2.Model.VertBraceSupportingAttachmentMethod">
             <summary>
             A specification for how a vertical brace gusset plate
             connects to the supporting member(s).
             </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.VertBraceSupportingAttachmentMethod.Automatic">
             <summary>Use the value specified in setup for the connection</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.VertBraceSupportingAttachmentMethod.ClipAngle">
             <summary>Bolted clip angle connection</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.VertBraceSupportingAttachmentMethod.Welded">
             <summary>Welded connection</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.VertBraceSupportingAttachmentMethod.ThruGusset">
             <summary>Thru gusset connection</summary> 
            </member>
        <member name="T:DesignData.SDS2.Model.ViewProjectionUse">
             <summary>View projection usages</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.ViewProjectionUse.Unspecified">
             <summary>Unspecified use</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.ViewProjectionUse.CapPlate1">
             <summary>2-plane bevel column cap plate view #1</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.ViewProjectionUse.CapPlate2">
             <summary>2-plane bevel column cap plate view #2</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.ViewProjectionUse.CapPlate3">
             <summary>2-plane bevel column cap plate view #3</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.ViewProjectionUse.BasePlate1">
             <summary>2-plane bevel column base plate view #1</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.ViewProjectionUse.BasePlate2">
             <summary>2-plane bevel column base plate view #2</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.ViewProjectionUse.BasePlate3">
             <summary>2-plane bevel column base plate view #3</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.ViewProjectionUse.TaperedColumn">
             <summary>Tapered column</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.ViewProjectionUse.TaperedRafter">
             <summary>Tapered rafter</summary> 
            </member>
        <member name="T:DesignData.SDS2.Model.LockableSpacing">
             <summary>Variable spacings describe the spacings between a row of bolts,
             possibly varying between each bolt</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableSpacing.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableSpacing.getCPtr(DesignData.SDS2.Model.LockableSpacing)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableSpacing.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableSpacing.#ctor">
             <summary>Create a variable spacing with no spacings set</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableSpacing.GetMax">
             <summary>The largest spacing</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableSpacing.GetMin">
             <summary>The smallest spacing</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableSpacing.GetFirst">
             <summary>The first spacing</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableSpacing.GetLast">
             <summary>The last spacing</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableSpacing.GetIsVariable">
             <summary>True is the spacing list is variable, not uniform</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableSpacing.GetAssumedRows">
             <summary>The number of rows of bolts described by this set of spacings</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableSpacing.SetAll(System.Double)">
             <summary>Set all spacings to this same value, keep the same number of rows of bolts</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableSpacing._indexoperator(System.Int32)">
             <summary>Get the nth spacing</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableSpacing.size">
             <summary>Get count of spacings</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableSpacing.FromString(System.String)">
             <summary>Parse spacings from a user input string</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.LockableSpacing.Max">
             <summary>The largest spacing</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.LockableSpacing.Min">
             <summary>The smallest spacing</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.LockableSpacing.First">
             <summary>The first spacing</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.LockableSpacing.Last">
             <summary>The last spacing</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.LockableSpacing.IsVariable">
             <summary>True is the spacing list is variable, not uniform</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.LockableSpacing.AssumedRows">
             <summary>The number of rows of bolts described by this set of spacings</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.LockableSpacing.Item(System.Int32)">
            <summary>Get the nth spacing</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.LockableSpacing.Count">
             <summary>Get count of spacings</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.LockableSpacing.Enumerator">
             <summary>An enumerator for the parent class</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableSpacing.GetEnumerator">
             <summary>Get the enumerator object</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableSpacing.op_Addition(DesignData.SDS2.Model.LockableSpacing,System.Double)">
            </member>
        <member name="M:DesignData.SDS2.Model.LockableSpacing.op_Subtraction(DesignData.SDS2.Model.LockableSpacing,System.Double)">
            </member>
        <member name="M:DesignData.SDS2.Model.LockableSpacing.op_Multiply(DesignData.SDS2.Model.LockableSpacing,System.Double)">
            </member>
        <member name="M:DesignData.SDS2.Model.LockableSpacing.op_Division(DesignData.SDS2.Model.LockableSpacing,System.Double)">
            </member>
        <member name="T:DesignData.SDS2.Model.LockableBraceFillLocation">
             <summary>A lockable value for BraceFillLocation</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBraceFillLocation.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBraceFillLocation.getCPtr(DesignData.SDS2.Model.LockableBraceFillLocation)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBraceFillLocation.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBraceFillLocation.#ctor">
                  
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBraceFillLocation.GetValue">
             <summary>The underlying value</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBraceFillLocation.#ctor(DesignData.SDS2.Model.BraceFillLocation)">
             <summary>Create a locked ViaMemberEdit LockableBraceFillLocation from a BraceFillLocation</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBraceFillLocation.op_Implicit(DesignData.SDS2.Model.BraceFillLocation)~DesignData.SDS2.Model.LockableBraceFillLocation">
             <summary>Implicit conversion using the BraceFillLocation constructor</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBraceFillLocation.op_Implicit(DesignData.SDS2.Model.LockableBraceFillLocation)~DesignData.SDS2.Model.BraceFillLocation">
             <summary>Implicit conversion to value type</summary>
            </member>
        <member name="P:DesignData.SDS2.Model.LockableBraceFillLocation.Value">
             <summary>The underlying value</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.StairConnection">
             <summary>Connection for an end and side of a stair stringer</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnection.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnection.getCPtr(DesignData.SDS2.Model.StairConnection)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnection.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnection.GetIsLeft">
             <summary>Specifies if the connection is on the left end of the stair</summary> 
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnection.GetIsNearSide">
             <summary>Specifies if the connection is on the near side of the stair</summary> 
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnection.GetIsBottomEnd">
             <summary>Specifies if the connection is on the bottom end of the stair</summary> 
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnection.GetElevation">
             <summary>The elevation, in inches, of the connection reference point</summary> 
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnection.IsClipAngleConnection">
             <summary>Indicates if a StairConnectionClipAngle is used</summary> 
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnection.IsShearPlateConnection">
             <summary>Indicates if a StairConnectionShearPlate is used</summary> 
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnection.IsFloorClipConnection">
             <summary>Indicates if a StairConnectionFloorClip is used</summary> 
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnection.IsPlainEndConnection">
             <summary>Indicates if a StairConnectionPlainEnd is used</summary> 
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnection.GetSupportingMember">
             <summary>The supporting member.</summary>
             <remarks>
             StairConnection may disregard the set supporting member if it determines
             a connection cannot be made to it. In that case it may try to find a
             different member that it can connect to.
             </remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnection.GetConnection">
             <summary>Specifies the connection between a stringer its support.</summary>
             <remarks>This data is a copy of the connection</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for null connection.</exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnection.IsLeft">
             <summary>Specifies if the connection is on the left end of the stair</summary> 
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnection.IsNearSide">
             <summary>Specifies if the connection is on the near side of the stair</summary> 
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnection.IsBottomEnd">
             <summary>Specifies if the connection is on the bottom end of the stair</summary> 
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnection.Elevation">
             <summary>The elevation, in inches, of the connection reference point</summary> 
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnection.Connection">
             <summary>Specifies the connection between a stringer its support.</summary>
             <remarks>This data is a copy of the connection</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for null connection.</exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnection.SupportingMember">
             <summary>The supporting member.</summary>
             <remarks>
             StairConnection may disregard the set supporting member if it determines
             a connection cannot be made to it. In that case it may try to find a
             different member that it can connect to.
             </remarks>
            
            </member>
        <member name="T:DesignData.SDS2.Model.HorzBraceHssAttachmentMethod">
             <summary>
             A specification for how a HSS wide flange horizontal brace
             connects to the gusset plate.
             </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.HorzBraceHssAttachmentMethod.Welded">
             <summary>Welded connection</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.HorzBraceHssAttachmentMethod.Bolted">
             <summary>Bolted connection</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.HorzBraceHssAttachmentMethod.PaddlePlate">
             <summary>Paddle plate connection</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.HorzBraceHssAttachmentMethod.DoublePaddlePlate">
             <summary>Double paddle plate connection</summary> 
            </member>
        <member name="T:DesignData.SDS2.Model.IFC2x3">
              
            </member>
        <member name="F:DesignData.SDS2.Model.IFC2x3.swigCMemOwn">
            
            </member>
        <member name="M:DesignData.SDS2.Model.IFC2x3.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.IFC2x3.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.IFC2x3.Export(DesignData.SDS2.Database.MemberHandleList,DesignData.SDS2.Model.ModelViewDefinition,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Double,System.Boolean,System.Double,System.Double,System.Double,System.Double)">
             <summary>Export an IFC2x3 file, returned as a byte array</summary>
             <remarks>
             This requires the ModelLink license feature.
            
             This function will change the current working directory for the program
             temporarily.  While it's being called the directory will change to SDS2's data directory
             and then it will be put back before it exits.
            
             So be very careful calling this in a multi-threaded environment where you may also
             change the working directory.
            
             This may print to standard error, this is due to the library SDS2 uses for
             outputting IFC and is outside of our control.</remarks>
             <param name="members">The members to include in this IFC export</param>
             <param name="modelViewDefinition">Can only be CoordinationView2 or EM11SteelFabrication</param>
             <param name="withHoles">true to include holes in the IFC</param>
             <param name="withBolts">true to include bolts in the IFC</param>
             <param name="withWelds">true to include welds in the IFC</param>
             <param name="revitFriendly">if true, make modifications to the IFC to aid
             in importing it with revit</param>
             <param name="strumisFriendly">if true, make modifications to the IFC to aid in
             importing into strumis</param>
             <param name="storiesByZoneAndSequence">Export stories by zone and sequence</param>
             <param name="exportScheduling">if true, export scheduling info for Synchro.  See the
             schedulingXML parameter to supply necessary information</param>
             <param name="schedulingXML">if exportScheduling:true, then give a Synchro XML file here</param>
             <param name="withCenterOfMassLocation">if true, export the center of mass location.
             This option is will dramatically increase the time to generate an export.</param>
             <param name="withCustomProperties">if true, export custom property information</param>
             <param name="withLogs">if true, export logs found under custom properties</param>
             <param name="withGrids">if true, export grids</param>
             <param name="gridDistance">Grid lines, in SDS2, are infinite.  This is the distance,
             outside of the model's bounding box, to cut off grid lines.  Only applies if withGrids is true.</param>
             <param name="compress">if true, the IFC blob will be a compressed zip file with the IFC in it</param>
             <param name="translateX">The global translation on X axis to apply to all elements</param>
             <param name="translateY">The global translation on Y axis to apply to all elements</param>
             <param name="translateZ">The global translation on Z axis to apply to all elements</param>
             <param name="rotateCCWAboutZAxis">The rotation of CCW about the Z axis in radians</param>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLicensedException">thrown when the ModelLink license
             is not available or the current platform does not support IFC export.  (Note, all Microsoft
             Windows systems support IFC export).</exception>
            
            </member>
        <member name="T:DesignData.SDS2.Model.ICuttableEndMaterial">
             <summary>
               Interface for materials which provide a list of ends that are CuttableMaterialEnds
             </summary>
            </member>
        <member name="P:DesignData.SDS2.Model.ICuttableEndMaterial.Ends">
             <summary>
               The list of two ends.
             </summary>
            </member>
        <member name="F:DesignData.SDS2.Model.WeldList.swigCMemOwn">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldList.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldList.Dispose(System.Boolean)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.WeldList.WeldListEnumerator">
             Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
             whenever the collection is modified. This has been done for changes in the size of the
             collection but not when one of the elements of the collection is modified as it is a bit
             tricky to detect unmanaged code that modifies the collection under our feet.
            </member>
        <member name="M:DesignData.SDS2.Model.WeldList.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldList.#ctor(DesignData.SDS2.Model.WeldList)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldList.#ctor(System.Int32)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.StiffenerAlignment">
             <summary>Stiffener alignment options, whether it should be aligned to
             the beam or column, or if it should look to setup for which to align
             to</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.StiffenerAlignment.Automatic">
             <summary>specifies that the system apply a setup choice
             (Fabricator Setup &gt; Standard Fabricator Connections &gt; Cap Plate
             Setup &gt; "Align transverse stiffeners with").</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.StiffenerAlignment.Column">
             <summary>instructs the system to create transverse beam stiffeners
             that are parallel with the workline (stick form member line) of
             the column.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.StiffenerAlignment.Beam">
             <summary>configures the system to create transverse beam stiffeners
             that are perpendicular to the workline of the beam. The
             stiffeners are normal to the beam, regardless of the slope of the
             beam or column.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.ShearPlateSide">
             <summary>Which side of the supported member to put the shear tab on</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ShearPlateSide.Automatic">
             <summary>Let the system determine which side is optimal</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ShearPlateSide.NearSide">
                  
            </member>
        <member name="F:DesignData.SDS2.Model.ShearPlateSide.FarSide">
                  
            </member>
        <member name="T:DesignData.SDS2.Model.BeamToClipAttachmentMethod">
             <summary>
             Set of end connection values describing possible connections for a beam-to-clip.
             </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.BeamToClipAttachmentMethod.Auto">
             <summary> Auto select connection type. </summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.BeamToClipAttachmentMethod.Welded">
             <summary> Welded connection. </summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.BeamToClipAttachmentMethod.Bolted">
             <summary> Bolted connection. </summary> 
            </member>
        <member name="T:DesignData.SDS2.Model.FullyWeldedSpecification">
             <summary>
             A fully welded moment connection specification.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FullyWeldedSpecification.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.FullyWeldedSpecification.getCPtr(DesignData.SDS2.Model.FullyWeldedSpecification)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.FullyWeldedSpecification.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.FullyWeldedSpecification.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.ReferenceObjectAreaLayout">
             <summary>A flat reference material formed by a planar loop of points,
             a Layout3D</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ReferenceObjectAreaLayout.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ReferenceObjectAreaLayout.getCPtr(DesignData.SDS2.Model.ReferenceObjectAreaLayout)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ReferenceObjectAreaLayout.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ReferenceObjectAreaLayout.GetThickness">
             <summary>The thickness of the material.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ReferenceObjectAreaLayout.GetThicknessReferencePoint">
             <summary>The center plane of the material.  Changing this shifts the
             material without changing the work points of the material.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ReferenceObjectAreaLayout.GetLayout">
             <summary>Get the layout used to generate this material, in material
             coordinates. Mutations to the returned value do not change the
             material; SetLayout() must be used to modify the layout on the
             material.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ReferenceObjectAreaLayout.SetLayout(DesignData.SDS2.Primitives.Layout3D)">
             <summary>Set the layout used to generate this material, in material coordinates.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ReferenceObjectAreaLayout.ThicknessReferencePoint">
             <summary>The center plane of the material.  Changing this shifts the
             material without changing the work points of the material.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ReferenceObjectAreaLayout.Thickness">
             <summary>The thickness of the material.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ReferenceObjectAreaLayout.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.HoleOperationCounterBore">
             <summary>Counter bore hole operation</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationCounterBore.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationCounterBore.getCPtr(DesignData.SDS2.Model.HoleOperationCounterBore)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationCounterBore.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationCounterBore.GetDepth">
             <summary>The depth of the wider section of the hole</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationCounterBore.GetDiameter">
             <summary>The diameter of the wider section of the hole</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationCounterBore.GetHashCode">
                 
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationCounterBore.Equals(System.Object)">
            
            </member>
        <member name="P:DesignData.SDS2.Model.HoleOperationCounterBore.Depth">
             <summary>The depth of the wider section of the hole</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HoleOperationCounterBore.Diameter">
             <summary>The diameter of the wider section of the hole</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.HorizontalBraceEnd">
             <summary>Horizontal brace specific end options</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorizontalBraceEnd.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorizontalBraceEnd.getCPtr(DesignData.SDS2.Model.HorizontalBraceEnd)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorizontalBraceEnd.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorizontalBraceEnd.GetMemberSetbackType">
             <summary>The type of setback on this end of the member</summary>
             <remarks>Be sure to set this before setting MemberSetbackValue</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorizontalBraceEnd.GetMemberSetbackValue">
             <summary>The value for the current member setback.  This can only be set
             if MemberSetbackType is either FieldClearance or InputMinusDimension</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidOperationException">
             Thrown if MemberSetbackType is AutomaticMinusDimension</exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorizontalBraceEnd.MemberSetbackType">
             <summary>The type of setback on this end of the member</summary>
             <remarks>Be sure to set this before setting MemberSetbackValue</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorizontalBraceEnd.MemberSetbackValue">
             <summary>The value for the current member setback.  This can only be set
             if MemberSetbackType is either FieldClearance or InputMinusDimension</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidOperationException">
             Thrown if MemberSetbackType is AutomaticMinusDimension</exception>
            
            </member>
        <member name="T:DesignData.SDS2.Model.WeldJointType">
             <summary>Enumerated weld joint types</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.WeldJointType.NoJoint">
             <summary>No weld joint</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.WeldJointType.ButtJoint">
             <summary>Butt joint, tail text B</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.WeldJointType.CornerJoint">
             <summary>Corner joint, tail text C</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.WeldJointType.TJoint">
             <summary>T-joint, tail text T</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.WeldJointType.ButtCornerJoint">
             <summary>Butt or corner joint, tail text BC</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.WeldJointType.TCornerJoint">
             <summary>T or corner joint, tail text TC</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.WeldJointType.ButtTCornerJoint">
             <summary>Butt, T or corner joint, tail text BTC</summary> 
            </member>
        <member name="T:DesignData.SDS2.Model.StairConnectionPlainEnd">
             <summary>No stair connection material</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionPlainEnd.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionPlainEnd.getCPtr(DesignData.SDS2.Model.StairConnectionPlainEnd)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionPlainEnd.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionPlainEnd.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.HoleOperationCounterSink">
             <summary>Counter sunk hole operation</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationCounterSink.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationCounterSink.getCPtr(DesignData.SDS2.Model.HoleOperationCounterSink)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationCounterSink.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationCounterSink.GetAngle">
             <summary>The angle to flare the hole out so that the screw head
             can fit flush</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationCounterSink.GetDiameter">
             <summary>The diameter of the countersunk part of the
             hole.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationCounterSink.GetHashCode">
                 
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationCounterSink.Equals(System.Object)">
            
            </member>
        <member name="P:DesignData.SDS2.Model.HoleOperationCounterSink.Angle">
             <summary>The angle to flare the hole out so that the screw head
             can fit flush</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HoleOperationCounterSink.Diameter">
             <summary>The diameter of the countersunk part of the
             hole.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.ColumnAutoBaseCapPlateSpecification">
             <summary>A system designed base or cap plate, connecting to another
             steel member (generally a beam).</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ColumnAutoBaseCapPlateSpecification.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ColumnAutoBaseCapPlateSpecification.getCPtr(DesignData.SDS2.Model.ColumnAutoBaseCapPlateSpecification)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ColumnAutoBaseCapPlateSpecification.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ColumnAutoBaseCapPlateSpecification.#ctor">
                  
            </member>
        <member name="M:DesignData.SDS2.Model.ColumnAutoBaseCapPlateSpecification.GetWeldPattern">
             <summary>The weld pattern to attach the base/cap plate with</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ColumnAutoBaseCapPlateSpecification.GetUseTransverseBeamStiffener">
             <summary>Whether or not to use a transverse beam stiffener.
            
              Automatic specifies that the system apply a setup choice (Job
              Setup &gt; Design Settings &gt; "Always provide transverse beam
              stiffener").
            
              Yes instructs the system to create at least one pair of
              full-depth transverse beam stiffeners (one on the beam's near
              side, one far side) regardless of the "Load" on the column. Two
              pairs of stiffeners are created when the "Load" is sufficiently
              large. The two pairs of stiffeners align with the flanges of the
              column. A single pair of stiffeners is centered with respect to
              the column member line.
            
              No instructs the system to not create a pair of transverse
              beam stiffeners, even when the column's "Load" is large enough
              that the beam's web capacity is exceeded. If the system
              determines that the web capacity of the beam is exceeded, a
              connection is not designed, and you get the following end
              connection failure message: "Conn modified by framing situation,
              see Design Calcs."
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ColumnAutoBaseCapPlateSpecification.GetAlignStiffenersWith">
             <summary> Automatic specifies that the system apply a setup
             choice (Fabricator Setup &gt; Standard Fabricator Connections &gt; Cap
             Plate Setup &gt; "Align transverse stiffeners with").
            
             Column instructs the system to create transverse beam stiffeners
             that are parallel with the workline (stick form member line) of
             the column.
            
             Beam configures the system to create transverse beam stiffeners
             that are perpendicular to the workline of the beam. The
             stiffeners are normal to the beam, regardless of the slope of the
             beam or column.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ColumnAutoBaseCapPlateSpecification.GetUseExtendedStiffeners">
             <summary> Automatic specifies that the system look at the
             Fabricator Setup &gt; Standard Fabricator Connections &gt; Extended
             Flange Plate Setup &gt; "Plate overhang tolerance" to determine
             whether or not to design a connection. If the setup value is less
             than or equal to the actual base/cap plate overhang in the model,
             then a connection will be designed. If the setup value is greater
             than the overhang, a connection is not designed.
            
             Yes instructs the system to attempt to design flange extension
             plates and stiffeners. If it is determined that such a connection
             should not be designed, for example, because of interference with
             another member, the system locks are populated with null values
             (e.g. distances of 0) in leaves named " Bottom extension plate"
             or " Top extension plate" and " Stiffener Plate."
            
             No results in no flange extension plates and beam stiffeners.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ColumnAutoBaseCapPlateSpecification.GetAutoGrade">
             <summary>If true, this has the system determine the plate grade
             for the plate.  If false, whatever value is set to Grade
             will be used.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ColumnAutoBaseCapPlateSpecification.GetGrade">
             <summary>The grade to set on the new plate material for this
             connection.  This grade should come from the plate grade list in
             setup.</summary>
            
             <remarks>Setting this fill flip AutoGrade to false</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ColumnAutoBaseCapPlateSpecification.WeldPattern">
             <summary>The weld pattern to attach the base/cap plate with</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ColumnAutoBaseCapPlateSpecification.UseTransverseBeamStiffener">
             <summary>Whether or not to use a transverse beam stiffener.
            
              Automatic specifies that the system apply a setup choice (Job
              Setup &gt; Design Settings &gt; "Always provide transverse beam
              stiffener").
            
              Yes instructs the system to create at least one pair of
              full-depth transverse beam stiffeners (one on the beam's near
              side, one far side) regardless of the "Load" on the column. Two
              pairs of stiffeners are created when the "Load" is sufficiently
              large. The two pairs of stiffeners align with the flanges of the
              column. A single pair of stiffeners is centered with respect to
              the column member line.
            
              No instructs the system to not create a pair of transverse
              beam stiffeners, even when the column's "Load" is large enough
              that the beam's web capacity is exceeded. If the system
              determines that the web capacity of the beam is exceeded, a
              connection is not designed, and you get the following end
              connection failure message: "Conn modified by framing situation,
              see Design Calcs."
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ColumnAutoBaseCapPlateSpecification.AlignStiffenersWith">
             <summary> Automatic specifies that the system apply a setup
             choice (Fabricator Setup &gt; Standard Fabricator Connections &gt; Cap
             Plate Setup &gt; "Align transverse stiffeners with").
            
             Column instructs the system to create transverse beam stiffeners
             that are parallel with the workline (stick form member line) of
             the column.
            
             Beam configures the system to create transverse beam stiffeners
             that are perpendicular to the workline of the beam. The
             stiffeners are normal to the beam, regardless of the slope of the
             beam or column.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ColumnAutoBaseCapPlateSpecification.UseExtendedStiffeners">
             <summary> Automatic specifies that the system look at the
             Fabricator Setup &gt; Standard Fabricator Connections &gt; Extended
             Flange Plate Setup &gt; "Plate overhang tolerance" to determine
             whether or not to design a connection. If the setup value is less
             than or equal to the actual base/cap plate overhang in the model,
             then a connection will be designed. If the setup value is greater
             than the overhang, a connection is not designed.
            
             Yes instructs the system to attempt to design flange extension
             plates and stiffeners. If it is determined that such a connection
             should not be designed, for example, because of interference with
             another member, the system locks are populated with null values
             (e.g. distances of 0) in leaves named " Bottom extension plate"
             or " Top extension plate" and " Stiffener Plate."
            
             No results in no flange extension plates and beam stiffeners.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ColumnAutoBaseCapPlateSpecification.IsAutoGrade">
             <summary>If true, this has the system determine the plate grade
             for the plate.  If false, whatever value is set to Grade
             will be used.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ColumnAutoBaseCapPlateSpecification.Grade">
             <summary>The grade to set on the new plate material for this
             connection.  This grade should come from the plate grade list in
             setup.</summary>
            
             <remarks>Setting this fill flip AutoGrade to false</remarks>
            
            </member>
        <member name="T:DesignData.SDS2.Model.LockableBool">
             <summary>A lockable value holding an boolean</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBool.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBool.getCPtr(DesignData.SDS2.Model.LockableBool)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBool.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBool.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBool.GetValue">
             <summary>The underlying boolean value</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBool.#ctor(System.Boolean)">
             <summary>Create a locked ViaMemberEdit LockableBool from a bool</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBool.op_Implicit(System.Boolean)~DesignData.SDS2.Model.LockableBool">
             <summary>Implicit conversion using the bool constructor</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBool.op_Implicit(DesignData.SDS2.Model.LockableBool)~System.Boolean">
             <summary>Implicit conversion to value type</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBool.op_Addition(DesignData.SDS2.Model.LockableBool,System.Boolean)">
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBool.op_Subtraction(DesignData.SDS2.Model.LockableBool,System.Boolean)">
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBool.op_Multiply(DesignData.SDS2.Model.LockableBool,System.Boolean)">
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBool.op_Division(DesignData.SDS2.Model.LockableBool,System.Boolean)">
            </member>
        <member name="P:DesignData.SDS2.Model.LockableBool.Value">
             <summary>The underlying boolean value</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.FlangePlateOnShearTabEnd">
              
            </member>
        <member name="F:DesignData.SDS2.Model.FlangePlateOnShearTabEnd.End1">
                  
            </member>
        <member name="F:DesignData.SDS2.Model.FlangePlateOnShearTabEnd.End2">
                  
            </member>
        <member name="F:DesignData.SDS2.Model.FlangePlateOnShearTabEnd.Both">
                  
            </member>
        <member name="T:DesignData.SDS2.Model.HoleOperationNote">
             <summary>A user description of a hole operation</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationNote.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationNote.getCPtr(DesignData.SDS2.Model.HoleOperationNote)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationNote.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationNote.GetNote">
             <summary>A note as a string.</summary>
             <value>A UTF-8 encoded string that is 29 or fewer bytes long.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationNote.GetHashCode">
                 
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationNote.Equals(System.Object)">
            
            </member>
        <member name="P:DesignData.SDS2.Model.HoleOperationNote.Note">
             <summary>A note as a string.</summary>
             <value>A UTF-8 encoded string that is 29 or fewer bytes long.</value>
            
            </member>
        <member name="T:DesignData.SDS2.Model.AutoClipCope">
             <summary>
             Set of connection specification values, typically for plates, represeting automatic, clip, and cope
             </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.AutoClipCope.Automatic">
             <summary> Automatic, typically suggesting connection design should use a value defined in setup </summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.AutoClipCope.Cope">
             <summary> Cope </summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.AutoClipCope.Clip">
             <summary> Clip </summary> 
            </member>
        <member name="T:DesignData.SDS2.Model.LockableCutLocation">
             <summary>Lockable value for CutLocation</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableCutLocation.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableCutLocation.getCPtr(DesignData.SDS2.Model.LockableCutLocation)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableCutLocation.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableCutLocation.#ctor">
                  
            </member>
        <member name="M:DesignData.SDS2.Model.LockableCutLocation.GetValue">
             <summary>The underlying value</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableCutLocation.#ctor(DesignData.SDS2.Model.CutLocation)">
             <summary>Create a locked ViaMemberEdit LockableCutLocation from a CutLocation</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableCutLocation.op_Implicit(DesignData.SDS2.Model.CutLocation)~DesignData.SDS2.Model.LockableCutLocation">
             <summary>Implicit conversion using the CutLocation constructor</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableCutLocation.op_Implicit(DesignData.SDS2.Model.LockableCutLocation)~DesignData.SDS2.Model.CutLocation">
             <summary>Implicit conversion to value type</summary>
            </member>
        <member name="P:DesignData.SDS2.Model.LockableCutLocation.Value">
             <summary>The underlying value</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.Nut">
             <summary>A nut, on a bolt</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.Nut.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Nut.getCPtr(DesignData.SDS2.Model.Nut)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Nut.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Nut.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Nut.GetNutType">
             <summary>the type of nut used</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Nut.NutType">
             <summary>the type of nut used</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="T:DesignData.SDS2.Model.ViewUse">
             <summary>View usages</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.ViewUse.Unspecified">
             <summary>Unspecified use</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.ViewUse.RollLeft">
             <summary>Curved member, left end cross section</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.ViewUse.RollRight">
             <summary>Curved member, right end cross section</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.ViewUse.VertexDimension">
             <summary>Vertex dimension</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.ViewUse.NoNoise">
             <summary>Narrow z-slice</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.ViewUse.MiscellaneousStairStringer">
             <summary>Miscellaneous stair stringer</summary> 
            </member>
        <member name="T:DesignData.SDS2.Model.ErectionViewType">
             <summary>Erection view types</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ErectionViewType.Primary">
             <summary>Primary view type</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ErectionViewType.Secondary">
             <summary>Secondary view type</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ErectionViewType.Dimension">
             <summary>Dimension view type</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ErectionViewType.Placement">
             <summary>Placement view type</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.UFMSpecialCase">
             <summary>
             A specification for how the system spreads the load between the
             connection and supporting column and beams.
             </summary>
             <remarks>
             See SDS2's help on vertical brace connections for more information.
             </remarks>
            
            </member>
        <member name="F:DesignData.SDS2.Model.UFMSpecialCase.Automatic">
             <summary>Use the value defined in setup.</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.UFMSpecialCase.None">
             <summary>Distribute the vertical force to the connection as well as the beam.</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.UFMSpecialCase.Case2">
             <summary>Distribute the vertical force to the connection instead of the beam.</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.UFMSpecialCase.Case3">
             <summary>Design the connection to the beam and not the column.</summary> 
            </member>
        <member name="T:DesignData.SDS2.Model.SeatedSpecification">
             <summary>A seated connection</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeatedSpecification.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeatedSpecification.getCPtr(DesignData.SDS2.Model.SeatedSpecification)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeatedSpecification.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeatedSpecification.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeatedSpecification.GetSeatMaterial">
             <summary>The type of connection material for the seat</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeatedSpecification.GetIsAngleSeatStiffened">
             <summary>Specifies wheter an angle seat is stiffened</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeatedSpecification.GetSeatAttachmentMethod">
             <summary>Specifies how the seat is connected to the supporting member</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeatedSpecification.GetHasRestrainingAngle">
             <summary>Specifies whether a restraining angle is used in the connection.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeatedSpecification.GetIsRestrainingAngleOnWeb">
             <summary>
             True if the restraining angle is attached to the web of the supporting material.
             False when the restraining angle is attached to the flange of the supporting material.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeatedSpecification.GetEmbedLocation">
             <summary>
             Specifies the location of an embed plate when the framing situation calls for one.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeatedSpecification.GetWashersAllowedOnShoeSlots">
             <summary>
             Specifies whether washers are allowed on joist shoe slots.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeatedSpecification.GetIsJoistBottomChordExtended">
             <summary>
             Specifies whether the bottom chord of a joist is extended to the supporting member
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeatedSpecification.GetJoistBottomChordRestraint">
             <summary>The type of joist bottom chord restraint material.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeatedSpecification.GetJoistBottomChordPlateRestraintErectionHoles">
             <summary>
             Specifies whether erection holes are used on joist bottom chord plate restraints
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeatedSpecification.GetAutoGrade">
             <summary>
             If true, the system determines the seat grade.
             If false, the value specified in the Grade property will be used.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeatedSpecification.GetGrade">
             <summary>
             The grade to set on the seat material for this connection.
             </summary>
             <remarks>Setting this fill flip AutoGrade to false</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeatedSpecification.GetTopChordEmbed">
             <summary>The embed plate used for this bearing connection</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeatedSpecification.GetBottomChordEmbed">
             <summary>The embed plate used for this bearing connection</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SeatedSpecification.SeatMaterial">
             <summary>The type of connection material for the seat</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SeatedSpecification.IsAngleSeatStiffened">
             <summary>Specifies wheter an angle seat is stiffened</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SeatedSpecification.SeatAttachmentMethod">
             <summary>Specifies how the seat is connected to the supporting member</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SeatedSpecification.HasRestrainingAngle">
             <summary>Specifies whether a restraining angle is used in the connection.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SeatedSpecification.IsRestrainingAngleOnWeb">
             <summary>
             True if the restraining angle is attached to the web of the supporting material.
             False when the restraining angle is attached to the flange of the supporting material.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SeatedSpecification.EmbedLocation">
             <summary>
             Specifies the location of an embed plate when the framing situation calls for one.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SeatedSpecification.WashersAllowedOnShoeSlots">
             <summary>
             Specifies whether washers are allowed on joist shoe slots.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SeatedSpecification.IsJoistBottomChordExtended">
             <summary>
             Specifies whether the bottom chord of a joist is extended to the supporting member
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SeatedSpecification.JoistBottomChordRestraint">
             <summary>The type of joist bottom chord restraint material.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SeatedSpecification.JoistBottomChordPlateRestraintErectionHoles">
             <summary>
             Specifies whether erection holes are used on joist bottom chord plate restraints
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SeatedSpecification.IsAutoGrade">
             <summary>
             If true, the system determines the seat grade.
             If false, the value specified in the Grade property will be used.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SeatedSpecification.Grade">
             <summary>
             The grade to set on the seat material for this connection.
             </summary>
             <remarks>Setting this fill flip AutoGrade to false</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SeatedSpecification.TopChordEmbed">
             <summary>The embed plate used for this bearing connection</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SeatedSpecification.BottomChordEmbed">
             <summary>The embed plate used for this bearing connection</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.BentPlateEndList.swigCMemOwn">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlateEndList.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlateEndList.Dispose(System.Boolean)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.BentPlateEndList.BentPlateEndListEnumerator">
             Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
             whenever the collection is modified. This has been done for changes in the size of the
             collection but not when one of the elements of the collection is modified as it is a bit
             tricky to detect unmanaged code that modifies the collection under our feet.
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlateEndList.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlateEndList.#ctor(DesignData.SDS2.Model.BentPlateEndList)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlateEndList.#ctor(System.Int32)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.StairConnectionAttachmentBolted">
             <summary>Bolted StairConnection attachment</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionAttachmentBolted.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionAttachmentBolted.getCPtr(DesignData.SDS2.Model.StairConnectionAttachmentBolted)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionAttachmentBolted.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionAttachmentBolted.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionAttachmentBolted.GetIsAutoBoltType">
             <summary>
             Specifies if the bolt type for the bolts involved in the connection
             should use the default bolt type defined in setup.
             </summary>
             <remarks>
             Due to how the underlying Python data is stored, assigning BoltType will always turn off IsAutoBoltType.
             </remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionAttachmentBolted.GetBoltType">
             <summary>
             Specifies the bolt type for the bolts involved in the connection.
             </summary>
             <remarks>
             Due to how the underlying Python data is stored, assigning BoltType will always turn off IsAutoBoltType.
             </remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionAttachmentBolted.GetBoltDiameter">
             <summary>Bolt diameter for the hole group</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for diameters less than or equal to 0.0.</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionAttachmentBolted.GetHoleType">
             <summary>Type of holes for the hole group </summary> 
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionAttachmentBolted.GetSlotRotation">
             <summary>Slot rotation, in radians, of the hole group</summary> 
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionAttachmentBolted.GetRows">
             <summary>Number of rows for the hole group</summary> 
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionAttachmentBolted.GetStringerEdgeToFirstHole">
             <summary>Distance from the stringer edge to the first hole</summary>
             <remarks>This is a vertical distance for vertical connections and a horizontal distance for floor clips.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionAttachmentBolted.GetRowSpacing">
             <summary>Distance between rows of the hole group</summary> 
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionAttachmentBolted.GetColumns">
             <summary>Number of columns in the hole group</summary> 
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionAttachmentBolted.GetGageOutstandingLeg">
             <summary>Distance from the connection material edge, the heel for clip angles, to the first hole.</summary>
             <remarks>For shear plates this is the horizontal to first hole distance.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionAttachmentBolted.GetColumnSpacing">
             <summary>Distance between columns of the hole group</summary> 
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionAttachmentBolted.IsAutoBoltType">
             <summary>
             Specifies if the bolt type for the bolts involved in the connection
             should use the default bolt type defined in setup.
             </summary>
             <remarks>
             Due to how the underlying Python data is stored, assigning BoltType will always turn off IsAutoBoltType.
             </remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionAttachmentBolted.BoltType">
             <summary>
             Specifies the bolt type for the bolts involved in the connection.
             </summary>
             <remarks>
             Due to how the underlying Python data is stored, assigning BoltType will always turn off IsAutoBoltType.
             </remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionAttachmentBolted.BoltDiameter">
             <summary>Bolt diameter for the hole group</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for diameters less than or equal to 0.0.</exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionAttachmentBolted.HoleType">
             <summary>Type of holes for the hole group </summary> 
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionAttachmentBolted.SlotRotation">
             <summary>Slot rotation, in radians, of the hole group</summary> 
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionAttachmentBolted.Rows">
             <summary>Number of rows for the hole group</summary> 
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionAttachmentBolted.StringerEdgeToFirstHole">
             <summary>Distance from the stringer edge to the first hole</summary>
             <remarks>This is a vertical distance for vertical connections and a horizontal distance for floor clips.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionAttachmentBolted.RowSpacing">
             <summary>Distance between rows of the hole group</summary> 
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionAttachmentBolted.Columns">
             <summary>Number of columns in the hole group</summary> 
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionAttachmentBolted.GageOutstandingLeg">
             <summary>Distance from the connection material edge, the heel for clip angles, to the first hole.</summary>
             <remarks>For shear plates this is the horizontal to first hole distance.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionAttachmentBolted.ColumnSpacing">
             <summary>Distance between columns of the hole group</summary> 
            </member>
        <member name="T:DesignData.SDS2.Model.LockableBasePlateWeldOuter">
             <summary>Lockable value for BasePlateWeldOuter</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBasePlateWeldOuter.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBasePlateWeldOuter.getCPtr(DesignData.SDS2.Model.LockableBasePlateWeldOuter)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBasePlateWeldOuter.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBasePlateWeldOuter.#ctor">
                  
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBasePlateWeldOuter.GetValue">
             <summary>The underlying value</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBasePlateWeldOuter.#ctor(DesignData.SDS2.Model.BasePlateWeldOuter)">
             <summary>Create a locked ViaMemberEdit LockableBasePlateWeldOuter from a BasePlateWeldOuter</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBasePlateWeldOuter.op_Implicit(DesignData.SDS2.Model.BasePlateWeldOuter)~DesignData.SDS2.Model.LockableBasePlateWeldOuter">
             <summary>Implicit conversion using the BasePlateWeldOuter constructor</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBasePlateWeldOuter.op_Implicit(DesignData.SDS2.Model.LockableBasePlateWeldOuter)~DesignData.SDS2.Model.BasePlateWeldOuter">
             <summary>Implicit conversion to value type</summary>
            </member>
        <member name="P:DesignData.SDS2.Model.LockableBasePlateWeldOuter.Value">
             <summary>The underlying value</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.Clevis">
             <summary>A steel clevis.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Clevis.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Clevis.getCPtr(DesignData.SDS2.Model.Clevis)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Clevis.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Clevis.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Clevis.#ctor(DesignData.SDS2.Setup.ClevisShape)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Clevis.GetGrip">
             <summary>The distance between the arms of the clevis at the pin.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Clevis.GetPinDiameter">
             <summary>Diameter of the pin.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Clevis.GetRodHoleDiameter">
             <summary>Diameter of the rod hole.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Clevis.GetThreadType">
             <summary>Thread direction.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Clevis.GetPinGrade">
             <summary>Pin grade.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Clevis.GetPinType">
             <summary>Pin type.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Clevis.GetPinHeadSide">
             <summary>Pin head side.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Clevis.GetPinLength">
             <summary>Pin length.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Clevis.GetPinHeadThickness">
             <summary>Pin head thickness</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Clevis.GetPinHeadDiameter">
             <summary>Pin head diameter</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Clevis.GetGrade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Clevis.GetAvailableSteelGrades">
             <summary>A list of steel grades, valid for Clevis, which can be
             assigned to the Grade property of a Clevis</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Clevis.Grade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Clevis.Grip">
             <summary>The distance between the arms of the clevis at the pin.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Clevis.PinDiameter">
             <summary>Diameter of the pin.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Clevis.RodHoleDiameter">
             <summary>Diameter of the rod hole.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Clevis.ThreadType">
             <summary>Thread direction.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Clevis.PinGrade">
             <summary>Pin grade.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Clevis.PinType">
             <summary>Pin type.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Clevis.PinHeadSide">
             <summary>Pin head side.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Clevis.PinLength">
             <summary>Pin length.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Clevis.PinHeadThickness">
             <summary>Pin head thickness</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Clevis.PinHeadDiameter">
             <summary>Pin head diameter</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Clevis.AvailableSteelGrades">
             <summary>A list of steel grades, valid for Clevis, which can be
             assigned to the Grade property of a Clevis</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.DetailViewList.swigCMemOwn">
            
            </member>
        <member name="M:DesignData.SDS2.Model.DetailViewList.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.DetailViewList.Dispose(System.Boolean)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.DetailViewList.DetailViewListEnumerator">
             Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
             whenever the collection is modified. This has been done for changes in the size of the
             collection but not when one of the elements of the collection is modified as it is a bit
             tricky to detect unmanaged code that modifies the collection under our feet.
            </member>
        <member name="M:DesignData.SDS2.Model.DetailViewList.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.DetailViewList.#ctor(DesignData.SDS2.Model.DetailViewList)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.DetailViewList.#ctor(System.Int32)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.RollType">
             <summary>The type of roll made along the length of a material.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.RollType.None">
             <summary>No roll, this is a straight piece of material</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.RollType.Camber">
             <summary>A parabolic bend along the strong axis, annotation only no
             change to SDS2 solids.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.RollType.WeakAxis">
             <summary>A circular bend along the weak axis</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.RollType.StrongAxis">
             <summary>A circular bend along the strong axis</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.RollType.CamberSolids">
             <summary>A parabolic bend along the strong axis represented
             in solids.</summary>
             <remarks>Only valid for members, not directly on material.</remarks>
            
            </member>
        <member name="F:DesignData.SDS2.Model.RollType.CamberBoth">
             <summary>A parabolic bend along the strong axis represented
             in solids and annotated.</summary>
             <remarks>Only valid for members, not directly on material.</remarks>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ComponentList.swigCMemOwn">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ComponentList.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ComponentList.Dispose(System.Boolean)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.ComponentList.ComponentListEnumerator">
             Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
             whenever the collection is modified. This has been done for changes in the size of the
             collection but not when one of the elements of the collection is modified as it is a bit
             tricky to detect unmanaged code that modifies the collection under our feet.
            </member>
        <member name="M:DesignData.SDS2.Model.ComponentList.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ComponentList.#ctor(DesignData.SDS2.Model.ComponentList)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ComponentList.#ctor(System.Int32)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.Tube">
             <summary>A tube material</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.Tube.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Tube.getCPtr(DesignData.SDS2.Model.Tube)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Tube.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Tube.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Tube.#ctor(DesignData.SDS2.Setup.TubeShape)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Tube.GetLongLegVertical">
             <summary>Whether the longer leg of this material is point up or down.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Tube.GetGrade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Tube.GetAvailableSteelGrades">
             <summary>A list of steel grades, valid for Tube, which can be
             assigned to the Grade property of a Tube</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Tube.Grade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Tube.IsLongLegVertical">
             <summary>Whether the longer leg of this material is point up or down.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Tube.AvailableSteelGrades">
             <summary>A list of steel grades, valid for Tube, which can be
             assigned to the Grade property of a Tube</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.BeamEnd">
             <summary>Beam specific end options</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BeamEnd.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BeamEnd.getCPtr(DesignData.SDS2.Model.BeamEnd)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BeamEnd.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BeamEnd.GetUseSafetyErectionSeat">
             <summary>Whether or not to use a safety erection seat</summary>
             <remarks>If this is false, then SafetySeatLocation,
             SafetySeatGap, and SafetySeatAttachmentMethod are ignored</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BeamEnd.GetSafetySeatLocation">
             <summary>Whether the safety seat should be below or above</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BeamEnd.GetAutoSafetySeatGap">
             <summary>If true, then the system will determine SafetySeatGap,
             if false then the user/API should set it.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BeamEnd.GetSafetySeatGap">
             <summary>The gap between the safety seat and the connection</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BeamEnd.GetSafetySeatAttachmentMethod">
             <summary>The attachment method for the safety seat, to the
             supporting member</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BeamEnd.GetMomentSpecification">
             <summary>The moment specification settings for this end of this
             beam</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BeamEnd.GetMemberSetbackType">
             <summary>The type of setback on this end of the member</summary>
             <remarks>Be sure to set this before setting MemberSetbackValue</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BeamEnd.GetMemberSetbackValue">
             <summary>The value for the current member setback.  This can only be set
             if MemberSetbackType is either FieldClearance or InputMinusDimension</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidOperationException">
             Thrown if MemberSetbackType is AutomaticMinusDimension</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BeamEnd.GetMaterialSetbackType">
             <summary>The type of setback on this end of the main material</summary>
             <remarks>Be sure to set this before setting MaterialSetbackValue</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BeamEnd.GetMaterialSetbackValue">
             <summary>The value for the current member setback.  This can only be set
             if MaterialSetbackType is either FieldClearance or InputMinusDimension</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidOperationException">
             Thrown if MaterialSetbackType is AutomaticMinusDimension</exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BeamEnd.MemberSetbackType">
             <summary>The type of setback on this end of the member</summary>
             <remarks>Be sure to set this before setting MemberSetbackValue</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BeamEnd.MemberSetbackValue">
             <summary>The value for the current member setback.  This can only be set
             if MemberSetbackType is either FieldClearance or InputMinusDimension</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidOperationException">
             Thrown if MemberSetbackType is AutomaticMinusDimension</exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BeamEnd.MaterialSetbackType">
             <summary>The type of setback on this end of the main material</summary>
             <remarks>Be sure to set this before setting MaterialSetbackValue</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BeamEnd.MaterialSetbackValue">
             <summary>The value for the current member setback.  This can only be set
             if MaterialSetbackType is either FieldClearance or InputMinusDimension</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidOperationException">
             Thrown if MaterialSetbackType is AutomaticMinusDimension</exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BeamEnd.UseSafetyErectionSeat">
             <summary>Whether or not to use a safety erection seat</summary>
             <remarks>If this is false, then SafetySeatLocation,
             SafetySeatGap, and SafetySeatAttachmentMethod are ignored</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BeamEnd.SafetySeatLocation">
             <summary>Whether the safety seat should be below or above</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BeamEnd.IsAutoSafetySeatGap">
             <summary>If true, then the system will determine SafetySeatGap,
             if false then the user/API should set it.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BeamEnd.SafetySeatGap">
             <summary>The gap between the safety seat and the connection</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BeamEnd.SafetySeatAttachmentMethod">
             <summary>The attachment method for the safety seat, to the
             supporting member</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BeamEnd.MomentSpecification">
             <summary>The moment specification settings for this end of this
             beam</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.RoundBar">
             <summary>A round steel bar.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundBar.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundBar.getCPtr(DesignData.SDS2.Model.RoundBar)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundBar.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundBar.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundBar.#ctor(DesignData.SDS2.Setup.RoundBarShape)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundBar.GetOrderLength">
             <summary>The length of the plate.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundBar.GetWorkpointLength">
             <summary>The workpoint length of the plate.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundBar.GetCentered">
             TODO
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundBar.GetAngleOfTwist">
             <summary>The angle (in radians) of twist from one end of the
             material to the other.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundBar.GetRollType">
             <summary>The type of roll on this material, or None if there is
             no roll on this material.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundBar.GetMidOrdinateRoll">
             <summary>The measurement from the center of the curved member to
             point halfway between the left and right end.  For Camber, this
             is the only valid value to set.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundBar.GetIncludedAngleRoll">
             <summary>The included angle of the rolling operation.  This can be set
             for any operation besides a camber roll</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundBar.GetRollingRadius">
             <summary>The rolling radius for any roll operation besides a camber roll.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundBar.GetSpiralRollOffset">
             <summary>The positive or negative distance that the right end
             will be offset from the right work point in the member's Z axis.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundBar.GetShape">
             <summary>
             The Shape for this round bar, must be a RoundbarShape.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundBar.GetThicknessReferencePoint">
             <summary>The depth-wise reference plane of the bar.  Changing this shifts the
             bar without changing the work points of the bar.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundBar.GetGrade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundBar.GetAvailableSteelGrades">
             <summary>A list of steel grades, valid for RoundBars, which can be
             assigned to the Grade property of a RoundBar</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RoundBar.Grade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RoundBar.OrderLength">
             <summary>The length of the plate.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RoundBar.WorkpointLength">
             <summary>The workpoint length of the plate.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RoundBar.IsCentered">
             </member>
        <member name="P:DesignData.SDS2.Model.RoundBar.ThicknessReferencePoint">
             <summary>The depth-wise reference plane of the bar.  Changing this shifts the
             bar without changing the work points of the bar.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RoundBar.AngleOfTwist">
             <summary>The angle (in radians) of twist from one end of the
             material to the other.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RoundBar.RollType">
             <summary>The type of roll on this material, or None if there is
             no roll on this material.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RoundBar.MidOrdinateRoll">
             <summary>The measurement from the center of the curved member to
             point halfway between the left and right end.  For Camber, this
             is the only valid value to set.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RoundBar.IncludedAngleRoll">
             <summary>The included angle of the rolling operation.  This can be set
             for any operation besides a camber roll</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RoundBar.RollingRadius">
             <summary>The rolling radius for any roll operation besides a camber roll.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RoundBar.SpiralRollOffset">
             <summary>The positive or negative distance that the right end
             will be offset from the right work point in the member's Z axis.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RoundBar.Shape">
             <summary>
             The Shape for this round bar, must be a RoundbarShape.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RoundBar.Ends">
            <summary>Information specific to the ends of the material.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RoundBar.AvailableSteelGrades">
             <summary>A list of steel grades, valid for RoundBars, which can be
             assigned to the Grade property of a RoundBar</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundBar.GetLayout">
             <summary>Get the layout used to generate this
             RolledShapeMaterial. This value may be null. Mutations to the
             returned value do not change the material; SetLayout() must be
             used to modify the layout on the material.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundBar.SetLayout(DesignData.SDS2.Primitives.Layout3D)">
             <summary>Set the layout used to generate this material.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundBar.GetEnds">
             <summary>Information specific to the ends of the material.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.MemberEndList.swigCMemOwn">
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndList.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndList.Dispose(System.Boolean)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.MemberEndList.MemberEndListEnumerator">
             Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
             whenever the collection is modified. This has been done for changes in the size of the
             collection but not when one of the elements of the collection is modified as it is a bit
             tricky to detect unmanaged code that modifies the collection under our feet.
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndList.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndList.#ctor(DesignData.SDS2.Model.MemberEndList)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndList.#ctor(System.Int32)">
            
            </member>
        <member name="F:DesignData.SDS2.Model.HoleList.swigCMemOwn">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleList.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleList.Dispose(System.Boolean)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.HoleList.HoleListEnumerator">
             Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
             whenever the collection is modified. This has been done for changes in the size of the
             collection but not when one of the elements of the collection is modified as it is a bit
             tricky to detect unmanaged code that modifies the collection under our feet.
            </member>
        <member name="M:DesignData.SDS2.Model.HoleList.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleList.#ctor(DesignData.SDS2.Model.HoleList)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleList.#ctor(System.Int32)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.VerticalBrace">
             <summary>
             A builtin steel vertical brace member.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VerticalBrace.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.VerticalBrace.getCPtr(DesignData.SDS2.Model.VerticalBrace)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.VerticalBrace.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.VerticalBrace.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.VerticalBrace.GetSideOfGusset">
             <summary>Returns the side of gusset the brace is on</summary>
             <value>For single material braces, side of gusset as ToeIO.  For doubled
                    materials, use Configuration</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VerticalBrace.GetConfiguration">
             <summary>Returns the configuration of doubled material brace.</summary>
             <value>For doubled material braces, side of gusset as ToeIO.  For single
                    materials, use SideOfGusset</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VerticalBrace.GetDoubleMaterial">
             <summary>Determines if the brace's material is doubled.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VerticalBrace.GetAngleLegUp">
             <summary>Determines the orientation of the angle leg</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VerticalBrace.GetLongLeg">
             <summary>Long leg value of brace.</summary>
             <value>Outstanding bolts the short leg of the angle brace to the gusset plate,
                    with the long leg outstanding.
                    ToGusset bolts the long leg of the angle vertical brace to the
                    gusset plate.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VerticalBrace.GetLocateOnNeutralAxis">
             <summary>The behavior of the neutral axis parameter.  Only valid for angle material.</summary>
             <value>Automatic applies the choice made to Fabricator Setup &gt;
                    Member Detailing Settings &gt; Horizontal Braces.
                    Yes causes the angle material's X-X asix or Y-Y axis to intersect with the
                    member line of the brace.
                    No instructs connection design to align the gage line of the angle material
                    with the brace's member line.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VerticalBrace.GetStaggerBolts">
             <summary>Sets if connection design staggers the bolts that connect the angle
                      to the gusset.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VerticalBrace.GetOneGageLine">
             <summary>Gage line setting.  Only applies to angle materials.</summary>
             <value>When true, creates a single column of bolts to connect to the gusset.
                    when false, creates two columns of bolts to connect to the gusset.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VerticalBrace.GetSeismic">
             <summary>Sets if the systemcreates seismic connections on the brace.</summary>
             <value>Automatic instructs the system to apply the choice made in
                    Job Setup &gt; Design Settings &gt; Seismic vertical brace gusset design.
                    Yes specifies that the system create a seismic connection on both
                    ends of the brace.
                    No configures the system to create a non-seismic connection.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VerticalBrace.GetAutoMinGussetThickness">
             <summary>Flag to determine if user specified minimum gusset thickness will be used.</summary>
             <value>API value should be opposite of the internal value, this is to keep consistency with
             user input. Internal: 0=checked, 1=unchecked. API: false=unchecked, true=checked.</value>
            
            
            </member>
        <member name="M:DesignData.SDS2.Model.VerticalBrace.GetMinGussetThickness">
             <summary>User specified minimum gusset thickness.</summary>
             <value>Double in the range of 0-1200. Specifies the minimum thickness a gusset will be allowed
             to use.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VerticalBrace.GetBreakApart">
             <summary>Used to determine if connection material not welded to the member main
             material will be broken apart from the member</summary>
             <value>true = process and create soilds will break apart member
             false = process and create solids will combine member material</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VerticalBrace.GetEnds">
             <summary>
             Get both ends in a single list, left then right.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VerticalBrace.IsAutoStitchPlateGap">
             </member>
        <member name="P:DesignData.SDS2.Model.VerticalBrace.StitchPlateGap">
             </member>
        <member name="P:DesignData.SDS2.Model.VerticalBrace.IsAutoMaxStitchPlateSpacing">
             </member>
        <member name="P:DesignData.SDS2.Model.VerticalBrace.MaxStitchPlateSpacing">
             </member>
        <member name="P:DesignData.SDS2.Model.VerticalBrace.IsAutoNumberOfStitchPlates">
             </member>
        <member name="P:DesignData.SDS2.Model.VerticalBrace.NumberOfStitchPlates">
             </member>
        <member name="P:DesignData.SDS2.Model.VerticalBrace.SideOfGusset">
             <summary>Returns the side of gusset the brace is on</summary>
             <value>For single material braces, side of gusset as ToeIO.  For doubled
                    materials, use Configuration</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VerticalBrace.Configuration">
             <summary>Returns the configuration of doubled material brace.</summary>
             <value>For doubled material braces, side of gusset as ToeIO.  For single
                    materials, use SideOfGusset</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VerticalBrace.IsDoubleMaterial">
             <summary>Determines if the brace's material is doubled.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VerticalBrace.IsAngleLegUp">
             <summary>Determines the orientation of the angle leg</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VerticalBrace.LongLeg">
             <summary>Long leg value of brace.</summary>
             <value>Outstanding bolts the short leg of the angle brace to the gusset plate,
                    with the long leg outstanding.
                    ToGusset bolts the long leg of the angle vertical brace to the
                    gusset plate.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VerticalBrace.LocateOnNeutralAxis">
             <summary>The behavior of the neutral axis parameter.  Only valid for angle material.</summary>
             <value>Automatic applies the choice made to Fabricator Setup &gt;
                    Member Detailing Settings &gt; Horizontal Braces.
                    Yes causes the angle material's X-X asix or Y-Y axis to intersect with the
                    member line of the brace.
                    No instructs connection design to align the gage line of the angle material
                    with the brace's member line.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VerticalBrace.StaggerBolts">
             <summary>Sets if connection design staggers the bolts that connect the angle
                      to the gusset.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VerticalBrace.OneGageLine">
             <summary>Gage line setting.  Only applies to angle materials.</summary>
             <value>When true, creates a single column of bolts to connect to the gusset.
                    when false, creates two columns of bolts to connect to the gusset.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VerticalBrace.Seismic">
             <summary>Sets if the systemcreates seismic connections on the brace.</summary>
             <value>Automatic instructs the system to apply the choice made in
                    Job Setup &gt; Design Settings &gt; Seismic vertical brace gusset design.
                    Yes specifies that the system create a seismic connection on both
                    ends of the brace.
                    No configures the system to create a non-seismic connection.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VerticalBrace.IsAutoMinGussetThickness">
             <summary>Flag to determine if user specified minimum gusset thickness will be used.</summary>
             <value>API value should be opposite of the internal value, this is to keep consistency with
             user input. Internal: 0=checked, 1=unchecked. API: false=unchecked, true=checked.</value>
            
            
            </member>
        <member name="P:DesignData.SDS2.Model.VerticalBrace.MinGussetThickness">
             <summary>User specified minimum gusset thickness.</summary>
             <value>Double in the range of 0-1200. Specifies the minimum thickness a gusset will be allowed
             to use.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VerticalBrace.IsBreakApart">
             <summary>Used to determine if connection material not welded to the member main
             material will be broken apart from the member</summary>
             <value>true = process and create soilds will break apart member
             false = process and create solids will combine member material</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VerticalBrace.Ends">
             <summary>
             Get both ends in a single list, left then right.
             </summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.ClipPlate">
             <summary>Applies a single, linear cut</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipPlate.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipPlate.getCPtr(DesignData.SDS2.Model.ClipPlate)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipPlate.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipPlate.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.StitchType">
             <summary>Enumerated weld stitch types</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.StitchType.NoStitch">
             <summary>A continuous weld (not a stitch weld)</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.StitchType.Independent">
             <summary>
             Other side weld is stitched independently from the arrow side stitch
             </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.StitchType.Opposite">
             <summary>
             Other side stitch weld mirrors the stitch weld on the arrow side
             </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.StitchType.Offset">
             <summary>
             Other side stitch weld is staggered with respect to the stitch
             weld on the arrow side
             </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.DeckingEndList.swigCMemOwn">
            
            </member>
        <member name="M:DesignData.SDS2.Model.DeckingEndList.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.DeckingEndList.Dispose(System.Boolean)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.DeckingEndList.DeckingEndListEnumerator">
             Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
             whenever the collection is modified. This has been done for changes in the size of the
             collection but not when one of the elements of the collection is modified as it is a bit
             tricky to detect unmanaged code that modifies the collection under our feet.
            </member>
        <member name="M:DesignData.SDS2.Model.DeckingEndList.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.DeckingEndList.#ctor(DesignData.SDS2.Model.DeckingEndList)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.DeckingEndList.#ctor(System.Int32)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.ColumnWebDoublerSide">
             <summary>The location of a doubler plate on the web of a column.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ColumnWebDoublerSide.Automatic">
             <summary>Decide based on information in setup.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ColumnWebDoublerSide.NearSide">
             <summary>Place it on the near side of the column</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ColumnWebDoublerSide.FarSide">
             <summary>Place it on the far side of the column</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ColumnWebDoublerSide.Both">
             <summary>Place it on both sides of the column web</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.LockableDictionary.swigCMemOwn">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableDictionary.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableDictionary.Dispose(System.Boolean)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.LockableDictionary.LockableDictionaryEnumerator">
             Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
             whenever the collection is modified. This has been done for changes in the size of the
             collection but not when one of the elements of the collection is modified as it is a bit
             tricky to detect unmanaged code that modifies the collection under our feet.
            </member>
        <member name="M:DesignData.SDS2.Model.LockableDictionary.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableDictionary.#ctor(DesignData.SDS2.Model.LockableDictionary)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.GratingTread">
             <summary>
             GratingTread is material of different sizes of steel bar. It is considered
             to be a single material because it may be purchased from manufactures
             as a single piece of material.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GratingTread.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.GratingTread.getCPtr(DesignData.SDS2.Model.GratingTread)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.GratingTread.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.GratingTread.GetOrderLength">
             <summary>
             The actual length along the longitudinal axis, i.e. X material axis.
             Changing this distance adjusts the number of cross bars while maintaining
             the thickness and spacing when the solids are regenerated.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GratingTread.GetNosingWidth">
             <summary>
             The distance measured along the material Y axis from the workline
             edge of the grating tread to the nearest edge of the nearest bearing bar.
             Changing the number of bearing bars will impact the grating tread width.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GratingTread.GetWidth">
             <summary>
             The width of of the material along the material Y axis based on the following
             calculation: (BearingBarCount - 1) * BearingBarSpacing + BearingBarThickness + NosingWidth
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GratingTread.GetBearingBarCount">
             <summary>
             The number of bars parallel with the grating tread's X axis. Changing
             the number of bearing bars will impact the grating tread width.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GratingTread.GetBearingBarDepth">
             <summary>
             Bearing bar depth measured perpendicular to the workline of the grating tread. The
             bottom surface of the grating tread will be in the same plane as the workline. All
             bearing bars and end bands will have this depth.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GratingTread.GetBearingBarThickness">
             <summary>
             Bearing bar thickness for all bearing bars.  Changing the thickness
             will impact the grating tread width.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GratingTread.GetBearingBarSpacing">
             <summary>
             The distance between any one bearing bar and the next bearing bar
             plus the thickness of the one bearing  bar.  Changing the spacing
             will impact the grating tread width.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GratingTread.GetCrossBarCount">
             <summary>
             The number of bars parallel to the grating tread's Y axis, not including
             the end bands, based on the following calculation: OrderLength / CrossBarSpacing
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GratingTread.GetCrossBarDepth">
             <summary>
             Cross bar depth measured perpendicular to the workline of the grating tread
             between the top and bottom edges of any one cross bar.  In other words,
             this is the Z axis dimension of the cross bar. All cross bars have this
             depth.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GratingTread.GetCrossBarThickness">
             <summary>
             Cross bar thickness for all cross bars.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GratingTread.GetCrossBarSpacing">
             <summary>
             The distance between the center of any one cross bar to the center of
             the next cross bar plus the thickness of the one cross bar.  The
             generated material length does not automatically change when
             spacing changes.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GratingTread.GetEndPlateThickness">
             <summary>
             Thickness of the end plates.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GratingTread.GetEndPlateWidth">
             <summary>
             The distance along the material Z axis from the workline
             to the bottom edge of the end plate.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GratingTread.GetEndPlateBoltDiameter">
             <summary>
             The diameter of the shanks of the bolts to be inserted into the end plate holes.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GratingTread.GetEndPlateVerticalToFirstHole">
             <summary>
             The distance along the material Z axis from the workline to the center of
             the end plate holes.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GratingTread.GetEndPlateHorizontalToFirstHole">
             <summary>
             The distance along the material Y axis from the workline to the center of
             the end plate holes.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GratingTread.GetEndPlateHoleSpacing">
             <summary>
             The distance along the material Y axis between the centers of
             the end plate holes.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GratingTread.GetGrade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GratingTread.GetAvailableSteelGrades">
             <summary>Available steel grade list for grating tread materials in the active job</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GratingTread.Grade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GratingTread.OrderLength">
             <summary>
             The actual length along the longitudinal axis, i.e. X material axis.
             Changing this distance adjusts the number of cross bars while maintaining
             the thickness and spacing when the solids are regenerated.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GratingTread.Width">
             <summary>
             The width of of the material along the material Y axis based on the following
             calculation: (BearingBarCount - 1) * BearingBarSpacing + BearingBarThickness + NosingWidth
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GratingTread.NosingWidth">
             <summary>
             The distance measured along the material Y axis from the workline
             edge of the grating tread to the nearest edge of the nearest bearing bar.
             Changing the number of bearing bars will impact the grating tread width.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GratingTread.BearingBarCount">
             <summary>
             The number of bars parallel with the grating tread's X axis. Changing
             the number of bearing bars will impact the grating tread width.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GratingTread.BearingBarDepth">
             <summary>
             Bearing bar depth measured perpendicular to the workline of the grating tread. The
             bottom surface of the grating tread will be in the same plane as the workline. All
             bearing bars and end bands will have this depth.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GratingTread.BearingBarThickness">
             <summary>
             Bearing bar thickness for all bearing bars.  Changing the thickness
             will impact the grating tread width.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GratingTread.BearingBarSpacing">
             <summary>
             The distance between any one bearing bar and the next bearing bar
             plus the thickness of the one bearing  bar.  Changing the spacing
             will impact the grating tread width.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GratingTread.CrossBarCount">
             <summary>
             The number of bars parallel to the grating tread's Y axis, not including
             the end bands, based on the following calculation: OrderLength / CrossBarSpacing
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GratingTread.CrossBarDepth">
             <summary>
             Cross bar depth measured perpendicular to the workline of the grating tread
             between the top and bottom edges of any one cross bar.  In other words,
             this is the Z axis dimension of the cross bar. All cross bars have this
             depth.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GratingTread.CrossBarThickness">
             <summary>
             Cross bar thickness for all cross bars.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GratingTread.CrossBarSpacing">
             <summary>
             The distance between the center of any one cross bar to the center of
             the next cross bar plus the thickness of the one cross bar.  The
             generated material length does not automatically change when
             spacing changes.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GratingTread.EndPlateThickness">
             <summary>
             Thickness of the end plates.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GratingTread.EndPlateWidth">
             <summary>
             The distance along the material Z axis from the workline
             to the bottom edge of the end plate.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GratingTread.EndPlateBoltDiameter">
             <summary>
             The diameter of the shanks of the bolts to be inserted into the end plate holes.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GratingTread.EndPlateVerticalToFirstHole">
             <summary>
             The distance along the material Z axis from the workline to the center of
             the end plate holes.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GratingTread.EndPlateHorizontalToFirstHole">
             <summary>
             The distance along the material Y axis from the workline to the center of
             the end plate holes.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GratingTread.EndPlateHoleSpacing">
             <summary>
             The distance along the material Y axis between the centers of
             the end plate holes.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GratingTread.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.BraceFillLocation">
              
            </member>
        <member name="F:DesignData.SDS2.Model.BraceFillLocation.OnBraceWeb">
                  
            </member>
        <member name="F:DesignData.SDS2.Model.BraceFillLocation.OnGussetPlate">
                  
            </member>
        <member name="T:DesignData.SDS2.Model.EndPlateSafetyConnection">
             <summary>The end plate safety connections that SDS2 can handle.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.EndPlateSafetyConnection.NonSafety">
             <summary>specifies that the two end plates be designed to share
             all bolts.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.EndPlateSafetyConnection.SafetyOffset">
             <summary>instructs the system to vertically offset the end plates
             with respect to one another so that one row of bolts is shared
             with the beam and column but not shared by the end plate of the
             opposing beam.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.EndPlateSafetyConnection.SafetyNotch">
             <summary>instructs the system to create deeper end plates
             to accommodate an extra row of bolts and to perform a "Cope" on
             each plate so that each bolt in the top row of bolts is shared by
             the column and a different beam. The cut to the plate is on the
             far side of the beam with a left end end plate. The cut is on the
             near side of the other beam, which will have the end plate on its
             right end.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.EndPlateSafetyConnection.Automatic">
             <summary>specifies that the system apply the choice made
             to Fabricator Setup &gt; Standard Fabricator Connections &gt; End Plate
             Setup &gt; "End plate safety connection."</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.Grating">
             <summary>
             Grating is material of different sizes of steel bar. It is considered
             to be a single material because it may be purchased from manufactures
             as a single piece of material.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Grating.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Grating.getCPtr(DesignData.SDS2.Model.Grating)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Grating.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Grating.GetOrderLength">
             <summary>
             The actual length along the longitudinal axis, i.e. X material axis.
             Changing this distance adjusts the number of cross bars while maintaining
             the thickness and spacing when the solids are regenerated.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Grating.GetWidth">
             <summary>
             The width of of the material along the material Y axis based on the following
             calculation: (BearingBarCount - 1) * BearingBarSpacing + BearingBarThickness
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Grating.GetBearingBarCount">
             <summary>
             The number of bars parallel with the grating's X axis. Changing
             the number of bearing bars will impact the grating width.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Grating.GetBearingBarDepth">
             <summary>
             Bearing bar depth measured perpendicular to the workline of the grating. The
             bottom surface of the grating will be in the same plane as the workline. All
             bearing bars and end bands will have this depth.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Grating.GetBearingBarThickness">
             <summary>
             Bearing bar thickness for all bearing bars.  Changing the thickness
             will impact the grating width.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Grating.GetBearingBarSpacing">
             <summary>
             The distance between any one bearing bar and the next bearing bar
             plus the thickness of the one bearing  bar.  Changing the spacing
             will impact the grating width.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Grating.GetCrossBarCount">
             <summary>
             The number of bars parallel to the grating's Y axis, not including
             the end bands, based on the following calculation: OrderLength / CrossBarSpacing
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Grating.GetCrossBarDepth">
             <summary>
             Cross bar depth measured perpendicular to the workline of the grating
             between the top and bottom edges of any one cross bar.  In other words,
             this is the Z axis dimension of the cross bar. All cross bars have this
             depth.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Grating.GetCrossBarThickness">
             <summary>
             Cross bar thickness for all cross bars.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Grating.GetCrossBarSpacing">
             <summary>
             The distance between the center of any one cross bar to the center of
             the next cross bar plus the thickness of the one cross bar.  The
             generated material length does not automatically change when
             spacing changes.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Grating.GetEnds">
             <summary>
             The left and right end information of the grating material.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Grating.GetGrade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Grating.GetAvailableSteelGrades">
             <summary>Available steel grade list for grating materials in the active job</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Grating.Grade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Grating.OrderLength">
             <summary>
             The actual length along the longitudinal axis, i.e. X material axis.
             Changing this distance adjusts the number of cross bars while maintaining
             the thickness and spacing when the solids are regenerated.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Grating.Width">
             <summary>
             The width of of the material along the material Y axis based on the following
             calculation: (BearingBarCount - 1) * BearingBarSpacing + BearingBarThickness
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Grating.BearingBarCount">
             <summary>
             The number of bars parallel with the grating's X axis. Changing
             the number of bearing bars will impact the grating width.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Grating.BearingBarDepth">
             <summary>
             Bearing bar depth measured perpendicular to the workline of the grating. The
             bottom surface of the grating will be in the same plane as the workline. All
             bearing bars and end bands will have this depth.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Grating.BearingBarThickness">
             <summary>
             Bearing bar thickness for all bearing bars.  Changing the thickness
             will impact the grating width.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Grating.BearingBarSpacing">
             <summary>
             The distance between any one bearing bar and the next bearing bar
             plus the thickness of the one bearing  bar.  Changing the spacing
             will impact the grating width.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Grating.CrossBarCount">
             <summary>
             The number of bars parallel to the grating's Y axis, not including
             the end bands, based on the following calculation: OrderLength / CrossBarSpacing
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Grating.CrossBarDepth">
             <summary>
             Cross bar depth measured perpendicular to the workline of the grating
             between the top and bottom edges of any one cross bar.  In other words,
             this is the Z axis dimension of the cross bar. All cross bars have this
             depth.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Grating.CrossBarThickness">
             <summary>
             Cross bar thickness for all cross bars.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Grating.CrossBarSpacing">
             <summary>
             The distance between the center of any one cross bar to the center of
             the next cross bar plus the thickness of the one cross bar.  The
             generated material length does not automatically change when
             spacing changes.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Grating.Ends">
             <summary>
             The left and right end information of the grating material.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Grating.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.ConnectionSpecificationEndLeftRightBoth">
             <summary>
             When a value space is restricted to left end, right end, or both ends.
             </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ConnectionSpecificationEndLeftRightBoth.Right">
             <summary>Right end</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ConnectionSpecificationEndLeftRightBoth.Left">
             <summary>Left end</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ConnectionSpecificationEndLeftRightBoth.Both">
             <summary>Both ends</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.PythonMember">
             <summary>A "custom" member implemented in python.  Access properties
             on these types through the Dynamic property on this object, as a
             csharp 'dynamic' type.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.PythonMember.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.PythonMember.getCPtr(DesignData.SDS2.Model.PythonMember)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.PythonMember.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.PythonMember.#ctor(System.String)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.PythonMember.GetPythonObject">
             <summary>Return the python object, should be treated as a "dynamic" type</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.PythonMember.PythonObject">
             <summary>Return the python object, should be treated as a "dynamic" type</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.RectangularPlateEnd">
             <summary>The end of a plate</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RectangularPlateEnd.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.RectangularPlateEnd.getCPtr(DesignData.SDS2.Model.RectangularPlateEnd)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.RectangularPlateEnd.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.RectangularPlateEnd.GetSetback">
             <summary>The setback from the end where the plate material starts.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RectangularPlateEnd.GetCutAngle">
             <summary>Angle to cut across the end of the plate</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RectangularPlateEnd.Setback">
             <summary>The setback from the end where the plate material starts.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RectangularPlateEnd.CutAngle">
             <summary>Angle to cut across the end of the plate</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RectangularPlateEnd.TopPlateCutOperation">
             </member>
        <member name="P:DesignData.SDS2.Model.RectangularPlateEnd.BottomPlateCutOperation">
             </member>
        <member name="T:DesignData.SDS2.Model.MemberSetbackType">
             <summary>Determines the meaning of the MemberSetbackValue on the end
             of a member.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.MemberSetbackType.FieldClearance">
             <summary> distance from the face of the designed connection to
             the face of the supporting member.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.MemberSetbackType.InputMinusDimension">
             <summary>positive or negative distance measured parallel with the
             workline of the beam from the beam's work point to the face of
             the designed connection on the end of the beam. A positive
             distance shortens the beam by that amount. A negative distance
             makes the beam longer. If the beam is sloping, the actual sloped
             minus dimension must be calculated and set.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.MemberSetbackType.AutomaticMinusDimension">
             <summary>A system-calculated distance from the beam's work point
             to the face of the designed connection on this end of the
             beam.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.MemberEndBriefList.swigCMemOwn">
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndBriefList.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndBriefList.Dispose(System.Boolean)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.MemberEndBriefList.MemberEndBriefListEnumerator">
             Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
             whenever the collection is modified. This has been done for changes in the size of the
             collection but not when one of the elements of the collection is modified as it is a bit
             tricky to detect unmanaged code that modifies the collection under our feet.
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndBriefList.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndBriefList.#ctor(DesignData.SDS2.Model.MemberEndBriefList)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndBriefList.#ctor(System.Int32)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.Joist">
             <summary>
             A builtin steel joist member.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Joist.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Joist.getCPtr(DesignData.SDS2.Model.Joist)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Joist.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Joist.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.LockType">
             <summary>These "lock strengths" are used by connection design and member
             edit to determine whether a LockableValue::value can be overridden or
             not.
            
             A lower enum value represents a weaker lock strength. A stronger
             lockable cannot and should not be overridden by a weaker lock.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.LockType.Unlocked">
             <summary>Unlock this value, it will be set by
             process</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.LockType.ViaDesign">
             <summary>This value is locked by the system during
             design</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.LockType.ViaUserDefined">
             <summary>This value was locked, with user input, in a user
             defined connection.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.LockType.ViaMemberEdit">
             <summary>This value was locked, with user input, specifically
             on this connection.  Not necessarily on member edit, but
             possibly through an API call.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.MemberBrief">
             <summary>
             Member data that can be rapidly accessed.  This is data
             stored in a fixed length database for each member inside the SDS2
             database.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.getCPtr(DesignData.SDS2.Model.MemberBrief)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.RefreshDatabaseTable">
             <summary>Refresh the the primary table for objects of this type.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.Get(DesignData.SDS2.Database.MemberHandle)">
             <summary>Get a MemberBrief object for the MemberHandle passed in.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetHandle">
             <summary>The database handle for this object</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetRevision">
             <summary>
             Gets the current revision structure for this member
             </summary>
             <value>
             The revision object associated with this member.
             </value>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">If the revision set is null</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetExisting">
             <summary>
             Tells you whether this member has been marked as
             pre-existing, meaning already erected, or not.
             </summary>
             <value>
             true if the member is pre-existing, false if it is a new member.
             </value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetMemberDescription">
             <summary>
             The member description.  This can be system generated (descriptions like "COLUMN")
             or it can be set by users.  It can be 19 characters or less.
             </summary>
             <value>
             A UTF-8 encoded string.
             </value>
             <remarks>
             This string maxes out at 19 characters, SDS2 will cut off any text after that.
             </remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetModelCompleteDate">
             <summary>
             Get the date when this member was set to model
             complete.  Model complete means that the member will not be
             modified anymore inside of the model.  This will be null
             if this member has not been marked model complete.
             </summary>
             <remarks>
             The date returned will always have a time code of midnight.
             The granularity on this date is just to the day.
             </remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetModelCompleteMode">
             <summary>Defines what mode model complete will operate in
             (or if it will just decide based on setup) when ModelCompleteDate is
             set to a date</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetHeldDate">
             <summary>
             Get the date when this member was set to held.  If this is null
             then the member is not held.  This hold date, if set, shows up
             on member details.
             </summary>
             <remarks>
             The date returned will always have a time code of midnight.
             The granularity on this date is just to the day.
             </remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetHeldDescription">
             <summary>
             The user description (29 characters or less) of why the held date is set.
             </summary>
             <remarks>
             This string maxes out at 29 characters, SDS2 will cut off any text after that.
             </remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetFabricationProjectedDate">
             <summary>
             The date this member is projected to complete fabrication in the shop.
             </summary>
             <remarks>
             The date returned will always have a time code of midnight.
             The granularity on this date is just to the day.
             </remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetFabricationShopDate">
             <summary>
             The date this member detail was sent to the shop (released for fabrication).
             </summary>
             <remarks>
             The date returned will always have a time code of midnight.
             The granularity on this date is just to the day.
             </remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetFabricationCompleteDate">
             <summary>
             The date this member's fabrication was completed.
             </summary>
             <remarks>
             The date returned will always have a time code of midnight.
             The granularity on this date is just to the day.
             </remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetShipDate">
             <summary>
             The date this member shipped from shop.
             </summary>
             <remarks>
             The date returned will always have a time code of midnight.
             The granularity on this date is just to the day.
             </remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetProjectedShipDate">
             <summary>
             The date this member is projected to ship from the shop.
             </summary>
             <remarks>
             The date returned will always have a time code of midnight.
             The granularity on this date is just to the day.
             </remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetReceivedOnJobSite">
             <summary>The date this member was received on the job site.</summary>
             <remarks>
             The date returned will always have a time code of midnight.
             The granularity on this date is just to the day.
             </remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetErected">
             <summary>The date this member was erected at the job site.</summary>
             <remarks>
             The date returned will always have a time code of midnight.
             The granularity on this date is just to the day.
             </remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetApproval">
             <summary>
             The approval status of this member.  See the returned union for values and meanings.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetRoute1">
             <summary>The Mult. Cutting # routing.  Assign these from the first list
             in the routing table on DesignData.SDS2.Database.Job.RoutingDefinitions.</summary>
             <remarks>The definition of this routing could change in the future</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             If the type of routing set is not correct:  You can't set a routing value
             from Route2 to Route1, for example.</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetRoute2">
             <summary>The labor code routing.    Assign these from the second list
             in the routing table on DesignData.SDS2.Database.Job.RoutingDefinitions.</summary>
             <remarks>The definition of this routing could change in the future</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             If the type of routing set is not correct:  You can't set a routing value
             from Route2 to Route1, for example.</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetRoute3">
             <summary>The job cost code routing.    Assign these from the third list
             in the routing table on DesignData.SDS2.Database.Job.RoutingDefinitions.</summary>
             <remarks>The definition of this routing could change in the future</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             If the type of routing set is not correct:  You can't set a routing value
             from Route2 to Route1, for example.</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetRoute4">
             <summary>The remarks routing.    Assign these from the fourth list
             in the routing table on DesignData.SDS2.Database.Job.RoutingDefinitions.</summary>
             <remarks>The definition of this routing could change in the future</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             If the type of routing set is not correct:  You can't set a routing value
             from Route2 to Route1, for example.</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetCategory">
             <summary>Get the category for this member.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetPiecemark">
             <summary>
             The piecemark of the member.
             </summary>
             <value>
             A UTF-8 encoded string.
             </value>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the member handle is invalid.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetGuid">
             <summary>
             The SDS2 Guid/UUID for this member.  Sometimes referred to as the
             "manufacturing guid"
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetEnds">
             <summary>
             Get both ends in a single list, left then right.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetLeft">
             <summary>
             Gets the left end of the member.  The left end is defined as follows:
             For columns:
                * The end with the lowest Z coordinate value
                * If that matches, then the lowest X coordinate
                * If those match, then the lowest Y coordinate
             For all other members:
                * The end with the lowest X coordinate value
                * If that matches, then the lowest Y coordinate
                * If those match, then the lowest Z coordinate
            
             Unless the member has its ends set to swapped, then it's the
             reverse of that.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetSequence">
             <summary>
             The fabrication sequence that this member is in.  This same sequence can
             be found under Sequences on the Database.Job object.
             </summary>
             <value>
             The JobSequence object associated with this member.
             </value>
             <see cref="M:DesignData.SDS2.Database.Job.Sequences" />
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetToGlobalCoordinates">
             <summary>Position and orientation of the member in global coordinates</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetInternalMemberType">
                  
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetShape">
             <summary>
             The Shape for the member if the member's main material
             references a shape in the material file.  For members that do not
             reference a shape in the material file, the value will be null.
             </summary>
             <remarks>If the new Shape is a different type of material then the Grade
             will be reset to the first Grade in the list for that type of material</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetNumber">
             <summary>
             Member numbers are unique identifiers, within an SDS2 job or project, for members.
             These are relied upon in many places inside of SDS2 and in generated reports.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetGroupMemberHandle">
             <summary>
             A GroupMemberHandle to a group that the member is a submember of or
             null if the member is not a member of a group.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.AllGroups">
             <summary>All the GroupMemberHandles where the member is a submember</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetCustomPropertyMapHandle">
             <summary>
             A handle to the custom properties for this member, or null if if
             member is a standalone member that has not been added to the database.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the member handle is invalid.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetSwapEnds">
             <summary>If true, then the physical left end of the member will
             be considered the right end on details.  This allows two members
             which are the same except one is rotated differently to get the
             same piecemark.</summary>
            
             <remarks>The left end is defined based
             on whether x, y, or z is less (in that order, so if x is less but
             y is greater, this is the left end) for everything but columns.
             For columhns it is z, x, y.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetGalvanized">
             <summary>
             Sets the surface finish of all submaterials to galvanized
             or duplex coating.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetGrade">
             <summary>The grade which will be applied to main material on this
             member.  Applies to all builtin steel member types (beams, columns,
             braces, etc), and many python member types.</summary>
             <remarks>This grade must be from the appropriate list for the type of shape
             currently set on this member.  So if you're setting Grade, and Shape, be sure
             to set Shape first.  When Shape is switched to a different type the Grade
             will be reset to the first in the list</remarks>
             <returns>If it's a builtin steel member, the grade is returned.
             Otherwise null</returns>
            
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidOperationException">
             Thrown when attempting to set a grade on a member type that doesn't use this flag,
             which is pretty much any member that's not a builtin steel member (Beam, Column, Braces)</exception>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Thrown when attempting to set this grade to null.</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetMarkedForProcess">
             <summary>True if this member needs to be processed before it will
             have solids.  False if it has been processed and so the solids are up
             to date with the inputs on the member.
            
             This can only be set to true.  One which is already set to true
             cannot be set to false, the flag can only be flipped off by
             processing the member.</summary>
            
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidOperationException">
             Thrown when attempting to unset this flag, e.g. set it to false.</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetMarkedForDetail">
             <summary>True if this piecemark (which this member has) needs to be
             detailed.  This flag can be flipped on or off at any time, but special
             consideration should be given to turning it off.  That could cause
             users to piecemarks with stale drawings that don't match the model.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidOperationException">
             Thrown when attempting to set this property on a standalone member.  Since
             standalone members can't have piecemarks or details attached, you can't flip
             this flag on or off</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBrief.GetMarkedForNodeMatch">
             <summary>True when this member has been shifted and so the node data
             for it is stale and must be recalculated.  False if the node data
             for this member is up to date.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.Handle">
             <summary>The database handle for this object</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.Number">
             <summary>
             Member numbers are unique identifiers, within an SDS2 job or project, for members.
             These are relied upon in many places inside of SDS2 and in generated reports.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.Revision">
             <summary>
             Gets the current revision structure for this member
             </summary>
             <value>
             The revision object associated with this member.
             </value>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">If the revision set is null</exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.IsExisting">
             <summary>
             Tells you whether this member has been marked as
             pre-existing, meaning already erected, or not.
             </summary>
             <value>
             true if the member is pre-existing, false if it is a new member.
             </value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.MemberDescription">
             <summary>
             The member description.  This can be system generated (descriptions like "COLUMN")
             or it can be set by users.  It can be 19 characters or less.
             </summary>
             <value>
             A UTF-8 encoded string.
             </value>
             <remarks>
             This string maxes out at 19 characters, SDS2 will cut off any text after that.
             </remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.ModelCompleteDate">
             <summary>
             Get the date when this member was set to model
             complete.  Model complete means that the member will not be
             modified anymore inside of the model.  This will be null
             if this member has not been marked model complete.
             </summary>
             <remarks>
             The date returned will always have a time code of midnight.
             The granularity on this date is just to the day.
             </remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.ModelCompleteMode">
             <summary>Defines what mode model complete will operate in
             (or if it will just decide based on setup) when ModelCompleteDate is
             set to a date</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.HeldDate">
             <summary>
             Get the date when this member was set to held.  If this is null
             then the member is not held.  This hold date, if set, shows up
             on member details.
             </summary>
             <remarks>
             The date returned will always have a time code of midnight.
             The granularity on this date is just to the day.
             </remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.HeldDescription">
             <summary>
             The user description (29 characters or less) of why the held date is set.
             </summary>
             <remarks>
             This string maxes out at 29 characters, SDS2 will cut off any text after that.
             </remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.FabricationProjectedDate">
             <summary>
             The date this member is projected to complete fabrication in the shop.
             </summary>
             <remarks>
             The date returned will always have a time code of midnight.
             The granularity on this date is just to the day.
             </remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.FabricationShopDate">
             <summary>
             The date this member detail was sent to the shop (released for fabrication).
             </summary>
             <remarks>
             The date returned will always have a time code of midnight.
             The granularity on this date is just to the day.
             </remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.FabricationCompleteDate">
             <summary>
             The date this member's fabrication was completed.
             </summary>
             <remarks>
             The date returned will always have a time code of midnight.
             The granularity on this date is just to the day.
             </remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.ShipDate">
             <summary>
             The date this member shipped from shop.
             </summary>
             <remarks>
             The date returned will always have a time code of midnight.
             The granularity on this date is just to the day.
             </remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.ProjectedShipDate">
             <summary>
             The date this member is projected to ship from the shop.
             </summary>
             <remarks>
             The date returned will always have a time code of midnight.
             The granularity on this date is just to the day.
             </remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.ReceivedOnJobSite">
             <summary>The date this member was received on the job site.</summary>
             <remarks>
             The date returned will always have a time code of midnight.
             The granularity on this date is just to the day.
             </remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.Erected">
             <summary>The date this member was erected at the job site.</summary>
             <remarks>
             The date returned will always have a time code of midnight.
             The granularity on this date is just to the day.
             </remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.Approval">
             <summary>
             The approval status of this member.  See the returned union for values and meanings.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.Route1">
             <summary>The Mult. Cutting # routing.  Assign these from the first list
             in the routing table on DesignData.SDS2.Database.Job.RoutingDefinitions.</summary>
             <remarks>The definition of this routing could change in the future</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             If the type of routing set is not correct:  You can't set a routing value
             from Route2 to Route1, for example.</exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.Route2">
             <summary>The labor code routing.    Assign these from the second list
             in the routing table on DesignData.SDS2.Database.Job.RoutingDefinitions.</summary>
             <remarks>The definition of this routing could change in the future</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             If the type of routing set is not correct:  You can't set a routing value
             from Route2 to Route1, for example.</exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.Route3">
             <summary>The job cost code routing.    Assign these from the third list
             in the routing table on DesignData.SDS2.Database.Job.RoutingDefinitions.</summary>
             <remarks>The definition of this routing could change in the future</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             If the type of routing set is not correct:  You can't set a routing value
             from Route2 to Route1, for example.</exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.Route4">
             <summary>The remarks routing.    Assign these from the fourth list
             in the routing table on DesignData.SDS2.Database.Job.RoutingDefinitions.</summary>
             <remarks>The definition of this routing could change in the future</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             If the type of routing set is not correct:  You can't set a routing value
             from Route2 to Route1, for example.</exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.Category">
             <summary>Get the category for this member.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.Guid">
             <summary>
             The SDS2 Guid/UUID for this member.  Sometimes referred to as the
             "manufacturing guid"
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.Ends">
             <summary>
             Get both ends in a single list, left then right.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.Left">
             <summary>
             Gets the left end of the member.  The left end is defined as follows:
             For columns:
                * The end with the lowest Z coordinate value
                * If that matches, then the lowest X coordinate
                * If those match, then the lowest Y coordinate
             For all other members:
                * The end with the lowest X coordinate value
                * If that matches, then the lowest Y coordinate
                * If those match, then the lowest Z coordinate
            
             Unless the member has its ends set to swapped, then it's the
             reverse of that.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.Right">
             </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.Sequence">
             <summary>
             The fabrication sequence that this member is in.  This same sequence can
             be found under Sequences on the Database.Job object.
             </summary>
             <value>
             The JobSequence object associated with this member.
             </value>
             <see cref="M:DesignData.SDS2.Database.Job.Sequences" />
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.Shape">
             <summary>
             The Shape for the member if the member's main material
             references a shape in the material file.  For members that do not
             reference a shape in the material file, the value will be null.
             </summary>
             <remarks>If the new Shape is a different type of material then the Grade
             will be reset to the first Grade in the list for that type of material</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.ToGlobalCoordinates">
             <summary>Position and orientation of the member in global coordinates</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.GroupMemberHandle">
             <summary>
             A GroupMemberHandle to a group that the member is a submember of or
             null if the member is not a member of a group.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.CustomPropertyMapHandle">
             <summary>
             A handle to the custom properties for this member, or null if if
             member is a standalone member that has not been added to the database.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the member handle is invalid.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.Piecemark">
             <summary>
             The piecemark of the member.
             </summary>
             <value>
             A UTF-8 encoded string.
             </value>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the member handle is invalid.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.SwapEnds">
             <summary>If true, then the physical left end of the member will
             be considered the right end on details.  This allows two members
             which are the same except one is rotated differently to get the
             same piecemark.</summary>
            
             <remarks>The left end is defined based
             on whether x, y, or z is less (in that order, so if x is less but
             y is greater, this is the left end) for everything but columns.
             For columhns it is z, x, y.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.IsGalvanized">
             <summary>
             Sets the surface finish of all submaterials to galvanized
             or duplex coating.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.Grade">
             <summary>The grade which will be applied to main material on this
             member.  Applies to all builtin steel member types (beams, columns,
             braces, etc), and many python member types.</summary>
             <remarks>This grade must be from the appropriate list for the type of shape
             currently set on this member.  So if you're setting Grade, and Shape, be sure
             to set Shape first.  When Shape is switched to a different type the Grade
             will be reset to the first in the list</remarks>
             <returns>If it's a builtin steel member, the grade is returned.
             Otherwise null</returns>
            
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidOperationException">
             Thrown when attempting to set a grade on a member type that doesn't use this flag,
             which is pretty much any member that's not a builtin steel member (Beam, Column, Braces)</exception>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Thrown when attempting to set this grade to null.</exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.IsMarkedForProcess">
             <summary>True if this member needs to be processed before it will
             have solids.  False if it has been processed and so the solids are up
             to date with the inputs on the member.
            
             This can only be set to true.  One which is already set to true
             cannot be set to false, the flag can only be flipped off by
             processing the member.</summary>
            
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidOperationException">
             Thrown when attempting to unset this flag, e.g. set it to false.</exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.IsMarkedForDetail">
             <summary>True if this piecemark (which this member has) needs to be
             detailed.  This flag can be flipped on or off at any time, but special
             consideration should be given to turning it off.  That could cause
             users to piecemarks with stale drawings that don't match the model.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidOperationException">
             Thrown when attempting to set this property on a standalone member.  Since
             standalone members can't have piecemarks or details attached, you can't flip
             this flag on or off</exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.IsMarkedForNodeMatch">
             <summary>True when this member has been shifted and so the node data
             for it is stale and must be recalculated.  False if the node data
             for this member is up to date.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberBrief.MemberType">
            <summary>
            The class type for this Member object, should you request the
            full member object from the database.  This can be compared to
            the typeof a member to see if it's that member.  Example:
            MemberBrief member_brief;
            if(typeof(DesignData.SDS2.Model.Beam) == member_brief.MemberType)
                Console.WriteLine("It's a beam!");
            </summary>
            </member>
        <member name="T:DesignData.SDS2.Model.PinHeadSide">
             <summary>
             Side the pin head is on.
             </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.PinHeadSide.Near">
             <summary>Near side</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.PinHeadSide.Far">
             <summary>Far side.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.MomentPlateLocation">
             <summary>Where to put the moment plates for the moment connection</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.MomentPlateLocation.TopAndBottom">
             <summary>Place then both over and under the supported beam</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.MomentPlateLocation.TopOnly">
             <summary>Only place material over the supported beam</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.Beam">
             <summary>
             A builtin steel beam member.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Beam.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Beam.getCPtr(DesignData.SDS2.Model.Beam)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Beam.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Beam.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Beam.GetRotation">
             <summary>Rotation about the workline in radians.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Beam.GetDoubleMaterial">
             <summary>Determines if the beam's material is doubled.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Beam.GetUseCompositeDesign">
             <summary>If true, connection design will treat this beam as attached
             to a concrete slab defined by the SlabWidth field</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Beam.GetSlabWidth">
             <summary>The width of the slab supporting this beam</summary>
             <remarks>CompositeDesign must be true for this field to have any effect</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Beam.GetLongLegVertical">
             <summary>When the Shape is an angle with uneven legs, this determines
             if the longer leg will be up/down (true) or ns/fs (false).</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Beam.GetToeDirection">
             <summary>When a shape has a non-symmetrical side (ex: angles,
             wtees; not: wide flange) this determines which direction that
             side faces.  For example, in a wtee this decides the stem
             direction.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Beam.GetNumberOfStuds">
             <summary>The stud count for this beam</summary>
             <remarks>CompositeDesign must be true for this field to have any effect</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Beam.GetBreakApart">
             <summary>Used to determine if connection material not welded to the member main
             material will be broken apart from the member</summary>
             <value>true = process and create soilds will break apart member
             false = process and create solids will combine member material</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Beam.GetSeismic">
             <summary>Sets if the connection design creates seismic connections on the beam.</summary>
             <value>Automatic instructs the system to apply the choice made in
                    Job Setup &gt; Design Settings &gt; Beam design loads &gt; under beam moment.
                    Yes specifies that the system create a seismic connection on both
                    ends of the beam.
                    No configures the system to create a non-seismic connection.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Beam.GetSeismicMomentFrameType">
             <summary>Sets the moment frame type used if Seismic connection design set to Yes, or Automatic
             and enabled in setup for beams.</summary>
             <value>Automatic instructs the system to apply the choice made in
             Job Setup &gt; Design Settings &gt; Beam design loads &gt; under beam moment.
             Yes specifies that the system create a seismic connection on both ends of the beam.
             No configures the system to create a non-seismic connection.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Beam.GetStoryHeightAboveNode">
             <summary>Distance from half depth of beam to half depth of beam above</summary>
             <remarks>Only valid if Seismic is Yes, or Automatic and the setup option is seismic.
             and if SeismicMomentFrameType is IMF or SMF (or if Automatic and setup is IMF/SMF).</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Beam.GetStoryHeightBelowNode">
             <summary>Distance from half depth of beam to half depth of beam below</summary>
             <remarks>Only valid if Seismic is Yes, or Automatic and the setup option is seismic.
             and if SeismicMomentFrameType is IMF or SMF (or if Automatic and setup is IMF/SMF).</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Beam.GetUniformlyDistributedGravityLoad">
             <summary>Uniformly distributed gravity load on the beam</summary>
             <remarks>Only valid if Seismic is Yes, or Automatic and the setup option is seismic.
             and if SeismicMomentFrameType is IMF or SMF (or if Automatic and setup is IMF/SMF).</remarks>
             <value>This is a force in kip/in</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Beam.GetEnds">
             <summary>
             Get both ends in a single list, left then right.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Beam.RollType">
             </member>
        <member name="P:DesignData.SDS2.Model.Beam.MidOrdinateRoll">
             </member>
        <member name="P:DesignData.SDS2.Model.Beam.IncludedAngleRoll">
             </member>
        <member name="P:DesignData.SDS2.Model.Beam.RollingRadius">
             </member>
        <member name="P:DesignData.SDS2.Model.Beam.SpiralRollOffset">
             </member>
        <member name="P:DesignData.SDS2.Model.Beam.Rotation">
             <summary>Rotation about the workline in radians.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Beam.IsDoubleMaterial">
             <summary>Determines if the beam's material is doubled.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Beam.UseCompositeDesign">
             <summary>If true, connection design will treat this beam as attached
             to a concrete slab defined by the SlabWidth field</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Beam.SlabWidth">
             <summary>The width of the slab supporting this beam</summary>
             <remarks>CompositeDesign must be true for this field to have any effect</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Beam.NumberOfStuds">
             <summary>The stud count for this beam</summary>
             <remarks>CompositeDesign must be true for this field to have any effect</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Beam.IsLongLegVertical">
             <summary>When the Shape is an angle with uneven legs, this determines
             if the longer leg will be up/down (true) or ns/fs (false).</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Beam.ToeDirection">
             <summary>When a shape has a non-symmetrical side (ex: angles,
             wtees; not: wide flange) this determines which direction that
             side faces.  For example, in a wtee this decides the stem
             direction.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Beam.IsBreakApart">
             <summary>Used to determine if connection material not welded to the member main
             material will be broken apart from the member</summary>
             <value>true = process and create soilds will break apart member
             false = process and create solids will combine member material</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Beam.Seismic">
             <summary>Sets if the connection design creates seismic connections on the beam.</summary>
             <value>Automatic instructs the system to apply the choice made in
                    Job Setup &gt; Design Settings &gt; Beam design loads &gt; under beam moment.
                    Yes specifies that the system create a seismic connection on both
                    ends of the beam.
                    No configures the system to create a non-seismic connection.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Beam.SeismicMomentFrameType">
             <summary>Sets the moment frame type used if Seismic connection design set to Yes, or Automatic
             and enabled in setup for beams.</summary>
             <value>Automatic instructs the system to apply the choice made in
             Job Setup &gt; Design Settings &gt; Beam design loads &gt; under beam moment.
             Yes specifies that the system create a seismic connection on both ends of the beam.
             No configures the system to create a non-seismic connection.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Beam.StoryHeightAboveNode">
             <summary>Distance from half depth of beam to half depth of beam above</summary>
             <remarks>Only valid if Seismic is Yes, or Automatic and the setup option is seismic.
             and if SeismicMomentFrameType is IMF or SMF (or if Automatic and setup is IMF/SMF).</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Beam.StoryHeightBelowNode">
             <summary>Distance from half depth of beam to half depth of beam below</summary>
             <remarks>Only valid if Seismic is Yes, or Automatic and the setup option is seismic.
             and if SeismicMomentFrameType is IMF or SMF (or if Automatic and setup is IMF/SMF).</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Beam.UniformlyDistributedGravityLoad">
             <summary>Uniformly distributed gravity load on the beam</summary>
             <remarks>Only valid if Seismic is Yes, or Automatic and the setup option is seismic.
             and if SeismicMomentFrameType is IMF or SMF (or if Automatic and setup is IMF/SMF).</remarks>
             <value>This is a force in kip/in</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Beam.Ends">
             <summary>
             Get both ends in a single list, left then right.
             </summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.MomentSpecification">
             <summary>The moment specification options.</summary>
            
             <remarks>Since moment options are largely shared, and there are only
             two distinct connection types, we just have one class for moment
             connections.  Simply set the MomentType and proceed to set applicable
             properties.</remarks>
            
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidOperationException">
             This will be thrown when attempting to set a value that is not valid
             for the current MomentType.  Be sure to set MomentType first, then set
             other parameters.</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MomentSpecification.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.MomentSpecification.getCPtr(DesignData.SDS2.Model.MomentSpecification)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.MomentSpecification.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.MomentSpecification.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.MomentSpecification.GetMomentType">
             <summary>The moment connection type to set</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MomentSpecification.GetDesignForDoublers">
             <summary> applies when MomentType is Bolted or Welded and when
             this end of the beam frames to the flange of a column whose shape
             is a flanged shape such as wide flange.
            
             When true, the system initially creates the connection with web
             doubler plates only if doublers are necessary given the moment
             load on this end of the beam. Connection design locks
             for "Column Web Doublers" become available regardless of whether or
             not web doublers are actually designed. If valid entries are made
             to one or more of these locks, web doublers are designed around
             those entries even if doublers are not required.
            
             When false, the system does not check to see if doublers are
             needed and, as a result, will not design doublers. A warning in
             the Connection Design Calculations and Expanded Connection Design
             Calculations tells you that the check has been turned off.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MomentSpecification.GetDesignForStiffeners">
             <summary> applies when this beam end's MomentType is Bolted or
             Welded and that same end of the beam frames to the flange of a
             column whose shape is a flanged shape such as wide
             flange.
            
             When true, the system creates column flange stiffeners opposite
             to the beam moment connection based on the choice made to Job
             Setup &gt; Moment Plate Design Criteria &gt; the "Flange stiffeners"
             section &gt; "Design depth." That option sets whether connection
             design always designs full-depth stiffeners or sometimes designs
             half-depth stiffeners or sometimes designs no
             stiffeners. Connection design locks for " Column Flange
             Stiffeners" become available regardless of whether or not the
             stiffeners are actually designed. If valid entries are made to
             one or more of these locks, flange stiffeners are designed per
             those entries even if the stiffeners are not required.
            
             When false, the system does not check to see if stiffeners are
             needed and, as a result, does not design stiffeners. A warning in
             the Connection Design Calculations and Expanded Connection Design
             Calculations tells you that the check has been turned off.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MomentSpecification.GetColumnWebDoublerSide">
             <summary>The location of a doubler plate on the web of a column.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MomentSpecification.GetConnectionMaterial">
             <summary>The kind of extra material to add to a connection for the
             moment</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MomentSpecification.GetConnectionType">
             <remarks>Only valid for any value besides AISC_Eurocode if it's
             an AISC bolted moment end plate connection.  Then it can be
             MBMA</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MomentSpecification.GetUseInnerFlangePlates">
             <summary>
             Automatic applies a setup choice (Job Setup &gt; Design
             Criteria &gt; "Use inner flange plates for beam splice moment").
            
             Yes specifies that the system design the bolted moment
             connection using inner flange plates. A total of four inner
             flange plates may be designed: 1) an upper NS inner flange plate,
             2) an upper FS inner flange plate, 3) a lower NS inner flange
             plate and 4) a lower FS inner flange plate.
            
             No instructs the system to create only top and bottom bolted
             moment flange plates.
             </summary>
            
             <remarks>This field is only effective if this is a splice plate connection,
             with a Bolted MomentType and the ConnectionMaterial is set to Plate.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MomentSpecification.GetEndPlates">
             <remarks>This field is only valid if ConnectionType is MBMA.  Set
             this before setting BoltPattern.</remarks>
            
            <summary>Options for the ends of the end plates used</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MomentSpecification.GetMomentPlateLocation">
             <remarks>Only valid for end plate bolted</remarks>
            
            <summary>Where to put the moment plates for the moment connection</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MomentSpecification.GetBoltPattern">
             <remarks>Only valid for end plate bolted.  If ConnectionType is to be MBMA, set that
             first or this may not work.  Then set EndPlates.</remarks>
            
            <summary>The bolt pattern to use in a moment plate</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MomentSpecification.GetAutoBoltType">
             <summary>If true, set BoltType based on settings from setup.  If false,
             this must be set by the user or API</summary>
             <remarks>Only valid when MomentType is Bolted</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MomentSpecification.GetBoltType">
             <summary>The BoltType to use for bolts attaching moment connection material.</summary>
             <remarks>Only valid when MomentType is Bolted and AutoBoltType is false</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MomentSpecification.GetAutoBoltDiameter">
             <summary>If true, the system will determine a bolt diameter automatically.</summary>
             <remarks>Only valid when MomentType is Bolted</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MomentSpecification.GetBoltDiameter">
             <summary>The bolt diameter to use for bolts fastening moment
             connection material</summary>
            
             <remarks>Only valid when MomentType is Bolted and
             AutoBoltDiameter is false.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MomentSpecification.GetSeismicMomentConnection">
                  
            </member>
        <member name="M:DesignData.SDS2.Model.MomentSpecification.GetReEntrantCut">
             <remarks>Only valid when MomentType is Welded</remarks>
            
            <summary>The re-entrant cut method to use for a welded moment connection</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MomentSpecification.GetGrooveAngle">
             <remarks>Only valid when MomentType is Welded</remarks>
            
            <summary>The angle of bevel on the flange of the beam.  From a very
             short list of allowed options, named in degrees.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MomentSpecification.MomentType">
             <summary>The moment connection type to set</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MomentSpecification.IsDesignForDoublers">
             <summary> applies when MomentType is Bolted or Welded and when
             this end of the beam frames to the flange of a column whose shape
             is a flanged shape such as wide flange.
            
             When true, the system initially creates the connection with web
             doubler plates only if doublers are necessary given the moment
             load on this end of the beam. Connection design locks
             for "Column Web Doublers" become available regardless of whether or
             not web doublers are actually designed. If valid entries are made
             to one or more of these locks, web doublers are designed around
             those entries even if doublers are not required.
            
             When false, the system does not check to see if doublers are
             needed and, as a result, will not design doublers. A warning in
             the Connection Design Calculations and Expanded Connection Design
             Calculations tells you that the check has been turned off.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MomentSpecification.IsDesignForStiffeners">
             <summary> applies when this beam end's MomentType is Bolted or
             Welded and that same end of the beam frames to the flange of a
             column whose shape is a flanged shape such as wide
             flange.
            
             When true, the system creates column flange stiffeners opposite
             to the beam moment connection based on the choice made to Job
             Setup &gt; Moment Plate Design Criteria &gt; the "Flange stiffeners"
             section &gt; "Design depth." That option sets whether connection
             design always designs full-depth stiffeners or sometimes designs
             half-depth stiffeners or sometimes designs no
             stiffeners. Connection design locks for " Column Flange
             Stiffeners" become available regardless of whether or not the
             stiffeners are actually designed. If valid entries are made to
             one or more of these locks, flange stiffeners are designed per
             those entries even if the stiffeners are not required.
            
             When false, the system does not check to see if stiffeners are
             needed and, as a result, does not design stiffeners. A warning in
             the Connection Design Calculations and Expanded Connection Design
             Calculations tells you that the check has been turned off.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MomentSpecification.ColumnWebDoublerSide">
             <summary>The location of a doubler plate on the web of a column.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MomentSpecification.ConnectionMaterial">
             <summary>The kind of extra material to add to a connection for the
             moment</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MomentSpecification.ConnectionType">
             <remarks>Only valid for any value besides AISC_Eurocode if it's
             an AISC bolted moment end plate connection.  Then it can be
             MBMA</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MomentSpecification.UseInnerFlangePlates">
             <summary>
             Automatic applies a setup choice (Job Setup &gt; Design
             Criteria &gt; "Use inner flange plates for beam splice moment").
            
             Yes specifies that the system design the bolted moment
             connection using inner flange plates. A total of four inner
             flange plates may be designed: 1) an upper NS inner flange plate,
             2) an upper FS inner flange plate, 3) a lower NS inner flange
             plate and 4) a lower FS inner flange plate.
            
             No instructs the system to create only top and bottom bolted
             moment flange plates.
             </summary>
            
             <remarks>This field is only effective if this is a splice plate connection,
             with a Bolted MomentType and the ConnectionMaterial is set to Plate.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MomentSpecification.EndPlates">
             <remarks>This field is only valid if ConnectionType is MBMA.  Set
             this before setting BoltPattern.</remarks>
            
            <summary>Options for the ends of the end plates used</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MomentSpecification.MomentPlateLocation">
             <remarks>Only valid for end plate bolted</remarks>
            
            <summary>Where to put the moment plates for the moment connection</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MomentSpecification.BoltPattern">
             <remarks>Only valid for end plate bolted.  If ConnectionType is to be MBMA, set that
             first or this may not work.  Then set EndPlates.</remarks>
            
            <summary>The bolt pattern to use in a moment plate</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MomentSpecification.IsAutoBoltType">
             <summary>If true, set BoltType based on settings from setup.  If false,
             this must be set by the user or API</summary>
             <remarks>Only valid when MomentType is Bolted</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MomentSpecification.BoltType">
             <summary>The BoltType to use for bolts attaching moment connection material.</summary>
             <remarks>Only valid when MomentType is Bolted and AutoBoltType is false</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MomentSpecification.IsAutoBoltDiameter">
             <summary>If true, the system will determine a bolt diameter automatically.</summary>
             <remarks>Only valid when MomentType is Bolted</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MomentSpecification.BoltDiameter">
             <summary>The bolt diameter to use for bolts fastening moment
             connection material</summary>
            
             <remarks>Only valid when MomentType is Bolted and
             AutoBoltDiameter is false.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MomentSpecification.SeismicMomentConnection">
             </member>
        <member name="P:DesignData.SDS2.Model.MomentSpecification.ReEntrantCut">
             <remarks>Only valid when MomentType is Welded</remarks>
            
            <summary>The re-entrant cut method to use for a welded moment connection</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MomentSpecification.GrooveAngle">
             <remarks>Only valid when MomentType is Welded</remarks>
            
            <summary>The angle of bevel on the flange of the beam.  From a very
             short list of allowed options, named in degrees.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.LockableSteelGrade">
             <summary>A lockable value for a SteelGrade</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableSteelGrade.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableSteelGrade.getCPtr(DesignData.SDS2.Model.LockableSteelGrade)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableSteelGrade.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableSteelGrade.GetValue">
             <summary>The underlying value</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.LockableSteelGrade.Value">
             <summary>The underlying value</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.WasherList.swigCMemOwn">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WasherList.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WasherList.Dispose(System.Boolean)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.WasherList.WasherListEnumerator">
             Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
             whenever the collection is modified. This has been done for changes in the size of the
             collection but not when one of the elements of the collection is modified as it is a bit
             tricky to detect unmanaged code that modifies the collection under our feet.
            </member>
        <member name="M:DesignData.SDS2.Model.WasherList.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WasherList.#ctor(DesignData.SDS2.Model.WasherList)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WasherList.#ctor(System.Int32)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ICuttableEndMaterialSwigImpl.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ICuttableEndMaterialSwigImpl.getCPtr(DesignData.SDS2.Model.ICuttableEndMaterialSwigImpl)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ICuttableEndMaterialSwigImpl.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ICuttableEndMaterialSwigImpl.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ICuttableEndMaterialSwigImpl.GetEnds">
             <summary>Information specific to the ends of the material.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ICuttableEndMaterialSwigImpl.Ends">
             <summary>Information specific to the ends of the material.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.AutoStandardSpecification">
             <summary>An auto standard connection tells the system to use the auto
             standard system to determine what type of connection to use based on
             the framing situation.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.AutoStandardSpecification.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.AutoStandardSpecification.getCPtr(DesignData.SDS2.Model.AutoStandardSpecification)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.AutoStandardSpecification.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.AutoStandardSpecification.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.LockableStiffClip">
             <summary>Lockable value for stiffener clips</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableStiffClip.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableStiffClip.getCPtr(DesignData.SDS2.Model.LockableStiffClip)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableStiffClip.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableStiffClip.#ctor">
                  
            </member>
        <member name="M:DesignData.SDS2.Model.LockableStiffClip.GetValue">
             <summary>The underlying value</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableStiffClip.#ctor(DesignData.SDS2.Model.StiffClip)">
             <summary>Create a locked ViaMemberEdit LockableStiffClip from a StiffClip</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableStiffClip.op_Implicit(DesignData.SDS2.Model.StiffClip)~DesignData.SDS2.Model.LockableStiffClip">
             <summary>Implicit conversion using the StiffClip constructor</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableStiffClip.op_Implicit(DesignData.SDS2.Model.LockableStiffClip)~DesignData.SDS2.Model.StiffClip">
             <summary>Implicit conversion to value type</summary>
            </member>
        <member name="P:DesignData.SDS2.Model.LockableStiffClip.Value">
             <summary>The underlying value</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.ShearOrThreadedStud">
             <summary>A flat steel bar.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShearOrThreadedStud.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShearOrThreadedStud.getCPtr(DesignData.SDS2.Model.ShearOrThreadedStud)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShearOrThreadedStud.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShearOrThreadedStud.GetDiameter">
             <summary>Diameter of the stud shaft.</summary>
                  
            </member>
        <member name="M:DesignData.SDS2.Model.ShearOrThreadedStud.GetWorkpointLength">
             <summary>The workpoint length of the stud. Includes the head if
             present.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShearOrThreadedStud.GetHeadDiameter">
             <summary>Diameter of the stud head.</summary> <value>A floating
             point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShearOrThreadedStud.GetHeadThickness">
             <summary>Thickness of the stud head.</summary> <value>A floating
             point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShearOrThreadedStud.GetStudType">
             <summary>Type of Stud, Shear or Threaded.</summary>
                  
            </member>
        <member name="M:DesignData.SDS2.Model.ShearOrThreadedStud.GetThreadLength">
             <summary> Thread length of Threaded Stud. </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShearOrThreadedStud.GetGrade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShearOrThreadedStud.GetAvailableSteelGrades">
             <summary>A list of steel grades, valid for ShearOrThreadedStud, which can be
             assigned to the Grade property of a ShearOrThreadedStud</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ShearOrThreadedStud.Grade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ShearOrThreadedStud.Diameter">
             <summary>Diameter of the stud shaft.</summary>
                  
            </member>
        <member name="P:DesignData.SDS2.Model.ShearOrThreadedStud.WorkpointLength">
             <summary>The workpoint length of the stud. Includes the head if
             present.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ShearOrThreadedStud.HeadDiameter">
             <summary>Diameter of the stud head.</summary> <value>A floating
             point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ShearOrThreadedStud.HeadThickness">
             <summary>Thickness of the stud head.</summary> <value>A floating
             point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ShearOrThreadedStud.StudType">
             <summary>Type of Stud, Shear or Threaded.</summary>
                  
            </member>
        <member name="P:DesignData.SDS2.Model.ShearOrThreadedStud.ThreadLength">
             <summary> Thread length of Threaded Stud. </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ShearOrThreadedStud.AvailableSteelGrades">
             <summary>A list of steel grades, valid for ShearOrThreadedStud, which can be
             assigned to the Grade property of a ShearOrThreadedStud</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShearOrThreadedStud.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.CutFlangeFlush">
             <summary>For S shapes and W shapes and Wtees, it applies two flange
             cuts, one on the near side and the other on the far side.  Both cut
             to the web.  A zero near side or far side length means no cut is made
             on that side.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CutFlangeFlush.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CutFlangeFlush.getCPtr(DesignData.SDS2.Model.CutFlangeFlush)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CutFlangeFlush.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CutFlangeFlush.GetLengthNearSide">
             <summary>The length to cut back from the end of the flange along the work line
             for the near side flange cut.  0 for no cut</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CutFlangeFlush.GetLengthFarSide">
             <summary>The length to cut back from the end of the flange along the work line
             for the far side flange cut.  0 for no cut</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CutFlangeFlush.LengthNearSide">
             <summary>The length to cut back from the end of the flange along the work line
             for the near side flange cut.  0 for no cut</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CutFlangeFlush.LengthFarSide">
             <summary>The length to cut back from the end of the flange along the work line
             for the far side flange cut.  0 for no cut</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CutFlangeFlush.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.Lockable">
             <summary>Base class for lockable values.  Lockable values are values
             in SDS2 which can be locked to a user value, or unlocked and set by
             process to a system generated value.</summary>
            
             <remarks>To get an actual value, you must cast this to its lockable
             type.
            
             Note that Lockable objects are always copies.  You can make changes to
             them, but for those changes to matter you must assign them back where you
             got them after making changes.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Lockable.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Lockable.getCPtr(DesignData.SDS2.Model.Lockable)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Lockable.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Lockable.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Lockable.SetLockType(DesignData.SDS2.Model.LockType)">
             <summary>The type of lock</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Lockable.Unlock">
             <summary>Unlock this value, let it be set by the system during process</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Lockable.GetIsLocked">
             <summary>True if this is locked to a user value</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Lockable.ToString">
            </member>
        <member name="P:DesignData.SDS2.Model.Lockable.LockType">
             </member>
        <member name="P:DesignData.SDS2.Model.Lockable.IsLocked">
             <summary>True if this is locked to a user value</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.FlangeCutOperation">
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlangeCutOperation.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlangeCutOperation.getCPtr(DesignData.SDS2.Model.FlangeCutOperation)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlangeCutOperation.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlangeCutOperation.Dispose(System.Boolean)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.ThicknessReferencePoint">
             <summary>The reference plane from which a plate's thickness expands out.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ThicknessReferencePoint.FarSide">
             <summary>Expand thickness from the far side toward the near side</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ThicknessReferencePoint.Center">
             <summary>Expand half thickness out from the center in both directions</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ThicknessReferencePoint.NearSide">
             <summary>Expand thickness from the near side toward the far side</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.BearingSpecification">
             <summary>A bearing connection specification</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BearingSpecification.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BearingSpecification.getCPtr(DesignData.SDS2.Model.BearingSpecification)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BearingSpecification.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BearingSpecification.#ctor">
                  
            </member>
        <member name="M:DesignData.SDS2.Model.BearingSpecification.GetExtendBottomChord">
             <summary>If true, the bottom chord of the joist is extended and
             "Bottom chord" is set to ' Auto' so that the appropriate field
             clearance is applied. "Stabilizing material" is optional.
            
             If false, you can still apply a "Bottom chord" setback to get a
             bottom chord. However, "Stabilizing material" cannot be
             applied.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BearingSpecification.GetStabilizingMaterial">
             <summary>None results in no joist bottom chord stabilizing
             material being created by the system.
            
             Angle instructs the system to use the Fabricator Setup &gt; Standard
             Fabricator Connections &gt; "Bottom chord extension seat angle" as
             the angle seat for the extended bottom chord.
            
             Plate instructs the system to use the Fabricator Setup &gt;
             Standard Fabricator Connections &gt; "Bottom chord extension plate"
             as the stabilizing material for the extended bottom chord. Per
             the OSHA standard, the plate includes a 13/16 inch (21 mm) hole
             (click here) for guying or plumbing cables. The hole is placed 1
             1/2 inch from the bottom edge and joist edge of the plate.</summary>
            
             <remarks>Only valid of ExtendBottomChord is true</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BearingSpecification.GetChordToSupport">
             <summary> Bolted instructs the system to add holes and bolts to
             the beam flange for bolting the joist to the flange. The holes
             are included on the beam's member detail. The bolts can be
             included on Field Bolt reports and, optionally, on the beam's
             bill of material. The "Input elevation" of the joist must be the
             elevation of the beam's top flange in order for holes to be
             generated. The distance between the two holes is the "Top chord
             gage" entered in the local material file. The choice made to
             "Wide flange beams, alternative gage for joist connections" or
             "Channel beams, alternative gage for joist connections" in
             Fabricator Setup &gt; Standard Fabricator Connections &gt; Joist Setup
             set the placement of the holes with respect to the center of the
             beam web. Hole size is set using the "NM bolt diameter" in the "
             Connection type" leaf on this window.
            
             Welded sets the joist to be field welded. A 3D field weld is not
             generated. The design calculations note, "Joist end welded to
             supporting member."</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BearingSpecification.GetTopChordEmbed">
             <summary>The embed plate used for this bearing connection</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BearingSpecification.GetBottomChordEmbed">
             <summary>The embed plate used for this bearing connection</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BearingSpecification.GetBottomChordEmbedLocation">
             <summary>Automatic specifies that the system apply a setup choice
             (Concrete Setup &gt; Embed Schedule &gt; "Plate location"). That setup
             choice sets whether the plate is located inside the concrete wall
             or flush to the surface of the wall.
            
             InsideWall embeds the plate in the concrete wall or tilt-up panel.
            
             OutsideWall locates the plate flush to the wall or panel.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BearingSpecification.GetUseVerticalStabilizerAngle">
             <summary> If true, the bottom chord stabilizer angle is oriented
             with both legs vertical. That angle is vertically centered with
             respect to the bottom of the joist bottom chord.
            
             If false, the stabilizer angle is oriented so that one leg is
             horizontal so that it can support the joist bottom chord.</summary>
            
             <remarks>Only valid if StabilizingMaterial is set to Angle</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BearingSpecification.GetUseErectionHole">
             <summary> Automatic instructs the system to use the entry
             ('Yes' or 'No') that is made to the relevant cell in Fabricator
             Setup &gt; Standard Fabricator Connections &gt; Joist Setup &gt; "Use
             erection hole" on the "Joist type specific settings" table. That
             setup table can configure an erection hole to be used or not used
             on a per-joist-type basis.
            
             Yes instructs the system to add a hole for guying or plumbing
             cables to the bottom chord stabilizer plate. Per OSHA, the hole
             is placed 1 1/2 inch from the bottom edge and joist edge of the
             plate. A connection design lock for specifying the "Erection hole
             diameter" is made available in the " Joist Stabilizer Plate"
             leaf.
            
             No instructs the system to not add an erection hole.</summary>
            
             <remarks>Only valid if StabilizingMaterial is set to Plate</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BearingSpecification.GetAllowWashersOnShoeSlots">
             <summary>If Yes, then allow long slot holes to be added to the
             plates on the joist.  If Automatic, then this is determined by
             settings in setup</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BearingSpecification.ExtendBottomChord">
             <summary>If true, the bottom chord of the joist is extended and
             "Bottom chord" is set to ' Auto' so that the appropriate field
             clearance is applied. "Stabilizing material" is optional.
            
             If false, you can still apply a "Bottom chord" setback to get a
             bottom chord. However, "Stabilizing material" cannot be
             applied.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BearingSpecification.StabilizingMaterial">
             <summary>None results in no joist bottom chord stabilizing
             material being created by the system.
            
             Angle instructs the system to use the Fabricator Setup &gt; Standard
             Fabricator Connections &gt; "Bottom chord extension seat angle" as
             the angle seat for the extended bottom chord.
            
             Plate instructs the system to use the Fabricator Setup &gt;
             Standard Fabricator Connections &gt; "Bottom chord extension plate"
             as the stabilizing material for the extended bottom chord. Per
             the OSHA standard, the plate includes a 13/16 inch (21 mm) hole
             (click here) for guying or plumbing cables. The hole is placed 1
             1/2 inch from the bottom edge and joist edge of the plate.</summary>
            
             <remarks>Only valid of ExtendBottomChord is true</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BearingSpecification.ChordToSupport">
             <summary> Bolted instructs the system to add holes and bolts to
             the beam flange for bolting the joist to the flange. The holes
             are included on the beam's member detail. The bolts can be
             included on Field Bolt reports and, optionally, on the beam's
             bill of material. The "Input elevation" of the joist must be the
             elevation of the beam's top flange in order for holes to be
             generated. The distance between the two holes is the "Top chord
             gage" entered in the local material file. The choice made to
             "Wide flange beams, alternative gage for joist connections" or
             "Channel beams, alternative gage for joist connections" in
             Fabricator Setup &gt; Standard Fabricator Connections &gt; Joist Setup
             set the placement of the holes with respect to the center of the
             beam web. Hole size is set using the "NM bolt diameter" in the "
             Connection type" leaf on this window.
            
             Welded sets the joist to be field welded. A 3D field weld is not
             generated. The design calculations note, "Joist end welded to
             supporting member."</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BearingSpecification.TopChordEmbed">
             <summary>The embed plate used for this bearing connection</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BearingSpecification.BottomChordEmbed">
             <summary>The embed plate used for this bearing connection</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BearingSpecification.BottomChordEmbedLocation">
             <summary>Automatic specifies that the system apply a setup choice
             (Concrete Setup &gt; Embed Schedule &gt; "Plate location"). That setup
             choice sets whether the plate is located inside the concrete wall
             or flush to the surface of the wall.
            
             InsideWall embeds the plate in the concrete wall or tilt-up panel.
            
             OutsideWall locates the plate flush to the wall or panel.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BearingSpecification.UseVerticalStabilizerAngle">
             <summary> If true, the bottom chord stabilizer angle is oriented
             with both legs vertical. That angle is vertically centered with
             respect to the bottom of the joist bottom chord.
            
             If false, the stabilizer angle is oriented so that one leg is
             horizontal so that it can support the joist bottom chord.</summary>
            
             <remarks>Only valid if StabilizingMaterial is set to Angle</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BearingSpecification.UseErectionHole">
             <summary> Automatic instructs the system to use the entry
             ('Yes' or 'No') that is made to the relevant cell in Fabricator
             Setup &gt; Standard Fabricator Connections &gt; Joist Setup &gt; "Use
             erection hole" on the "Joist type specific settings" table. That
             setup table can configure an erection hole to be used or not used
             on a per-joist-type basis.
            
             Yes instructs the system to add a hole for guying or plumbing
             cables to the bottom chord stabilizer plate. Per OSHA, the hole
             is placed 1 1/2 inch from the bottom edge and joist edge of the
             plate. A connection design lock for specifying the "Erection hole
             diameter" is made available in the " Joist Stabilizer Plate"
             leaf.
            
             No instructs the system to not add an erection hole.</summary>
            
             <remarks>Only valid if StabilizingMaterial is set to Plate</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BearingSpecification.AllowWashersOnShoeSlots">
             <summary>If Yes, then allow long slot holes to be added to the
             plates on the joist.  If Automatic, then this is determined by
             settings in setup</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.ConnectionExtensionType">
             <summary>Options for how to extend connection material to the
             supporting material</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ConnectionExtensionType.SizeAsRequired">
             <summary>Extend only as required to meet physical requirements</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ConnectionExtensionType.ExtendToFlange">
             <summary>Extend to the flanges</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ConnectionExtensionType.ExtendToFillet">
             <summary>Extend to the fillet or k</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.ClipWeb">
             <summary>Clip the web and flange at the corner</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipWeb.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipWeb.getCPtr(DesignData.SDS2.Model.ClipWeb)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipWeb.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipWeb.GetLength">
             <summary>The length of the clip, along the cut web</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipWeb.GetDepth">
             <summary>The depth of the clip, this is the amount of web removed
             at the end of the material (the deepest part of the
             clip)</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ClipWeb.Length">
             <summary>The length of the clip, along the cut web</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ClipWeb.Depth">
             <summary>The depth of the clip, this is the amount of web removed
             at the end of the material (the deepest part of the
             clip)</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipWeb.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.ClipAngleGage">
             <summary>Gage settings specific to clip angle connections</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ClipAngleGage.Narrow">
             <summary>specifies that a narrow gage clip angle connection be
             designed per the distance entered to Fabricator Setup &gt; Standard
             Fabricator Connections &gt; Clip Angle Settings &gt; "Center to center
             distance, Narrow gage." A narrow gage clip angle has a single
             column of bolts.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ClipAngleGage.Wide">
             <summary>instructs the system to create a wide gage clip
             angle per the distance entered to Fabricator Setup &gt; Standard
             Fabricator Connections &gt; Clip Angle Settings &gt; "Center to center
             distance, Wide gage." A wide gage clip angle has a single column
             of bolts.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ClipAngleGage.Heavy">
             <summary>specifies double clip angles that may be shop welded or
             shop bolted. Heavy gage clip angles may have two columns of bolts
             per leg. The inside and outside center-to-center hole spacing of
             a heavy gage double clip angle is defined under Standard
             Fabricator Connections &gt; Clip Angle Settings.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.StringerMark">
             <summary>Enumeration denoting CNC marks to place on stair stringers.</summary>
            </member>
        <member name="F:DesignData.SDS2.Model.StringerMark.None">
             <summary>Puts no CNC marks on the inside of stair stringers.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.StringerMark.Nosing">
             <summary>Puts one CNC mark per stringer for each tread nosing. On pan treads,
                      the CNC marks align with the 'abrasive setback'.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.StringerMark.Support">
             <summary>Puts two CNC marks per angle or plate or flat bar support in line with
                      the corners of the support where the tread or riser rests on the support.
                      The CNC marks are placed on the inside of bot the near and far side stringers.
                      If the support is a bent plate, a single CNC mark is placed at the intersection
                      of the riser with the next tread near the bend location. Pan and continuous
                      treads can have dual or single supports. Plate treads are limited to a
                      single support. Pan tread supports can be angle, plate, flat bar or bent
                      plate. Continuous or plate tread supports can be angle, plate or flat bar.
             </summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.Note">
             <summary>
             Notes are for authoring and reviewing comments related the the model or to the project.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Note.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Note.getCPtr(DesignData.SDS2.Model.Note)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Note.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Note.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Note.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Note.RefreshDatabaseTable">
             <summary>Refresh the the primary table for objects of this type.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Note.Get(DesignData.SDS2.Database.NoteHandle)">
             <summary>
             Get a Note object for the NoteHandle passed in.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Note.GetHandle">
             <summary>
             A handle for this note. Notes that have not been added to
             the model will have null handles.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Note.GetLocation">
             <summary>
             Location of the note in global coordinates. If the note is associated
             with a member, then the note's global location moves as the member is moved.
             However, the location relative to the member remains fixed.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Note.GetCreateUser">
             <summary>
             Name of the user who created the note
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Note.GetLastModifyUser">
             <summary>
             Name of the user who last modified the note
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Note.GetColor">
             <summary>The color of the note</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Note.GetIsShownInModel">
             <summary>Specifies whether the note has graphics displayed in the model</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Note.GetSubject">
             <summary>Subject of the note</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Note.GetMemberHandle">
             <summary>A handle to the member the note is linked to</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Note.GetComments">
             <summary>A deep copy of the comments assocated with the note</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Note.AppendComment(DesignData.SDS2.Model.NoteComment)">
             <summary>Append the specified comment to the list of comments</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Note.GetDisciplineTags">
             <summary>
             A deep copy of the discipline tags associated with the note.
             Beware, the user can change actual name of the Discipline category.
             The actual name of this category can be read from
             the returned object.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Note.GetStatusTags">
             <summary>
             A deep copy of the status tags associated with the note.
             Beware, the user can change actual name of the Status category.
             The actual name of this category can be read from
             the returned object.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Note.GetCustomTags">
             <summary>
             A deep copy of the custom tags assocated with the note.
             Beware, the user can change actual name of the Custom category.
             The actual name of this category can be read from
             the returned object.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Note.GetCreateTime">
             <summary>
             Seconds between when this note was created and the unix epoch, January 1, 1970.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Note.GetLastModifyTime">
             <summary>
             Seconds between when this note was last edited and the unix epoch, January 1, 1970.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Note.GetView">
             <summary>
             The view associated with a note.
             SDS2 will change to this view when the user clicks on the note the note viewer tool.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Note.Add(DesignData.SDS2.Model.Note)">
             <summary>Add the view to the current transaction</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Note.Location">
             <summary>
             Location of the note in global coordinates. If the note is associated
             with a member, then the note's global location moves as the member is moved.
             However, the location relative to the member remains fixed.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Note.CreateTime">
             <summary>
             Seconds between when this note was created and the unix epoch, January 1, 1970.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Note.CreateUser">
             <summary>
             Name of the user who created the note
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Note.LastModifyTime">
             <summary>
             Seconds between when this note was last edited and the unix epoch, January 1, 1970.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Note.LastModifyUser">
             <summary>
             Name of the user who last modified the note
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Note.Color">
             <summary>The color of the note</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Note.IsShownInModel">
             <summary>Specifies whether the note has graphics displayed in the model</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Note.Subject">
             <summary>Subject of the note</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Note.MemberHandle">
             <summary>A handle to the member the note is linked to</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Note.Comments">
             <summary>A deep copy of the comments assocated with the note</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Note.DisciplineTags">
             <summary>
             A deep copy of the discipline tags associated with the note.
             Beware, the user can change actual name of the Discipline category.
             The actual name of this category can be read from
             the returned object.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Note.StatusTags">
             <summary>
             A deep copy of the status tags associated with the note.
             Beware, the user can change actual name of the Status category.
             The actual name of this category can be read from
             the returned object.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Note.CustomTags">
             <summary>
             A deep copy of the custom tags assocated with the note.
             Beware, the user can change actual name of the Custom category.
             The actual name of this category can be read from
             the returned object.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Note.View">
             <summary>
             The view associated with a note.
             SDS2 will change to this view when the user clicks on the note the note viewer tool.
             </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ShapeMaterialEndList.swigCMemOwn">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShapeMaterialEndList.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShapeMaterialEndList.Dispose(System.Boolean)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.ShapeMaterialEndList.ShapeMaterialEndListEnumerator">
             Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
             whenever the collection is modified. This has been done for changes in the size of the
             collection but not when one of the elements of the collection is modified as it is a bit
             tricky to detect unmanaged code that modifies the collection under our feet.
            </member>
        <member name="M:DesignData.SDS2.Model.ShapeMaterialEndList.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShapeMaterialEndList.#ctor(DesignData.SDS2.Model.ShapeMaterialEndList)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShapeMaterialEndList.#ctor(System.Int32)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.FlatPlateLayout">
             <summary>A flat plate formed by a planar loop of points, a Layout3D</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlatPlateLayout.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlatPlateLayout.getCPtr(DesignData.SDS2.Model.FlatPlateLayout)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlatPlateLayout.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlatPlateLayout.GetOrderLength">
             <summary>The length of the plate as it would need to be ordered.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlatPlateLayout.GetWidth">
             <summary>The width of the plate.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlatPlateLayout.GetThicknessReferencePoint">
             <summary>The center plane of the plate.  Changing this shifts the
             plate without changing the work points of the plate.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlatPlateLayout.GetLayout">
             <summary>Get the layout used to generate this plate, in material
             coordinates. Mutations to the returned value do not change the
             material; SetLayout() must be used to modify the layout on the
             material.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlatPlateLayout.SetLayout(DesignData.SDS2.Primitives.Layout3D)">
             <summary>Set the layout used to generate this plate, in material coordinates.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.FlatPlateLayout.ThicknessReferencePoint">
             <summary>The center plane of the plate.  Changing this shifts the
             plate without changing the work points of the plate.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.FlatPlateLayout.OrderLength">
             <summary>The length of the plate as it would need to be ordered.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.FlatPlateLayout.Width">
             <summary>The width of the plate.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlatPlateLayout.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.MemberEnd">
             <summary>The fully inclusive set of end data on a member</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEnd.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEnd.getCPtr(DesignData.SDS2.Model.MemberEnd)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEnd.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEnd.GetConnectionComponent">
             <summary>Grab the connection component object for this end of this member</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEnd.GetEndPreparation">
             <summary>The end preparation settings for this member end, if it
             has any.  If this is null, it's because this type of member does
             not support the standard end preparation lockables.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEnd.GetTopFlangeCutOperation">
             <summary>The cut operation for the top flange of the material on this end.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEnd.SetTopFlangeCutOperation(DesignData.SDS2.Model.FlangeCutOperation)">
             <summary>When setting the cut operation, we will copy the options you give into
             our own data.  Your operation passed in will not be a reference to the underlying operation.
             To get a reference you'll need to look to the TopFlangeCutOperation property after assigning
             this.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEnd.GetBottomFlangeCutOperation">
             <summary>The cut operation for the bottom flange of the material on this end.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEnd.SetBottomFlangeCutOperation(DesignData.SDS2.Model.FlangeCutOperation)">
             <summary>When setting the cut operation, we will copy the options you give into
             our own data.  Your operation passed in will not be a reference to the underlying operation.
             To get a reference you'll need to look to the BottomFlangeCutOperation property after assigning
             this.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberEnd.EndPreparation">
             <summary>The end preparation settings for this member end, if it
             has any.  If this is null, it's because this type of member does
             not support the standard end preparation lockables.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberEnd.ConnectionComponent">
             <summary>Grab the connection component object for this end of this member</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberEnd.TopFlangeCutOperation">
             <summary>The cut operation for the top flange of the material on this end.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberEnd.BottomFlangeCutOperation">
             <summary>The cut operation for the bottom flange of the material on this end.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.GroupMember">
             <summary>
             A GroupMember associates submembers that will be detailed as a single member with one piecemark.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GroupMember.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.GroupMember.getCPtr(DesignData.SDS2.Model.GroupMember)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.GroupMember.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.GroupMember.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.GroupMember.RefreshDatabaseTable">
             <summary>Refresh the the primary table for objects of this type.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GroupMember.Get(DesignData.SDS2.Database.GroupMemberHandle)">
             <summary>
             Get a GroupMember object for the GroupMemberHandle passed in.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GroupMember.GetDescription">
             <summary>Description in the bill of material</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when setting description
             with a string that is too long or if the group member handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the group member without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GroupMember.GetPiecemark">
             <summary>
             The piecemark of the group member.
             </summary>
             <value>
             A UTF-8 encoded string.
             </value>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the group member handle is invalid.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GroupMember.SetPiecemark(System.String)">
             <summary>Set a user piecemark to override the system generated
             piecemark for this group. If other groups shared this system
             mark, this will split them apart.  To recombine them, the same
             user mark has to be set on those groups.
            
             By setting a user piecemark you opt this group out of
             system piecemarking and piecemark matching/batching.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GroupMember.GetIsMarkedForDetailing">
             <summary>True iff the group member is marked for detailing.  This
             can always be set to true, but in some cases setting it to false
             will fail.  The underlying flag will be set, but since it would
             still appear on the list of groups to detail this flag will still
             show as true.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the group member handle is
             invalid.  </exception> <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException"> Thrown when
             setting data on the group member without having added it to a
             transaction </exception> <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException"> Thrown when
             reading or writing the property of an object that was added to a
             transaction but is unlocked </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GroupMember.GetIsMainViewLockedToMainMember">
             <summary>
             True iff the group's main member view should be used as the group's main view
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the group member handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the group member without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GroupMember.GetShouldSubmemberMarksBeOnDetail">
             <summary>True iff submember marks should be shown on the detail</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the group member handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the group member without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GroupMember.GetShouldMaterialMarksBeOnDetail">
             <summary>True iff all material marks should be shown on the detail</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the group member handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the group member without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GroupMember.GetShouldSectionSizesBeOnDetail">
             <summary>True iff all section sizes should be shown on the detail</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the group member handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the group member without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GroupMember.GetShouldOrganizeBOMBySubmember">
             <summary>
             True iff the bill of material should be organized by submember,
             with submaterials, shop bolts, and field bolts listed together
             with their associated submember.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the group member handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the group member without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GroupMember.GetGuid">
             <summary>The uuid or guid representing this group member</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the group member handle is invalid.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GroupMember.GetHandle">
             <summary>A handle for this group member</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GroupMember.GetMainMemberHandle">
             <summary>A handle to the main member of this group member</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown when setting the main member to
             a member that is not currently in the group's submembers or if the
             group member handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the group member without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GroupMember.GetPiecemarkMemberHandle">
             <summary>
             A handle to the member that displays the piecemark in erection views for this group member
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown when setting the main member to
             a member that is not currently in the group's submembers or if the
             group member handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the group member without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GroupMember.GetSubmemberHandles">
             <summary>Handles to all the submembers of the group member</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the group member handle is invalid.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GroupMember.GetCustomPropertyMapHandle">
             <summary>
             A handle to the custom properties for this group member.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the group member handle is invalid.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GroupMember.IsSubmember(DesignData.SDS2.Database.MemberHandle)">
             <summary>True iff the member is a submember of the group</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the group member handle is invalid.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GroupMember.GetIsGalvanized">
             <summary>True iff the group members is marked as galvanized</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the group member handle is invalid.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GroupMember.GetHashCode">
             <remarks>This hash (and Equals) does not include submembers.  It does include
             the piecemark and all other group member properties.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GroupMember.Equals(System.Object)">
            
            </member>
        <member name="P:DesignData.SDS2.Model.GroupMember.Guid">
             <summary>The uuid or guid representing this group member</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the group member handle is invalid.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GroupMember.Handle">
             <summary>A handle for this group member</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GroupMember.Description">
             <summary>Description in the bill of material</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when setting description
             with a string that is too long or if the group member handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the group member without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GroupMember.IsMarkedForDetailing">
             <summary>True iff the group member is marked for detailing.  This
             can always be set to true, but in some cases setting it to false
             will fail.  The underlying flag will be set, but since it would
             still appear on the list of groups to detail this flag will still
             show as true.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the group member handle is
             invalid.  </exception> <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException"> Thrown when
             setting data on the group member without having added it to a
             transaction </exception> <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException"> Thrown when
             reading or writing the property of an object that was added to a
             transaction but is unlocked </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GroupMember.IsMainViewLockedToMainMember">
             <summary>
             True iff the group's main member view should be used as the group's main view
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the group member handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the group member without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GroupMember.ShouldSubmemberMarksBeOnDetail">
             <summary>True iff submember marks should be shown on the detail</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the group member handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the group member without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GroupMember.ShouldMaterialMarksBeOnDetail">
             <summary>True iff all material marks should be shown on the detail</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the group member handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the group member without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GroupMember.ShouldSectionSizesBeOnDetail">
             <summary>True iff all section sizes should be shown on the detail</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the group member handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the group member without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GroupMember.ShouldOrganizeBOMBySubmember">
             <summary>
             True iff the bill of material should be organized by submember,
             with submaterials, shop bolts, and field bolts listed together
             with their associated submember.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the group member handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the group member without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GroupMember.MainMemberHandle">
             <summary>A handle to the main member of this group member</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown when setting the main member to
             a member that is not currently in the group's submembers or if the
             group member handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the group member without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GroupMember.PiecemarkMemberHandle">
             <summary>
             A handle to the member that displays the piecemark in erection views for this group member
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException will be thrown when setting the main member to
             a member that is not currently in the group's submembers or if the
             group member handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the group member without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GroupMember.IsGalvanized">
             <summary>True iff the group members is marked as galvanized</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the group member handle is invalid.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GroupMember.CustomPropertyMapHandle">
             <summary>
             A handle to the custom properties for this group member.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the group member handle is invalid.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GroupMember.Piecemark">
             <summary>
             The piecemark of the group member.
             </summary>
             <value>
             A UTF-8 encoded string.
             </value>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the group member handle is invalid.
             </exception>
            
            </member>
        <member name="T:DesignData.SDS2.Model.AutomaticYesNo">
             <summary>Many options in SDS2 can either be on, off, or
             determined based on some criteria by the system.  Usually
             that criteria is a setup setting</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.AutomaticYesNo.Automatic">
             <summary>Let the system use its criteria to determine this option</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.AutomaticYesNo.Yes">
             <summary>Turn the option on</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.AutomaticYesNo.No">
             <summary>Turn the option off</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.EndCutType">
             <summary>The type or method of cut</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.EndCutType.StandardCut">
             <summary>The default, standard cut method</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.EndCutType.SquareCut">
             <summary>A square cut:  "SQ CUT" is added to the detail/</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.EndCutType.BevelCut">
             <summary>A beveled cut: "BEV CUT" is added to the detail.  When
             using BevelCut the WebCutAngle should be set to a value other
             than 0.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.EndCutType.MillCut">
             <summary>A milled cut:  "MILL CUT" is added to the detail.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.SeatSpecificationBottomChordRestraintMaterial">
             <summary>Allowed materials for seated connections for joist bottom chord restraints</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.SeatSpecificationBottomChordRestraintMaterial.None">
             <summary>No restraint</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.SeatSpecificationBottomChordRestraintMaterial.Angle">
             <summary>Angle restraint</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.SeatSpecificationBottomChordRestraintMaterial.Plate">
             <summary>Plate restraint</summary> 
            </member>
        <member name="T:DesignData.SDS2.Model.LockableBeamExtensionPlateWeldType">
             <summary>Lockable value for beam extension plate welds</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBeamExtensionPlateWeldType.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBeamExtensionPlateWeldType.getCPtr(DesignData.SDS2.Model.LockableBeamExtensionPlateWeldType)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBeamExtensionPlateWeldType.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBeamExtensionPlateWeldType.#ctor">
                  
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBeamExtensionPlateWeldType.GetValue">
             <summary>The underlying value</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBeamExtensionPlateWeldType.#ctor(DesignData.SDS2.Model.BeamExtensionPlateWeldType)">
             <summary>Create a locked ViaMemberEdit LockableBeamExtensionPlateWeldType from a BeamExtensionPlateWeldType</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBeamExtensionPlateWeldType.op_Implicit(DesignData.SDS2.Model.BeamExtensionPlateWeldType)~DesignData.SDS2.Model.LockableBeamExtensionPlateWeldType">
             <summary>Implicit conversion using the BeamExtensionPlateWeldType constructor</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBeamExtensionPlateWeldType.op_Implicit(DesignData.SDS2.Model.LockableBeamExtensionPlateWeldType)~DesignData.SDS2.Model.BeamExtensionPlateWeldType">
             <summary>Implicit conversion to value type</summary>
            </member>
        <member name="P:DesignData.SDS2.Model.LockableBeamExtensionPlateWeldType.Value">
             <summary>The underlying value</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.NotchFlange">
             <summary>Notch the Top/Bottom sides of a hollow section.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.NotchFlange.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.NotchFlange.getCPtr(DesignData.SDS2.Model.NotchFlange)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.NotchFlange.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.NotchFlange.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.NotchFlange.GetLength">
             <summary>Length of the notch.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.NotchFlange.GetWidth">
             <summary>Width of the notch.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.NotchFlange.GetOffset">
             <summary>Offset from center of the notch.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.NotchFlange.GetRadius">
             <summary>Radius of the end of the notch. When the
             radius is 0, the notch is cut square. </summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.NotchFlange.Length">
             <summary>Length of the notch.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.NotchFlange.Width">
             <summary>Width of the notch.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.NotchFlange.Offset">
             <summary>Offset from center of the notch.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.NotchFlange.Radius">
             <summary>Radius of the end of the notch. When the
             radius is 0, the notch is cut square. </summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="T:DesignData.SDS2.Model.ShapeMaterialEnd">
             <summary>Collection of information about a rolled material's end</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShapeMaterialEnd.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShapeMaterialEnd.getCPtr(DesignData.SDS2.Model.ShapeMaterialEnd)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShapeMaterialEnd.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShapeMaterialEnd.GetEndCutType">
             <summary>The type or method of cut to make on this end.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShapeMaterialEnd.GetTopFlangeCutOperation">
             <summary>The top flange cut operations.  If no operation is set, this will
             be null.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShapeMaterialEnd.SetTopFlangeCutOperation(DesignData.SDS2.Model.FlangeCutOperation)">
             <summary>When setting the cut operation, we will copy the options you give into
             our own data.  Your operation passed in will not be a reference to the underlying operation.
             To get a reference you'll need to look to the TopFlangeCutOperation property after assigning
             this.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShapeMaterialEnd.GetBottomFlangeCutOperation">
             <summary>The bottom flange cut operations.  If no operation is set, this will
             be null.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShapeMaterialEnd.SetBottomFlangeCutOperation(DesignData.SDS2.Model.FlangeCutOperation)">
             <summary>When setting the cut operation, we will copy the options you give into
             our own data.  Your operation passed in will not be a reference to the underlying operation.
             To get a reference you'll need to look to the BottomFlangeCutOperation property after assigning
             this.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShapeMaterialEnd.GetMomentConnectionWebSetback">
             <summary>The distance that you want the web of this material
             setback</summary>
             <remarks>Only applies if top and bottom are one of
             CopeFieldWeldN1FEMA, CopeShopWeldN1FEMA, SeismicCopeFieldWeld,
             SeismicCopeShopWeld, CopeFieldWeldN3, CopeShopWeldN3</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ShapeMaterialEnd.EndCutType">
             <summary>The type or method of cut to make on this end.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ShapeMaterialEnd.TopFlangeCutOperation">
             <summary>The top flange cut operations.  If no operation is set, this will
             be null.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ShapeMaterialEnd.BottomFlangeCutOperation">
             <summary>The bottom flange cut operations.  If no operation is set, this will
             be null.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ShapeMaterialEnd.MomentConnectionWebSetback">
             <summary>The distance that you want the web of this material
             setback</summary>
             <remarks>Only applies if top and bottom are one of
             CopeFieldWeldN1FEMA, CopeShopWeldN1FEMA, SeismicCopeFieldWeld,
             SeismicCopeShopWeld, CopeFieldWeldN3, CopeShopWeldN3</remarks>
            
            </member>
        <member name="T:DesignData.SDS2.Model.BeadedFlat">
             <summary>A beaded flat material</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.BeadedFlat.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BeadedFlat.getCPtr(DesignData.SDS2.Model.BeadedFlat)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BeadedFlat.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BeadedFlat.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BeadedFlat.#ctor(DesignData.SDS2.Setup.BeadedFlatShape)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BeadedFlat.GetGrade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BeadedFlat.GetAvailableSteelGrades">
             <summary>A list of steel grades, valid for BeadedFlat, which can be
             assigned to the Grade property of a BeadedFlat</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BeadedFlat.Grade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BeadedFlat.AvailableSteelGrades">
             <summary>A list of steel grades, valid for BeadedFlat, which can be
             assigned to the Grade property of a BeadedFlat</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.VerticalBraceEnd">
             <summary>Vertical brace specific end options</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VerticalBraceEnd.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.VerticalBraceEnd.getCPtr(DesignData.SDS2.Model.VerticalBraceEnd)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.VerticalBraceEnd.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.VerticalBraceEnd.GetMemberSetbackType">
             <summary>The type of setback on this end of the member</summary>
             <remarks>Be sure to set this before setting MemberSetbackValue</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.VerticalBraceEnd.GetMemberSetbackValue">
             <summary>The value for the current member setback.  This can only be set
             if MemberSetbackType is either FieldClearance or InputMinusDimension</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidOperationException">
             Thrown if MemberSetbackType is AutomaticMinusDimension</exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VerticalBraceEnd.MemberSetbackType">
             <summary>The type of setback on this end of the member</summary>
             <remarks>Be sure to set this before setting MemberSetbackValue</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.VerticalBraceEnd.MemberSetbackValue">
             <summary>The value for the current member setback.  This can only be set
             if MemberSetbackType is either FieldClearance or InputMinusDimension</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidOperationException">
             Thrown if MemberSetbackType is AutomaticMinusDimension</exception>
            
            </member>
        <member name="T:DesignData.SDS2.Model.SquareBar">
             <summary>A square steel bar.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SquareBar.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.SquareBar.getCPtr(DesignData.SDS2.Model.SquareBar)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.SquareBar.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.SquareBar.GetOrderLength">
             <summary>The length of the plate.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SquareBar.GetWorkpointLength">
             <summary>The workpoint length of the plate.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SquareBar.GetCenteredOnDepth">
             TODO
            
            </member>
        <member name="M:DesignData.SDS2.Model.SquareBar.GetAngleOfTwist">
             <summary>The angle (in radians) of twist from one end of the
             material to the other.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SquareBar.GetRollType">
             <summary>The type of roll on this material, or None if there is
             no roll on this material.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SquareBar.GetMidOrdinateRoll">
             <summary>The measurement from the center of the curved member to
             point halfway between the left and right end.  For Camber, this
             is the only valid value to set.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SquareBar.GetIncludedAngleRoll">
             <summary>The included angle of the rolling operation.  This can be set
             for any operation besides a camber roll</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SquareBar.GetRollingRadius">
             <summary>The rolling radius for any roll operation besides a camber roll.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SquareBar.GetSpiralRollOffset">
             <summary>The positive or negative distance that the right end
             will be offset from the right work point in the member's Z axis.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SquareBar.GetThicknessReferencePoint">
             <summary>The depth-wise reference plane of the bar.  Changing this shifts the
             bar without changing the work points of the bar.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SquareBar.GetWidth">
             <summary> The width of the bar. Width and Thickness are always the same.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SquareBar.GetThickness">
             <summary> The thickness of the bar. Width and Thickness are always the same.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SquareBar.GetGrade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SquareBar.GetAvailableSteelGrades">
             <summary>A list of steel grades, valid for SquareBar, which can be
             assigned to the Grade property of a SquareBar</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SquareBar.Grade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SquareBar.OrderLength">
             <summary>The length of the plate.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SquareBar.WorkpointLength">
             <summary>The workpoint length of the plate.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SquareBar.Thickness">
             <summary> The thickness of the bar. Width and Thickness are always the same.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SquareBar.Width">
             <summary> The width of the bar. Width and Thickness are always the same.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SquareBar.IsCenteredOnDepth">
             </member>
        <member name="P:DesignData.SDS2.Model.SquareBar.ThicknessReferencePoint">
             <summary>The depth-wise reference plane of the bar.  Changing this shifts the
             bar without changing the work points of the bar.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SquareBar.AngleOfTwist">
             <summary>The angle (in radians) of twist from one end of the
             material to the other.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SquareBar.RollType">
             <summary>The type of roll on this material, or None if there is
             no roll on this material.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SquareBar.MidOrdinateRoll">
             <summary>The measurement from the center of the curved member to
             point halfway between the left and right end.  For Camber, this
             is the only valid value to set.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SquareBar.IncludedAngleRoll">
             <summary>The included angle of the rolling operation.  This can be set
             for any operation besides a camber roll</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SquareBar.RollingRadius">
             <summary>The rolling radius for any roll operation besides a camber roll.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SquareBar.SpiralRollOffset">
             <summary>The positive or negative distance that the right end
             will be offset from the right work point in the member's Z axis.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SquareBar.Ends">
             <summary>Information specific to the ends of the material.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SquareBar.AvailableSteelGrades">
             <summary>A list of steel grades, valid for SquareBar, which can be
             assigned to the Grade property of a SquareBar</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SquareBar.GetEnds">
             <summary>Information specific to the ends of the material.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SquareBar.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.ArcType">
             <summary>Enumerated curved grid arc types</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ArcType.Minor">
             <summary>Minor arc</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ArcType.Major">
             <summary>Major arc</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ArcType.Circle">
             <summary>Full circle</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.ColumnPlateWeldPattern">
             <summary>Weld pattern types for column base and cap plates</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ColumnPlateWeldPattern.Automatic">
             <summary>specifies that the system apply a setup choice
             (Job Setup &gt; Weld Design Settings &gt; "On base plate" or "On cap
             plate").</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ColumnPlateWeldPattern.TwoFaces">
             <summary>instructs the system to shop weld two opposite
             faces of the column to the user base/cap plate. For a wide
             flange, the outside face of one flange is welded, and the inside
             faces (NS and FS) of the other flange are welded.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ColumnPlateWeldPattern.AllFaces">
             <summary>configures the system to shop weld all faces except
             thickness edges and fillets and HSS corners. For HSS rectangular
             sections, only the outside faces are welded. For wide flange,
             both inside and outside faces are welded.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ColumnPlateWeldPattern.AllFacesWithSeal">
             <summary>gives the same results as 'All faces,' except that
             thickness edges and fillets and HSS corners are seal welded. Job
             Setup &gt; Weld Design Settings &gt; "Seal weld size" sets the weld
             size for the seal welds. The tail text applied during Detail
             Membersf for seal welds on HSS/TS columns is '4 SIDES WITH SEAL.'
             For columuns other than HSS/TS, the tail text is 'ALL FACES WITH
             SEAL.'</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ColumnPlateWeldPattern.AllAround">
             <summary>specifies that the system shop weld all faces of
             the column, including the thickness edges and fillets of a wide
             flange and the round corners of an HSS rectangular (tube).</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.RightOrLeftEnd">
             <summary>The right or left end of a member.  See documentation
             on property using it to see how it's used.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.RightOrLeftEnd.Left">
             <summary>The left end</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.RightOrLeftEnd.Right">
             <summary>The right end</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.Angle">
             <summary>An angle material</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Angle.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Angle.getCPtr(DesignData.SDS2.Model.Angle)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Angle.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Angle.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Angle.#ctor(DesignData.SDS2.Setup.AngleShape)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Angle.GetToeDirection">
             <summary>Determines which direction the flange of the angle
             point.  The flange being the "toe"</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Angle.GetLongLegVertical">
             <summary>Whether the longer leg of this material is point up or down.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Angle.GetGrade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Angle.GetAvailableSteelGrades">
             <summary>A list of steel grades, valid for Angle, which can be
             assigned to the Grade property of a Angle</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Angle.Grade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Angle.ToeDirection">
             <summary>Determines which direction the flange of the angle
             point.  The flange being the "toe"</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Angle.IsLongLegVertical">
             <summary>Whether the longer leg of this material is point up or down.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Angle.AvailableSteelGrades">
             <summary>A list of steel grades, valid for Angle, which can be
             assigned to the Grade property of a Angle</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.MemberEndBrief">
             <summary>
             The fixed length (rapid access) data on a member.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndBrief.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndBrief.getCPtr(DesignData.SDS2.Model.MemberEndBrief)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndBrief.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndBrief.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndBrief.GetLocation">
             <summary>
             The exact location of this member end, in global coordinates.
             </summary>
             <value>
             Exact point in global coordinates, in inches.
             </value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndBrief.GetAutoShearLoad">
             <summary>If true, then the system will calculate a default load
             based on setup values.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndBrief.GetShearLoad">
             <summary>The shear end reaction entered here -- under " Loads" --
             will be combined with the "Shear load" entered to the "Gusset
             Interface Forces" column and then will used in the design of the
             "System designed connection" on this end of the beam.</summary>
            
             <remarks>This can always be read, but can only be set if
             AutoShearLoad is false.
            
            
             For beam splices, connection design attempts to synchronize the
             shear load on each of the two beams being spliced so that each
             load is the same value. If one beam has an 'Auto' shear load and
             the other beam has a user-entered shear load, the load on both
             beam are set equal to the user-entered "Shear load."  If both
             beams have user-entered shear loads and those loads are not the
             same, the connection fails.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndBrief.GetStoryShearLoad">
             <summary>only valid for moment connections.
            
             An entry of '0' (zero) prevents the system from using story load
             in its calculations for moment connections on this end of the
             beam.
            
             A non-zero applies to the design of the connection on this end of
             a beam if this end of the beam frames to a column flange and "
             Moment" options have been applied.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndBrief.GetAutoMomentLoad">
             <summary>If true, then the system will calculate a default load
             based on setup values.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndBrief.GetMomentLoad">
             <summary>The moment entered here is used in the design of the
             connection on this end of the beam if " Moment" settings have
             been applied. This option is disabled (grayed-out) when the
             "Moment type" for this end is set to 'Non-moment,' unless the
             "User defined connection" for this end is a moment connection,
             for which case this field is enabled (editable). For moment
             splice plates, connection design attempts to synchronize the
             moment load on each of the two beams being spliced so that each
             load is the same value. If one beam has an 'Auto' moment load and
             the other beam has a user-entered moment load, the load on both
             beam are set equal to the user-entered "Moment load." If both
             beams have user-entered moment loads and those loads are not the
             same, the connection fails.</summary>
            
             <remarks>This can always be read, but can only be set if
             AutoMomentLoad is false.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndBrief.GetTensionLoad">
             <summary>A tension load tends to stretch a member in the direction of its length.
            
             An entry of '0' (zero) prevents the system from using tension in
             its calculations for the design of the connection on this end of
             the beam.
            
             A non-zero load will be combined with the "Tension load" entered
             to the "Gusset Interface Forces" column for use in the design of
             a clip angle or end plate or shear thru plate or single-plate
             shear (shear tab) connection. Before entering a load, see the
             warning.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndBrief.GetCompressionLoad">
             <summary>A compression load tends to compress or shorten the member.
            
             An entry of '0' (zero) prevents the system from using compression
             in its calculations for the design of the connection on this end
             of the beam.
            
             A non-zero load will be combined with the "Compression load"
             entered to the "Gusset Interface Forces" column for use in the
             design of a clip angle or end plate or shear thru plate or
             single-plate shear (shear tab) connection. Before entering a
             load, see the warning.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndBrief.GetAutoTieForce">
             <summary>If true, then the system will calculate a default load
             based on setup values.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndBrief.GetTieForce">
             <summary>This " Loads" option was is available for most "Connection design methods."
            
             An entry of '0' (zero) prevents the system from using the tying
             force to check the structural integrity of the connection on this
             end of the beam.
            
             A non-zero load instructs connection design to use this tying
             force to check the structural integrity of the connection on this
             end of the beam, as required by Section 1615 of the International
             Building Code (2015) for high-rise buildings.</summary>
            
             <remarks>This can always be read, but can only be set if
             AutoTieForce is false.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndBrief.GetAutoNonMomentBoltTypeToSupported">
             <summary>If true, then NonMomentBoltTypeToSupported is determined
             by the system based on setup values.  If false, then the user/API must set
             NonMomentBoltTypeToSupported</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndBrief.GetNonMomentBoltTypeToSupported">
             <summary>The type of bolt to use, when there is no moment, to fasten connection
             material to this (the supported) member</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndBrief.GetAutoNonMomentBoltTypeToSupporting">
             <summary>If true, then NonMomentBoltTypeToSupporting is determined
             by the system based on setup values.  If false, then the user/API must set
             NonMomentBoltTypeToSupporting</summary>
             <remarks>This field only applies to beam connections</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndBrief.GetNonMomentBoltTypeToSupporting">
             <summary>The type of bolt to use, when there is no moment, to fasten connection
             material to the supporting member.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndBrief.GetAutoNonMomentBoltDiameter">
             <summary>If true, then NonMomentBoltDiameter is determined by the system
             based on setup values.  If false, then the user/API must set
             NonMomentBoltDiameter.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndBrief.GetNonMomentBoltDiameter">
             <summary>The diameter of bolts to use when there is no moment</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndBrief.GetIsAutoPanelMomentLoad">
             <summary>If true, then the system will calculate a default panel moment load
                      based on setup values.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndBrief.GetPanelMomentLoad">
             <summary>If true, panel moment load is determined by this system.
                      Only applies to seismic frame members. If it is not seismic,
                      the moment load and panel moment load are the same. When framing
                      to another beam, this value will be 0. If it is a standard moment
                      connection to a column, this value is disabled, and the panel
                      moment load is the same as the moment load.</summary>
            
             <remarks>This can always be read, but can only be set if
                      AutoPanelMomentLoad is false.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndBrief.GetUseMiscPlatesList">
             <summary> If true, the sytem looks to the appropriate section in
             Fabricator Setup &gt; Standard Fabricator Connections &gt; Plates to
             determine the plate thicknesses to be used for end plates, shear
             plates, beam web doublers, column web doubler plates for moment
             connections, column stiffeners for moment connections, flange
             plates for bolted or welded moment connections, plates used for
             extended tees, web extension plates for extended clip angles,
             bent plates, plate seats, stiffeners for angle seats and splice
             plates. First the system calculates the thickness of the
             plate required to stand up to the load, then it chooses a plate
             from the list that is the calculated required thickness or the
             next thicker. If the plate from the list results in material
             interferences or too narrow a clearance or a thickness outside of
             AISC guidelines, the system fails the connection and gives
             you the failure message, "Suitable plate thickness not found."
            
             If false, the system rounds the calculated required thickness of
             plates as based on the load to the next 1/16 inch (or 1/8 inch if
             the calculated required thickness is greater than 5/16 inch).
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndBrief.GetMinimumSetupConnection">
             <summary>If all loads are set to auto, then the auto loads will match
             the capacity of the connection instead of the allowable loads</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndBrief.GetMinimumCopeDepth">
             <summary> Automatic specifies that the system create the
             connection on this end of the beam based on the choice made to
             Fabricator Setup &gt; Member Detailing Settings &gt; the
             "Beams" section &gt; "Provide minimum cope depth."
            
             Yes instructs the system to ignore the k distance of the
             supporting member when calculating the depth of the cope. This
             will provide a cope of minimum depth.
            
             No configures the system to cope the supported beam so
             that it clears the k distance of the supporting member.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberEndBrief.GetDisableFramingSituationChecks">
             <summary>When true, prevent the system from performing checks on
             the framing situation that impact this connection.  When false,
             the system will perform framing situation checks and adjust this
             connection for erectability purposes.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberEndBrief.Location">
             <summary>
             The exact location of this member end, in global coordinates.
             </summary>
             <value>
             Exact point in global coordinates, in inches.
             </value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberEndBrief.IsAutoShearLoad">
             <summary>If true, then the system will calculate a default load
             based on setup values.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberEndBrief.ShearLoad">
             <summary>The shear end reaction entered here -- under " Loads" --
             will be combined with the "Shear load" entered to the "Gusset
             Interface Forces" column and then will used in the design of the
             "System designed connection" on this end of the beam.</summary>
            
             <remarks>This can always be read, but can only be set if
             AutoShearLoad is false.
            
            
             For beam splices, connection design attempts to synchronize the
             shear load on each of the two beams being spliced so that each
             load is the same value. If one beam has an 'Auto' shear load and
             the other beam has a user-entered shear load, the load on both
             beam are set equal to the user-entered "Shear load."  If both
             beams have user-entered shear loads and those loads are not the
             same, the connection fails.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberEndBrief.StoryShearLoad">
             <summary>only valid for moment connections.
            
             An entry of '0' (zero) prevents the system from using story load
             in its calculations for moment connections on this end of the
             beam.
            
             A non-zero applies to the design of the connection on this end of
             a beam if this end of the beam frames to a column flange and "
             Moment" options have been applied.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberEndBrief.IsAutoMomentLoad">
             <summary>If true, then the system will calculate a default load
             based on setup values.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberEndBrief.MomentLoad">
             <summary>The moment entered here is used in the design of the
             connection on this end of the beam if " Moment" settings have
             been applied. This option is disabled (grayed-out) when the
             "Moment type" for this end is set to 'Non-moment,' unless the
             "User defined connection" for this end is a moment connection,
             for which case this field is enabled (editable). For moment
             splice plates, connection design attempts to synchronize the
             moment load on each of the two beams being spliced so that each
             load is the same value. If one beam has an 'Auto' moment load and
             the other beam has a user-entered moment load, the load on both
             beam are set equal to the user-entered "Moment load." If both
             beams have user-entered moment loads and those loads are not the
             same, the connection fails.</summary>
            
             <remarks>This can always be read, but can only be set if
             AutoMomentLoad is false.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberEndBrief.TensionLoad">
             <summary>A tension load tends to stretch a member in the direction of its length.
            
             An entry of '0' (zero) prevents the system from using tension in
             its calculations for the design of the connection on this end of
             the beam.
            
             A non-zero load will be combined with the "Tension load" entered
             to the "Gusset Interface Forces" column for use in the design of
             a clip angle or end plate or shear thru plate or single-plate
             shear (shear tab) connection. Before entering a load, see the
             warning.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberEndBrief.CompressionLoad">
             <summary>A compression load tends to compress or shorten the member.
            
             An entry of '0' (zero) prevents the system from using compression
             in its calculations for the design of the connection on this end
             of the beam.
            
             A non-zero load will be combined with the "Compression load"
             entered to the "Gusset Interface Forces" column for use in the
             design of a clip angle or end plate or shear thru plate or
             single-plate shear (shear tab) connection. Before entering a
             load, see the warning.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberEndBrief.IsAutoTieForce">
             <summary>If true, then the system will calculate a default load
             based on setup values.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberEndBrief.TieForce">
             <summary>This " Loads" option was is available for most "Connection design methods."
            
             An entry of '0' (zero) prevents the system from using the tying
             force to check the structural integrity of the connection on this
             end of the beam.
            
             A non-zero load instructs connection design to use this tying
             force to check the structural integrity of the connection on this
             end of the beam, as required by Section 1615 of the International
             Building Code (2015) for high-rise buildings.</summary>
            
             <remarks>This can always be read, but can only be set if
             AutoTieForce is false.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberEndBrief.IsAutoNonMomentBoltTypeToSupported">
             <summary>If true, then NonMomentBoltTypeToSupported is determined
             by the system based on setup values.  If false, then the user/API must set
             NonMomentBoltTypeToSupported</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberEndBrief.NonMomentBoltTypeToSupported">
             <summary>The type of bolt to use, when there is no moment, to fasten connection
             material to this (the supported) member</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberEndBrief.IsAutoNonMomentBoltTypeToSupporting">
             <summary>If true, then NonMomentBoltTypeToSupporting is determined
             by the system based on setup values.  If false, then the user/API must set
             NonMomentBoltTypeToSupporting</summary>
             <remarks>This field only applies to beam connections</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberEndBrief.NonMomentBoltTypeToSupporting">
             <summary>The type of bolt to use, when there is no moment, to fasten connection
             material to the supporting member.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberEndBrief.IsAutoNonMomentBoltDiameter">
             <summary>If true, then NonMomentBoltDiameter is determined by the system
             based on setup values.  If false, then the user/API must set
             NonMomentBoltDiameter.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberEndBrief.NonMomentBoltDiameter">
             <summary>The diameter of bolts to use when there is no moment</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberEndBrief.IsAutoPanelMomentLoad">
             <summary>If true, then the system will calculate a default panel moment load
                      based on setup values.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberEndBrief.PanelMomentLoad">
             <summary>If true, panel moment load is determined by this system.
                      Only applies to seismic frame members. If it is not seismic,
                      the moment load and panel moment load are the same. When framing
                      to another beam, this value will be 0. If it is a standard moment
                      connection to a column, this value is disabled, and the panel
                      moment load is the same as the moment load.</summary>
            
             <remarks>This can always be read, but can only be set if
                      AutoPanelMomentLoad is false.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberEndBrief.UseMiscPlatesList">
             <summary> If true, the sytem looks to the appropriate section in
             Fabricator Setup &gt; Standard Fabricator Connections &gt; Plates to
             determine the plate thicknesses to be used for end plates, shear
             plates, beam web doublers, column web doubler plates for moment
             connections, column stiffeners for moment connections, flange
             plates for bolted or welded moment connections, plates used for
             extended tees, web extension plates for extended clip angles,
             bent plates, plate seats, stiffeners for angle seats and splice
             plates. First the system calculates the thickness of the
             plate required to stand up to the load, then it chooses a plate
             from the list that is the calculated required thickness or the
             next thicker. If the plate from the list results in material
             interferences or too narrow a clearance or a thickness outside of
             AISC guidelines, the system fails the connection and gives
             you the failure message, "Suitable plate thickness not found."
            
             If false, the system rounds the calculated required thickness of
             plates as based on the load to the next 1/16 inch (or 1/8 inch if
             the calculated required thickness is greater than 5/16 inch).
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberEndBrief.MinimumSetupConnection">
             <summary>If all loads are set to auto, then the auto loads will match
             the capacity of the connection instead of the allowable loads</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberEndBrief.MinimumCopeDepth">
             <summary> Automatic specifies that the system create the
             connection on this end of the beam based on the choice made to
             Fabricator Setup &gt; Member Detailing Settings &gt; the
             "Beams" section &gt; "Provide minimum cope depth."
            
             Yes instructs the system to ignore the k distance of the
             supporting member when calculating the depth of the cope. This
             will provide a cope of minimum depth.
            
             No configures the system to cope the supported beam so
             that it clears the k distance of the supporting member.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.MemberEndBrief.DisableFramingSituationChecks">
             <summary>When true, prevent the system from performing checks on
             the framing situation that impact this connection.  When false,
             the system will perform framing situation checks and adjust this
             connection for erectability purposes.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.ReferenceObjectPerimeterLayout">
             <summary>A reference material formed by a planar list of points, a Layout3D,
             does not need to be a closed loop.</summary>
             <remarks>Bent plates cannot be modified and regenerated because their
             layout cannot be recovered.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ReferenceObjectPerimeterLayout.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ReferenceObjectPerimeterLayout.getCPtr(DesignData.SDS2.Model.ReferenceObjectPerimeterLayout)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ReferenceObjectPerimeterLayout.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ReferenceObjectPerimeterLayout.GetThickness">
             <summary>The thickness of the material.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ReferenceObjectPerimeterLayout.GetWidth">
             <summary>The width of the material.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ReferenceObjectPerimeterLayout.GetThicknessReferencePoint">
             <summary>The center plane of the material.  Changing this shifts the
             material without changing the work points of the material.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ReferenceObjectPerimeterLayout.GetLayout">
             <summary>Get the layout used to generate this material, in material
             coordinates. Mutations to the returned value do not change the
             material; SetLayout() must be used to modify the layout on the
             material.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ReferenceObjectPerimeterLayout.SetLayout(DesignData.SDS2.Primitives.Layout3D)">
             <summary>Set the layout used to generate this material, in material coordinates.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ReferenceObjectPerimeterLayout.ThicknessReferencePoint">
             <summary>The center plane of the material.  Changing this shifts the
             material without changing the work points of the material.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ReferenceObjectPerimeterLayout.Thickness">
             <summary>The thickness of the material.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ReferenceObjectPerimeterLayout.Width">
             <summary>The width of the material.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ReferenceObjectPerimeterLayout.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.StairStringerEndCondition">
             <summary>The options for stringer end conditions</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.StairStringerEndCondition.NoReturn">
             <summary>cuts the stair stringer vertically. The cut is in
             vertical alignment with the stair workpoint when SupportToWorkpoint
             and SetbackFromWorkpoint are 0.0 </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.StairStringerEndCondition.Return">
             <summary>adds a horizontal return, the length of which is based
             on the SupportToWorkpoint distance.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.StairStringerEndCondition.BoltToFloor">
             <summary>cuts the bottom end of the stair stringer so that it is
             horizontal and can, therefore, lay flat on a
             floor. BoltToFloorCearance may be set.  ClipWeb on the Rolled
             Section Material window can edit the cut that is made. For the
             top end, horizontal and vertical cuts are made to the stringer so
             that the top tread can be laid on the floor.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.StairStringerEndCondition.TopCap">
             <summary>cuts the top of the stringer flat and adds a top cap
             plate when the CapPlateThickness is a value greater than 0. The
             plate may be extended based on the SupportToWorkpoint.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.StairStringerEndCondition.ReturnDown">
                  
            </member>
        <member name="T:DesignData.SDS2.Model.Hole">
             <summary>A single hole on a material</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Hole.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Hole.getCPtr(DesignData.SDS2.Model.Hole)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Hole.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Hole.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Hole.GetHandle">
             <summary>The database handle for this object</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Hole.GetReferenceLocation">
             <summary>The reference location, in material coordinates, of the hole</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Hole.GetLength">
             <summary>The drill length of the hole</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Hole.GetHoleType">
             <summary>The kind of hole to drill</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Hole.GetSystemGenerated">
             <summary>Indicates if a hole was added by the system, during process, or if
             it was added by an interactive tool.  Holes created by custom members and components
             are considered system.</summary>
             <value>True if this hole was created by the system.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Hole.GetMatchable">
             <summary>Indicates if this hole can be used to "match" against other material,
             which would create a corresponding hole on that material in line with this hole.
             If this is false, then this hole will be ignored during hole matching.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Hole.GetBlind">
             <summary>A hole which is blind is one what isn't drilled all the way through the material.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Hole.GetCombineOnDetail">
             <summary>Indicates if this hole should be combined with others, when possible, on details.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Hole.GetPlugType">
             <summary>The plug type for this hole</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Hole.GetGroup">
             <summary>The group object for this hole, with properties shared
             by all holes in this group.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Hole.GetOperations">
             <summary>A list of all hole operations on this hole</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Hole.GetPoint1">
             <summary>The starting point where this hole is drilled, in material coordinates</summary>
             <remarks>This is the same as ReferenceLocation</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Hole.GetPoint2">
             <summary>The ending point where this hole is drilled, in material coordinates</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Hole.GetCustomPropertyMapHandle">
             <summary>
             A handle to the custom properties for this hole.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Hole.GetHashCode">
                 
            </member>
        <member name="M:DesignData.SDS2.Model.Hole.Equals(System.Object)">
            
            </member>
        <member name="P:DesignData.SDS2.Model.Hole.Handle">
             <summary>The database handle for this object</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Hole.ReferenceLocation">
             <summary>The reference location, in material coordinates, of the hole</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Hole.Length">
             <summary>The drill length of the hole</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Hole.HoleType">
             <summary>The kind of hole to drill</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Hole.IsSystemGenerated">
             <summary>Indicates if a hole was added by the system, during process, or if
             it was added by an interactive tool.  Holes created by custom members and components
             are considered system.</summary>
             <value>True if this hole was created by the system.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Hole.IsMatchable">
             <summary>Indicates if this hole can be used to "match" against other material,
             which would create a corresponding hole on that material in line with this hole.
             If this is false, then this hole will be ignored during hole matching.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Hole.IsBlind">
             <summary>A hole which is blind is one what isn't drilled all the way through the material.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Hole.CombineOnDetail">
             <summary>Indicates if this hole should be combined with others, when possible, on details.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Hole.PlugType">
             <summary>The plug type for this hole</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Hole.Operations">
             <summary>A list of all hole operations on this hole</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Hole.Point1">
             <summary>The starting point where this hole is drilled, in material coordinates</summary>
             <remarks>This is the same as ReferenceLocation</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Hole.Point2">
             <summary>The ending point where this hole is drilled, in material coordinates</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Hole.Group">
             <summary>The group object for this hole, with properties shared
             by all holes in this group.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Hole.CustomPropertyMapHandle">
             <summary>
             A handle to the custom properties for this hole.
             </summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.AttachmentMethodWithAutomatic">
             <summary>The method to attach connection material to supported or
             supporting material.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.AttachmentMethodWithAutomatic.Automatic">
             <summary>Bolted or welded is automatically determined during connection design</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.AttachmentMethodWithAutomatic.Bolted">
             <summary>Bolt it</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.AttachmentMethodWithAutomatic.Welded">
             <summary>Weld it</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.StairStringer">
             <summary>The left/right ns/fs stringer data for a stair</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairStringer.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairStringer.getCPtr(DesignData.SDS2.Model.StairStringer)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairStringer.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairStringer.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairStringer.GetEndCondition">
             <summary>The end condition for this stringer end, see StairStringerEndCondition
             documentation for more information</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairStringer.GetSupportToWorkpoint">
             <summary>The distance from the supporting member to the workpoint
             of the stair</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairStringer.GetSetbackFromWorkpoint">
             <summary>Additional setback (if positive shifts further from
             support, if negative shifts toward it) from the workpoint to the
             stringer</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairStringer.GetBoltToFloorClearanceAndCapSetback">
             <summary>The distance to set the bottom of the stringer back from the floor,
             only applicable if EndCondition is BoltToFloor</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairStringer.GetSlabToTopReturn">
             <summary>The vertical distance between the top of the slab and
             the top of the return steel.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairStringer.GetCopeDepthTop">
             <summary>The depth (vertical) of the L-shaped cut at the top of
             the return. This distance is measured parallel with the depth of
             the return material. A CopeDepthTop distance needs to be
             specified for both the left- and the right-end NS stringers and
             for both the left- and the right-end FS stringers.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairStringer.GetCopeLengthTop">
             <summary>The length (horizontal) of the L-shaped cut at the top
             of the return. This distance is measured parallel with the length
             of the return material. A CopeLengthTop distance needs to be
             specified for both the left- and the right-end NS stringers and
             for both the left- and the right-end FS stringers.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairStringer.GetCopeDepthBottom">
             <summary>The cope depth (vertical) required at the bottom of the
             return. A CopeDepthBottom distance needs to be specified for both
             the left- and the right-end NS stringers and for both the left-
             and the right-end FS stringers.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairStringer.GetCopeLengthBottom">
             <summary>The cope length (horizontal) required at the bottom of
             the return. A CopeLengthBottom distance needs to be specified
             for both the left- and the right-end NS stringers and for both
             the left- and the right-end FS stringers.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairStringer.GetCapPlateThickness">
             <summary>The thickness of the cap plate or, if applicable, the
             top cap. A thickness of '0' (zero) results in no cap plate or top
             cap. </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.StairStringer.EndCondition">
             <summary>The end condition for this stringer end, see StairStringerEndCondition
             documentation for more information</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.StairStringer.SupportToWorkpoint">
             <summary>The distance from the supporting member to the workpoint
             of the stair</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.StairStringer.SetbackFromWorkpoint">
             <summary>Additional setback (if positive shifts further from
             support, if negative shifts toward it) from the workpoint to the
             stringer</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.StairStringer.BoltToFloorClearanceAndCapSetback">
             <summary>The distance to set the bottom of the stringer back from the floor,
             only applicable if EndCondition is BoltToFloor</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.StairStringer.SlabToTopReturn">
             <summary>The vertical distance between the top of the slab and
             the top of the return steel.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.StairStringer.CopeDepthTop">
             <summary>The depth (vertical) of the L-shaped cut at the top of
             the return. This distance is measured parallel with the depth of
             the return material. A CopeDepthTop distance needs to be
             specified for both the left- and the right-end NS stringers and
             for both the left- and the right-end FS stringers.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.StairStringer.CopeLengthTop">
             <summary>The length (horizontal) of the L-shaped cut at the top
             of the return. This distance is measured parallel with the length
             of the return material. A CopeLengthTop distance needs to be
             specified for both the left- and the right-end NS stringers and
             for both the left- and the right-end FS stringers.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.StairStringer.CopeDepthBottom">
             <summary>The cope depth (vertical) required at the bottom of the
             return. A CopeDepthBottom distance needs to be specified for both
             the left- and the right-end NS stringers and for both the left-
             and the right-end FS stringers.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.StairStringer.CopeLengthBottom">
             <summary>The cope length (horizontal) required at the bottom of
             the return. A CopeLengthBottom distance needs to be specified
             for both the left- and the right-end NS stringers and for both
             the left- and the right-end FS stringers.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.StairStringer.CapPlateThickness">
             <summary>The thickness of the cap plate or, if applicable, the
             top cap. A thickness of '0' (zero) results in no cap plate or top
             cap. </summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.Washer">
             <summary>A washer, on a bolt</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Washer.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Washer.getCPtr(DesignData.SDS2.Model.Washer)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Washer.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Washer.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Washer.GetWasherType">
             <summary>the type of washer used</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Washer.GetThickness">
             <summary>The thickness of the washer.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Washer.GetWidth">
             <summary>The width of the washer.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Washer.GetRotation">
             <summary>The rotation of the washer, in radians.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Washer.GetQuantity">
             <summary>Indicates how many of this kind of washer to put in this position.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Washer.WasherType">
             <summary>the type of washer used</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Washer.Thickness">
             <summary>The thickness of the washer.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Washer.Width">
             <summary>The width of the washer.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Washer.Rotation">
             <summary>The rotation of the washer, in radians.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Washer.Quantity">
             <summary>Indicates how many of this kind of washer to put in this position.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="F:DesignData.SDS2.Model.MemberBriefList.swigCMemOwn">
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBriefList.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBriefList.Dispose(System.Boolean)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.MemberBriefList.MemberBriefListEnumerator">
             Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
             whenever the collection is modified. This has been done for changes in the size of the
             collection but not when one of the elements of the collection is modified as it is a bit
             tricky to detect unmanaged code that modifies the collection under our feet.
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBriefList.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBriefList.#ctor(DesignData.SDS2.Model.MemberBriefList)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.MemberBriefList.#ctor(System.Int32)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.MomentBoltPattern">
             <summary>The bolt pattern to use in a moment plate</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.MomentBoltPattern.EightBolt">
             <summary>applies only when ConnectionType is set to
             AISC_Eurocode. The moment connection is designed with a
             stiffener.  Adds 8 bolts around the flange of the beam.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.MomentBoltPattern.FourBolt">
             <summary>applies when ConnectionType is AISC_Eurocode or MBMA.
             For a moment plate extended above the top flange, two bolts are
             above the flange, and two bolts below the flange. For a moment
             plate that is flush with the flange, the four bolts are below the
             flange.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.MomentBoltPattern.TwoBolt">
             <summary>applies when ConnectionType is MBMA. The end plate is
             designed to be flush with both flanges. Two bolts directly
             beneath the top flange and two other bolts directly above the
             bottom flange fasten the plate to the column.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.MomentBoltPattern.HalfUnstiffened">
             <summary>applies when ConnectionType is MBMA. For a moment plate
             extended above the top flange, one bolt is above the flange on
             the near side of the web, and two bolts are below the flange on
             the near side of the web. A corresponding number of bolts are on
             the far side of the web.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.MomentBoltPattern.PlateBelowTensionBolts">
             <summary>applies when ConnectionType is MBMA.  The plate is flush
             with both flanges. For PlateLocation set to TopOnly, two
             rectangular stiffener plates (one NS, one FS) are designed below
             the four tension bolts under the top flange. This arrangement is
             mirrored for the bottom flange when PlateLocation is TopAndBottom.
             </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.MomentBoltPattern.PlateBetweenTensionBolts">
             <summary>applies when ConnectionType is MBMA. The plate is flush
             with both flanges. For PlateLocation set to TopOnly, two
             rectangular stiffener plates (one NS, one FS) are designed
             between the four tension bolts under the top flange. This
             arrangement is mirrored for the bottom flange when PlateLocation
             is TopAndBottom.
             </summary>.
            
            </member>
        <member name="F:DesignData.SDS2.Model.MomentBoltPattern.ThirdStiffened">
             <summary>applies when ConnectionType is MBMA.  For a moment plate
             extended above the top flange, one bolt is above the flange on
             the near side, and three bolts are below the flange on the near
             side. A corresponding number of bolts are on the far side of the
             plate. A rectangular stiffener is designed between the two bolts
             that are in the extension above the top flange.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.MomentBoltPattern.ThirdUnstiffened">
             <summary>applies when ConnectionType is MBMA.  For a moment plate
             extended above the top flange, one bolt is above the flange on
             the near side, and three bolts are below the flange on the near
             side. A corresponding number of bolts are on the far side of the
             plate. No stiffener plate is designed.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.ErectionBoltSpecification">
             <summary>
             A specification for the number of bolts used connecting
             a HSS wide flange brace to the gusset plate.
             </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ErectionBoltSpecification.Automatic">
             <summary>Use the number defined in setup.</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.ErectionBoltSpecification.None">
             <summary>No bolts</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.ErectionBoltSpecification.One">
             <summary>One bolt</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.ErectionBoltSpecification.Two">
             <summary>Two bolts</summary> 
            </member>
        <member name="T:DesignData.SDS2.Model.BentPlate">
             <summary>A bent steel plate.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlate.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlate.getCPtr(DesignData.SDS2.Model.BentPlate)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlate.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlate.GetOrderLength">
             <summary>The length of the plate as it would need to be ordered.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlate.GetWorkpointLength">
             <summary>The workpoint length of the plate.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlate.GetCentered">
             <summary>When Centered is true, the material origin is on the
             bend axis.  When Centered is false, the material origin is at
             outside intersection of the legs.  </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlate.GetBendAngle">
             <summary>Angle of leg2 where 0 is no bend.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlate.GetBendRadius">
             <summary>Radius of the bend.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlate.GetLeg1Length">
             <summary>Length of leg 1.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlate.GetLeg2Length">
             <summary>Length of leg 2.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlate.GetEnds">
             <summary>Objects to represent the ends of the plate along the
             length, corresponding to the workpoints.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BentPlate.OrderLength">
             <summary>The length of the plate as it would need to be ordered.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BentPlate.WorkpointLength">
             <summary>The workpoint length of the plate.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BentPlate.IsCentered">
             <summary>When Centered is true, the material origin is on the
             bend axis.  When Centered is false, the material origin is at
             outside intersection of the legs.  </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BentPlate.BendAngle">
             <summary>Angle of leg2 where 0 is no bend.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BentPlate.BendRadius">
             <summary>Radius of the bend.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BentPlate.Leg1Length">
             <summary>Length of leg 1.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BentPlate.Leg2Length">
             <summary>Length of leg 2.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BentPlate.Ends">
             <summary>Objects to represent the ends of the plate along the
             length, corresponding to the workpoints.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlate.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.PlainEndSpecification">
             <summary>This tells the system not to design a connection.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.PlainEndSpecification.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.PlainEndSpecification.getCPtr(DesignData.SDS2.Model.PlainEndSpecification)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.PlainEndSpecification.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.PlainEndSpecification.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.AttachToMember">
             <summary>Which member to ship the connection material with</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.AttachToMember.Supporting">
             <summary>The member supporting this connection.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.AttachToMember.Supported">
             <summary>The member supported by this connection</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.IRollingOperationSwigImpl">
              
            </member>
        <member name="M:DesignData.SDS2.Model.IRollingOperationSwigImpl.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.IRollingOperationSwigImpl.getCPtr(DesignData.SDS2.Model.IRollingOperationSwigImpl)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.IRollingOperationSwigImpl.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.IRollingOperationSwigImpl.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.IRollingOperationSwigImpl.GetRollType">
             <summary>The type of roll on this material, or None if there is
             no roll on this material.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.IRollingOperationSwigImpl.GetMidOrdinateRoll">
             <summary>The measurement from the center of the curved member to
             point halfway between the left and right end.  For Camber, this
             is the only valid value to set.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.IRollingOperationSwigImpl.GetIncludedAngleRoll">
             <summary>The included angle of the rolling operation.  This can be set
             for any operation besides a camber roll</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.IRollingOperationSwigImpl.GetRollingRadius">
             <summary>The rolling radius for any roll operation besides a camber roll.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.IRollingOperationSwigImpl.GetSpiralRollOffset">
             <summary>The positive or negative distance that the right end
             will be offset from the right work point in the member's Z axis.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.IRollingOperationSwigImpl.GetAngleOfTwist">
             <summary>The angle (in radians) of twist from one end of the
             material to the other.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.IRollingOperationSwigImpl.GetLayout">
             <summary>Get the layout used to generate this
             RolledShapeMaterial. This value may be null. Mutations to the
             returned value do not change the material; SetLayout() must be
             used to modify the layout on the material.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.IRollingOperationSwigImpl.SetLayout(DesignData.SDS2.Primitives.Layout3D)">
             <summary>Set the layout used to generate this material.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.IRollingOperationSwigImpl.RollType">
             <summary>The type of roll on this material, or None if there is
             no roll on this material.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.IRollingOperationSwigImpl.MidOrdinateRoll">
             <summary>The measurement from the center of the curved member to
             point halfway between the left and right end.  For Camber, this
             is the only valid value to set.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.IRollingOperationSwigImpl.IncludedAngleRoll">
             <summary>The included angle of the rolling operation.  This can be set
             for any operation besides a camber roll</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.IRollingOperationSwigImpl.RollingRadius">
             <summary>The rolling radius for any roll operation besides a camber roll.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.IRollingOperationSwigImpl.SpiralRollOffset">
             <summary>The positive or negative distance that the right end
             will be offset from the right work point in the member's Z axis.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.IRollingOperationSwigImpl.AngleOfTwist">
             <summary>The angle (in radians) of twist from one end of the
             material to the other.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.FlushFramedShearSpecification">
             <summary>
             A flush framed shear connection for joists.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlushFramedShearSpecification.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlushFramedShearSpecification.getCPtr(DesignData.SDS2.Model.FlushFramedShearSpecification)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlushFramedShearSpecification.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlushFramedShearSpecification.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlushFramedShearSpecification.GetAttachToMember">
             <summary>Which member to attach connection material to, supported
             or supporting.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlushFramedShearSpecification.GetSide">
             <summary>Which side of the supported member to put the shear
             plate on.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlushFramedShearSpecification.GetExtendPastFlange">
             <summary>Set the supported beam back beyond the flange of the
             supporting column (when connecting to the column web) if true.
             If false, clip the supported beam so that it fits inside the
             column flange.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlushFramedShearSpecification.GetExtendToWebByForce">
             <summary>Only applies if ExtendPastFlange is true.  If true, this
             will force the stabilizer plates to be extended to the web.  If
             false, the system will decide if that is necessary and do so if
             required.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlushFramedShearSpecification.GetUseStiffenerOppositeShearTab">
             <summary>If true, put a stiffener on the opposite the shear tab
             when framing into the web of a beam</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlushFramedShearSpecification.GetUseExpandedVerticalBoltSpacing">
             <summary>Applies to 'Non-moment' shear plates or shear tees to a
             beam or a column.  If Yes, permits the system to expand the
             vertical spacing of bolts to 1.5 times or 2 times the Fabricator
             Setup &gt; Connection Detailing/Fabricator Options &gt; "Bolt spacing"
             that is set per bolt diameter. The system may also adjust to a
             spacing other than 1.5 or 2 times the standard bolt spacing in
             order to accommodate piecemarking issues, loading conditions and
             unusual geometries.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlushFramedShearSpecification.GetTryTwoBoltColumnShearTabs">
             <summary>
             If set to true, connection attempts to create a non-moment shear
             plate with two columns of bolts.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlushFramedShearSpecification.GetSkewPlateHoles">
             <summary>If set to yes, the rows of holes will be parallel with
             the supported beam flange.  If set to no, they will be parallel
             with the supporting column.  Automatic will pull this setting
             from setup.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlushFramedShearSpecification.GetUseBackupBar">
             <summary>Applies to skewed beam-to-beam or beam-to-column
             single-plate shear connections with angles to the supported
             member of less than 45 degrees. Standard AISC practices call for
             a back-up bar to be used for such welds.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlushFramedShearSpecification.GetUseAlternateEccentricity">
             <summary>Applies when 'ASD13' or 'LRFD13' or a newer AISC method
             is the "Connection design method." It applies to " Extend past
             flange" shear connections. Per the AISC 13th Edition, p 10-103
             and AISC 14th Edition, p 10-104, "alternate considerations of the
             design eccentricity are acceptable when justified by rational
             analysis.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlushFramedShearSpecification.GetAxialLoadCheck">
             <summary> The "Supporting member web stress" will be reported as
             a "Left/Right end limit state" when a "Tension load" has been
             applied to the supported beam's shear plate connection end. This
             option affects whether or not that limit state is incorporated as
             a check within connection design that can potentially cause the
             shear plate connection to fail</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlushFramedShearSpecification.GetBevelShearTab">
             <summary>Per AISC, beveling of a 5/16- to 3/8-inch shear plate is
             required when the dihedral angle is between 45 and 60 degrees. A
             1/2-inch shear plate is required to be beveled from 22° to 45°
             from perpendicular.  Yes will bevel as needed, where No will
             never bevel.  Automatic pulls this option from setup.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlushFramedShearSpecification.GetExtendBottomChord">
             <summary>If true, the bottom chord of the joist is extended and
             "Bottom chord" is set to ' Auto' so that the appropriate field
             clearance is applied. "Stabilizing material" is optional.
            
             If false, you can still apply a "Bottom chord" setback to get a
             bottom chord. However, "Stabilizing material" cannot be
             applied.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlushFramedShearSpecification.GetStabilizingMaterial">
             <summary>None results in no joist bottom chord stabilizing
             material being created by the system.
            
             Angle instructs the system to use the Fabricator Setup &gt; Standard
             Fabricator Connections &gt; "Bottom chord extension seat angle" as
             the angle seat for the extended bottom chord.
            
             Plate instructs the system to use the Fabricator Setup &gt;
             Standard Fabricator Connections &gt; "Bottom chord extension plate"
             as the stabilizing material for the extended bottom chord. Per
             the OSHA standard, the plate includes a 13/16 inch (21 mm) hole
             (click here) for guying or plumbing cables. The hole is placed 1
             1/2 inch from the bottom edge and joist edge of the plate.</summary>
            
             <remarks>Only valid of ExtendBottomChord is true</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlushFramedShearSpecification.GetUseErectionHole">
             <summary> Automatic instructs the system to use the entry
             ('Yes' or 'No') that is made to the relevant cell in Fabricator
             Setup &gt; Standard Fabricator Connections &gt; Joist Setup &gt; "Use
             erection hole" on the "Joist type specific settings" table. That
             setup table can configure an erection hole to be used or not used
             on a per-joist-type basis.
            
             Yes instructs the system to add a hole for guying or plumbing
             cables to the bottom chord stabilizer plate. Per OSHA, the hole
             is placed 1 1/2 inch from the bottom edge and joist edge of the
             plate. A connection design lock for specifying the "Erection hole
             diameter" is made available in the " Joist Stabilizer Plate"
             leaf.
            
             No instructs the system to not add an erection hole.</summary>
            
             <remarks>Only valid if StabilizingMaterial is set to Plate</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlushFramedShearSpecification.GetUseVerticalStabilizerAngle">
             <summary> If true, the bottom chord stabilizer angle is oriented
             with both legs vertical. That angle is vertically centered with
             respect to the bottom of the joist bottom chord.
            
             If false, the stabilizer angle is oriented so that one leg is
             horizontal so that it can support the joist bottom chord.</summary>
            
             <remarks>Only valid if StabilizingMaterial is set to Angle</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.FlushFramedShearSpecification.AttachToMember">
             <summary>Which member to attach connection material to, supported
             or supporting.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.FlushFramedShearSpecification.Side">
             <summary>Which side of the supported member to put the shear
             plate on.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.FlushFramedShearSpecification.ExtendPastFlange">
             <summary>Set the supported beam back beyond the flange of the
             supporting column (when connecting to the column web) if true.
             If false, clip the supported beam so that it fits inside the
             column flange.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.FlushFramedShearSpecification.ExtendToWebByForce">
             <summary>Only applies if ExtendPastFlange is true.  If true, this
             will force the stabilizer plates to be extended to the web.  If
             false, the system will decide if that is necessary and do so if
             required.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.FlushFramedShearSpecification.UseStiffenerOppositeShearTab">
             <summary>If true, put a stiffener on the opposite the shear tab
             when framing into the web of a beam</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.FlushFramedShearSpecification.UseExpandedVerticalBoltSpacing">
             <summary>Applies to 'Non-moment' shear plates or shear tees to a
             beam or a column.  If Yes, permits the system to expand the
             vertical spacing of bolts to 1.5 times or 2 times the Fabricator
             Setup &gt; Connection Detailing/Fabricator Options &gt; "Bolt spacing"
             that is set per bolt diameter. The system may also adjust to a
             spacing other than 1.5 or 2 times the standard bolt spacing in
             order to accommodate piecemarking issues, loading conditions and
             unusual geometries.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.FlushFramedShearSpecification.TryTwoBoltColumnShearTabs">
             <summary>
             If set to true, connection attempts to create a non-moment shear
             plate with two columns of bolts.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.FlushFramedShearSpecification.SkewPlateHoles">
             <summary>If set to yes, the rows of holes will be parallel with
             the supported beam flange.  If set to no, they will be parallel
             with the supporting column.  Automatic will pull this setting
             from setup.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.FlushFramedShearSpecification.UseBackupBar">
             <summary>Applies to skewed beam-to-beam or beam-to-column
             single-plate shear connections with angles to the supported
             member of less than 45 degrees. Standard AISC practices call for
             a back-up bar to be used for such welds.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.FlushFramedShearSpecification.UseAlternateEccentricity">
             <summary>Applies when 'ASD13' or 'LRFD13' or a newer AISC method
             is the "Connection design method." It applies to " Extend past
             flange" shear connections. Per the AISC 13th Edition, p 10-103
             and AISC 14th Edition, p 10-104, "alternate considerations of the
             design eccentricity are acceptable when justified by rational
             analysis.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.FlushFramedShearSpecification.AxialLoadCheck">
             <summary> The "Supporting member web stress" will be reported as
             a "Left/Right end limit state" when a "Tension load" has been
             applied to the supported beam's shear plate connection end. This
             option affects whether or not that limit state is incorporated as
             a check within connection design that can potentially cause the
             shear plate connection to fail</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.FlushFramedShearSpecification.BevelShearTab">
             <summary>Per AISC, beveling of a 5/16- to 3/8-inch shear plate is
             required when the dihedral angle is between 45 and 60 degrees. A
             1/2-inch shear plate is required to be beveled from 22° to 45°
             from perpendicular.  Yes will bevel as needed, where No will
             never bevel.  Automatic pulls this option from setup.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.FlushFramedShearSpecification.ExtendBottomChord">
             <summary>If true, the bottom chord of the joist is extended and
             "Bottom chord" is set to ' Auto' so that the appropriate field
             clearance is applied. "Stabilizing material" is optional.
            
             If false, you can still apply a "Bottom chord" setback to get a
             bottom chord. However, "Stabilizing material" cannot be
             applied.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.FlushFramedShearSpecification.StabilizingMaterial">
             <summary>None results in no joist bottom chord stabilizing
             material being created by the system.
            
             Angle instructs the system to use the Fabricator Setup &gt; Standard
             Fabricator Connections &gt; "Bottom chord extension seat angle" as
             the angle seat for the extended bottom chord.
            
             Plate instructs the system to use the Fabricator Setup &gt;
             Standard Fabricator Connections &gt; "Bottom chord extension plate"
             as the stabilizing material for the extended bottom chord. Per
             the OSHA standard, the plate includes a 13/16 inch (21 mm) hole
             (click here) for guying or plumbing cables. The hole is placed 1
             1/2 inch from the bottom edge and joist edge of the plate.</summary>
            
             <remarks>Only valid of ExtendBottomChord is true</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.FlushFramedShearSpecification.UseErectionHole">
             <summary> Automatic instructs the system to use the entry
             ('Yes' or 'No') that is made to the relevant cell in Fabricator
             Setup &gt; Standard Fabricator Connections &gt; Joist Setup &gt; "Use
             erection hole" on the "Joist type specific settings" table. That
             setup table can configure an erection hole to be used or not used
             on a per-joist-type basis.
            
             Yes instructs the system to add a hole for guying or plumbing
             cables to the bottom chord stabilizer plate. Per OSHA, the hole
             is placed 1 1/2 inch from the bottom edge and joist edge of the
             plate. A connection design lock for specifying the "Erection hole
             diameter" is made available in the " Joist Stabilizer Plate"
             leaf.
            
             No instructs the system to not add an erection hole.</summary>
            
             <remarks>Only valid if StabilizingMaterial is set to Plate</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.FlushFramedShearSpecification.UseVerticalStabilizerAngle">
             <summary> If true, the bottom chord stabilizer angle is oriented
             with both legs vertical. That angle is vertically centered with
             respect to the bottom of the joist bottom chord.
            
             If false, the stabilizer angle is oriented so that one leg is
             horizontal so that it can support the joist bottom chord.</summary>
            
             <remarks>Only valid if StabilizingMaterial is set to Angle</remarks>
            
            </member>
        <member name="T:DesignData.SDS2.Model.NoteComment">
             <summary>
             Notes are for authoring and reviewing comments related the the model or to the project.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.NoteComment.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.NoteComment.getCPtr(DesignData.SDS2.Model.NoteComment)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.NoteComment.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.NoteComment.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.NoteComment.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.NoteComment.#ctor(DesignData.SDS2.Model.NoteComment)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.NoteComment.GetDate">
             <summary>The date information associated with a comment</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.NoteComment.SetDateNow">
             <summary>Set the Date string to the formatted current local time</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.NoteComment.GetAuthor">
             <summary>The author information associated with a comment</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.NoteComment.SetAuthorUser">
             <summary>Set the Author string to the user's name</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.NoteComment.GetComment">
             <summary>The comment information associated with a comment</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.NoteComment.Date">
             <summary>The date information associated with a comment</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.NoteComment.Author">
             <summary>The author information associated with a comment</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.NoteComment.Comment">
             <summary>The comment information associated with a comment</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.LockableBasePlateWeldWithoutGroove">
             <summary>Lockable value for BasePlateWeldWithoutGroove</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBasePlateWeldWithoutGroove.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBasePlateWeldWithoutGroove.getCPtr(DesignData.SDS2.Model.LockableBasePlateWeldWithoutGroove)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBasePlateWeldWithoutGroove.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBasePlateWeldWithoutGroove.#ctor">
                  
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBasePlateWeldWithoutGroove.GetValue">
             <summary>The underlying value</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBasePlateWeldWithoutGroove.#ctor(DesignData.SDS2.Model.BasePlateWeldWithoutGroove)">
             <summary>Create a locked ViaMemberEdit LockableBasePlateWeldWithoutGroove from a BasePlateWeldWithoutGroove</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBasePlateWeldWithoutGroove.op_Implicit(DesignData.SDS2.Model.BasePlateWeldWithoutGroove)~DesignData.SDS2.Model.LockableBasePlateWeldWithoutGroove">
             <summary>Implicit conversion using the BasePlateWeldWithoutGroove constructor</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBasePlateWeldWithoutGroove.op_Implicit(DesignData.SDS2.Model.LockableBasePlateWeldWithoutGroove)~DesignData.SDS2.Model.BasePlateWeldWithoutGroove">
             <summary>Implicit conversion to value type</summary>
            </member>
        <member name="P:DesignData.SDS2.Model.LockableBasePlateWeldWithoutGroove.Value">
             <summary>The underlying value</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.ClipAngleSpecification">
             <summary>A clip angle connection</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipAngleSpecification.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipAngleSpecification.getCPtr(DesignData.SDS2.Model.ClipAngleSpecification)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipAngleSpecification.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipAngleSpecification.#ctor">
                  
            </member>
        <member name="M:DesignData.SDS2.Model.ClipAngleSpecification.GetGage">
             <summary>Specify whether this is a heavy, wide, or narrow gage clip</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipAngleSpecification.GetAttachmentMethodToSupported">
             <summary>How to attach the connection to the beam being supported</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipAngleSpecification.GetAttachToMember">
             <summary>How to attach the connection to the supporting member</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipAngleSpecification.GetUseSafetyConnection">
             <summary>applies to clip angles on two opposing beams on opposite
             sides of a supporting web (beam or column) so that the clip angle
             connections on both supported beams share bolts.
            
             If true, specifies that the clip angles be designed so that one
             bolt on each angle is shared by the beam and column but not
             shared by the clip angle of the opposing beam. Whether the clip
             angles on a beam are vertically offset with respect to the angles
             on the opposing beam or staggered with respect to each other
             depends on the choice made to Fabricator Setup &gt; Clip Angle Settings
             &gt; "Safety connection angles."</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipAngleSpecification.GetUseWebExtensionPlate">
             <summary>can apply to a clip angle on a beam framing to a
             column. Regardless of the choice made here, " Web Extension
             Plate" the system locks are available. These locks have
             null values (distances of 0) if a web extehension plate is not
             required and when 'Never' is specified.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipAngleSpecification.GetWeldedExtendedTee">
             <summary>can apply to a wide flange, welded plate wide flange or
             channel beam with a clip angle connection framing perpendicular
             or sloping to a supporting beam.
            
             If true, generates a built-up tee (two plates welded together)
             for the clip angles to bolt to. The check box for "Full depth
             extended tee" controls (for some framing situations) whether the
             tee will be designed to the depth of the connection or to the
             full depth of the supporting beam.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipAngleSpecification.GetReplaceDoublerWithLargerClip">
             <summary>If true, and web doublers are required, connection
             design looks for an angle in Fabricator Setup &gt; Standard
             Fabricator Connections &gt; Angles. If an angle is not found,
             the system fails the connection, and the Beam Edit window
             displays the following failure message: Option to replace web
             doubler with large clip L fails.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipAngleSpecification.GetFullDepthTee">
             <summary>If true, the system creates a built-up tee that is the
             full depth of the supporting beam.
            
             If false, the built-up tee is designed to the depth of the
             connection if the top and bottom flanges of the supported beam
             (this beam) are entirely below or entirely above the half-depth
             of the supporting beam. If the depth of the supported beam is
             greater than half the depth of the supporting beam, the built-up
             tee is designed to the full depth of the supporting beam.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipAngleSpecification.GetUsePaddlePlate">
             <summary>applies when an HSS/TS beam frames to a column or a
             beam. It permits the design of bolted-bolted or bolted-welded
             clip angles. The option is disabled (grayed out) when -- here in
             " Connection specifications" -- the clip angle's "Attachment to
             supported" is set to 'Welded.'
            
             If true, the clip angles weld or bolt to the supporting member
             and bolt to the paddle plate, which shop welds to the supported
             beam. The end of the supported beam is notched for insertion of
             the paddle plate.
            
             If false, the clip angles attach to the outside walls of the
             supported HSS rectangular beam.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipAngleSpecification.GetAttachmentMethodToSupporting">
             <summary>How to attach the connection to the supporting member</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipAngleSpecification.GetStagger">
             <summary>See documentation on the returned ClipAngleStagger enumeration</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipAngleSpecification.GetFlangePlatesOn">
             <summary>applies only for moment connections.
            
             This specifies which of the two connections that share flange
             plates will get the plates.  Either the beam where the connection
             is on the right end, or the beam where the connection is on the
             left end.  Both connections should have the same value for
             this.</summary>
            
             <remarks>This does not take swapped member ends
             into account</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipAngleSpecification.GetSide">
             <summary>Which side of the supported member to put clip angles
             on, or both.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipAngleSpecification.GetSkewHolesInAngle">
             <summary>applies to bolted clip angles on sloping beams when the
             box is checked for Fabricator Setup &gt; Member Detailing Settings.
             &gt; the "Beams" section &gt; " Square cut ends of
             sloped beams."
            
             Automatic specifies that connection design apply the choice made
             to Fabricator Setup &gt; Standard Fabricator Connections &gt; Clip
             Angle Setup &gt; "Skew holes in clip angles."
            
            
             Yes instructs the system to create clip angles with bolts
             skewed in the leg to the supported beam's web so that the bolts
             run perpendicular to the beam's flanges.
            
             No instructs the system to create clip angles with bolts that run
             parallel to the length of the angle.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipAngleSpecification.GetCombineBeamAndVBraceClipAngles">
             <summary>applies when this end of this beam has a clip angle
             connection and a vertical brace frames to this beam and to the
             same column that this beam frames to. In such a framing
             situation, connection design can create one or two pairs of clip
             angles.
            
             Automatic specifies that connection design apply the choice made
             to Fabricator Setup &gt; Standard Fabricator Connections &gt; Clip
             Angle Setup &gt; "Combine beam and vertical brace clip angles."
            
             Yes instructs connection design to create a single pair of clip
             angles that connects both the beam and vertical brace gusset
             plate to the column. The clip angles use the "NM bolt diameter"
             and "NM bolt type to supported" and "NM bolt type to supporting"
             that are set for the beam.
            
             No instructs connection design to create two separate pairs of
             clip angles, one pair to connect the beam to the column, the
             other pair to connect the vertical brace gusset plate to the
             column.  </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipAngleSpecification.GetUseExpandedVerticalBoltSpacing">
             <summary>can apply to a beam with clip angles to a beam or column
             so long as the "Moment type" is set to 'Non-moment' in the beam
             end's " Moment" leaf.
            
             Automatic specifies that connection design apply the choice made
             to Fabricator Setup &gt; Standard Fabricator Connections &gt; Clip
             Angle Setup &gt; "Use expanded vertical bolt spacing."
            
             Yes permits connection design to expand the vertical spacing of
             bolts to 1.5 times or 2 times the Fabricator Setup &gt; Connection
             Detailing/Fabricator Options &gt; "Bolt spacing" that is set per
             bolt diameter. The program may also adjust to a spacing other
             than 1.5 or 2 times the standard bolt spacing in order to
             accommodate piecemarking issues, loading conditions and unusual
             geometries.
            
             No instructs connection design to use the Fabricator Setup &gt;
             Connection Erectability Settings &gt; "Bolt spacing" that is
             set per bolt diameter.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipAngleSpecification.GetEmbedLocation">
             <summary> can apply when a beam frames to a concrete wall and the
             beam's "Input connection type" is 'Clip angle' and an "Embed
             schedule entry" has been made in the " Connection type" leaf. The
             option can also be found in Job Setup &gt; Auto Standard Connections
             and in Job Setup &gt; User Defined Connections.
            
            
             Automatic instructs connection design to apply the choice made to
             Concrete Setup &gt; Embed Schedule &gt; "Plate location."
            
             InsideWall embeds the plate in the concrete wall.
            
             OutsideWall locates the plate flush to the wall.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ClipAngleSpecification.GetUseErectionBolts">
             <summary>applies when both "Attachment to supported" and
             "Attachment to supporting" are set to 'Welded.' In other words,
             it applies to all-welded clip angles.
            
            
             Automatic specifies that connection design apply the choice made
             to Fabricator Setup &gt; Standard Fabricator Connections &gt; Attached
             to Supporting Member &gt; "Provide erection bolts" If "Attached to"
             (on this window) is set to 'Supporting.' If "Attached to" is set
             to 'Supported,' then connection design applies the choice made to
             Fabricator Setup &gt; Standard Fabricator Connections &gt; Attached to
             Supported Member &gt; "Provide erection bolts."
            
             Yes instructs connection design to design the welded-welded
             double clip angle connection with erection bolts to facilitate
             the field welding of the connection. The erection bolts are field
             bolts. For a beam end connection that is not auto standard, the
             bolts are the " Connection type" &gt; "NM bolt type to supporting"
             (or "NM bolt type to supported") and "NM bolt diameter" that are
             specified for that beam connection's end. For an auto standard
             beam connection, the bolts are the "NM bolt type" and "NM bolt
             diameter" that are specified for the relevant framing condition
             in Fabricator Setup &gt; Auto Standard Connections. If the
             welded-welded clip angle shop welds to the supporting, two
             erection bolts are provided. If it shop welds to the supported,
             four erection bolts are provided, two for the NS OSL, two for the
             FS OSL.
            
             No instructs connection design to design the welded-welded double
             clip angle without erection bolts.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ClipAngleSpecification.Gage">
             <summary>Specify whether this is a heavy, wide, or narrow gage clip</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ClipAngleSpecification.AttachmentMethodToSupported">
             <summary>How to attach the connection to the beam being supported</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ClipAngleSpecification.AttachToMember">
             <summary>How to attach the connection to the supporting member</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ClipAngleSpecification.UseSafetyConnection">
             <summary>applies to clip angles on two opposing beams on opposite
             sides of a supporting web (beam or column) so that the clip angle
             connections on both supported beams share bolts.
            
             If true, specifies that the clip angles be designed so that one
             bolt on each angle is shared by the beam and column but not
             shared by the clip angle of the opposing beam. Whether the clip
             angles on a beam are vertically offset with respect to the angles
             on the opposing beam or staggered with respect to each other
             depends on the choice made to Fabricator Setup &gt; Clip Angle Settings
             &gt; "Safety connection angles."</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ClipAngleSpecification.UseWebExtensionPlate">
             <summary>can apply to a clip angle on a beam framing to a
             column. Regardless of the choice made here, " Web Extension
             Plate" the system locks are available. These locks have
             null values (distances of 0) if a web extehension plate is not
             required and when 'Never' is specified.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ClipAngleSpecification.ExtendPastFlange">
             <summary>can apply to a clip angle on a beam framing to a
             column. Regardless of the choice made here, " Web Extension
             Plate" the system locks are available. These locks have
             null values (distances of 0) if a web extehension plate is not
             required and when 'Never' is specified.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ClipAngleSpecification.IsWeldedExtendedTee">
             <summary>can apply to a wide flange, welded plate wide flange or
             channel beam with a clip angle connection framing perpendicular
             or sloping to a supporting beam.
            
             If true, generates a built-up tee (two plates welded together)
             for the clip angles to bolt to. The check box for "Full depth
             extended tee" controls (for some framing situations) whether the
             tee will be designed to the depth of the connection or to the
             full depth of the supporting beam.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ClipAngleSpecification.ReplaceDoublerWithLargerClip">
             <summary>If true, and web doublers are required, connection
             design looks for an angle in Fabricator Setup &gt; Standard
             Fabricator Connections &gt; Angles. If an angle is not found,
             the system fails the connection, and the Beam Edit window
             displays the following failure message: Option to replace web
             doubler with large clip L fails.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ClipAngleSpecification.IsFullDepthTee">
             <summary>If true, the system creates a built-up tee that is the
             full depth of the supporting beam.
            
             If false, the built-up tee is designed to the depth of the
             connection if the top and bottom flanges of the supported beam
             (this beam) are entirely below or entirely above the half-depth
             of the supporting beam. If the depth of the supported beam is
             greater than half the depth of the supporting beam, the built-up
             tee is designed to the full depth of the supporting beam.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ClipAngleSpecification.UsePaddlePlate">
             <summary>applies when an HSS/TS beam frames to a column or a
             beam. It permits the design of bolted-bolted or bolted-welded
             clip angles. The option is disabled (grayed out) when -- here in
             " Connection specifications" -- the clip angle's "Attachment to
             supported" is set to 'Welded.'
            
             If true, the clip angles weld or bolt to the supporting member
             and bolt to the paddle plate, which shop welds to the supported
             beam. The end of the supported beam is notched for insertion of
             the paddle plate.
            
             If false, the clip angles attach to the outside walls of the
             supported HSS rectangular beam.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ClipAngleSpecification.AttachmentMethodToSupporting">
             <summary>How to attach the connection to the supporting member</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ClipAngleSpecification.Stagger">
             <summary>See documentation on the returned ClipAngleStagger enumeration</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ClipAngleSpecification.FlangePlatesOn">
             <summary>applies only for moment connections.
            
             This specifies which of the two connections that share flange
             plates will get the plates.  Either the beam where the connection
             is on the right end, or the beam where the connection is on the
             left end.  Both connections should have the same value for
             this.</summary>
            
             <remarks>This does not take swapped member ends
             into account</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ClipAngleSpecification.Side">
             <summary>Which side of the supported member to put clip angles
             on, or both.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ClipAngleSpecification.SkewHolesInAngle">
             <summary>applies to bolted clip angles on sloping beams when the
             box is checked for Fabricator Setup &gt; Member Detailing Settings.
             &gt; the "Beams" section &gt; " Square cut ends of
             sloped beams."
            
             Automatic specifies that connection design apply the choice made
             to Fabricator Setup &gt; Standard Fabricator Connections &gt; Clip
             Angle Setup &gt; "Skew holes in clip angles."
            
            
             Yes instructs the system to create clip angles with bolts
             skewed in the leg to the supported beam's web so that the bolts
             run perpendicular to the beam's flanges.
            
             No instructs the system to create clip angles with bolts that run
             parallel to the length of the angle.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ClipAngleSpecification.CombineBeamAndVBraceClipAngles">
             <summary>applies when this end of this beam has a clip angle
             connection and a vertical brace frames to this beam and to the
             same column that this beam frames to. In such a framing
             situation, connection design can create one or two pairs of clip
             angles.
            
             Automatic specifies that connection design apply the choice made
             to Fabricator Setup &gt; Standard Fabricator Connections &gt; Clip
             Angle Setup &gt; "Combine beam and vertical brace clip angles."
            
             Yes instructs connection design to create a single pair of clip
             angles that connects both the beam and vertical brace gusset
             plate to the column. The clip angles use the "NM bolt diameter"
             and "NM bolt type to supported" and "NM bolt type to supporting"
             that are set for the beam.
            
             No instructs connection design to create two separate pairs of
             clip angles, one pair to connect the beam to the column, the
             other pair to connect the vertical brace gusset plate to the
             column.  </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ClipAngleSpecification.UseExpandedVerticalBoltSpacing">
             <summary>can apply to a beam with clip angles to a beam or column
             so long as the "Moment type" is set to 'Non-moment' in the beam
             end's " Moment" leaf.
            
             Automatic specifies that connection design apply the choice made
             to Fabricator Setup &gt; Standard Fabricator Connections &gt; Clip
             Angle Setup &gt; "Use expanded vertical bolt spacing."
            
             Yes permits connection design to expand the vertical spacing of
             bolts to 1.5 times or 2 times the Fabricator Setup &gt; Connection
             Detailing/Fabricator Options &gt; "Bolt spacing" that is set per
             bolt diameter. The program may also adjust to a spacing other
             than 1.5 or 2 times the standard bolt spacing in order to
             accommodate piecemarking issues, loading conditions and unusual
             geometries.
            
             No instructs connection design to use the Fabricator Setup &gt;
             Connection Erectability Settings &gt; "Bolt spacing" that is
             set per bolt diameter.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ClipAngleSpecification.EmbedLocation">
             <summary> can apply when a beam frames to a concrete wall and the
             beam's "Input connection type" is 'Clip angle' and an "Embed
             schedule entry" has been made in the " Connection type" leaf. The
             option can also be found in Job Setup &gt; Auto Standard Connections
             and in Job Setup &gt; User Defined Connections.
            
            
             Automatic instructs connection design to apply the choice made to
             Concrete Setup &gt; Embed Schedule &gt; "Plate location."
            
             InsideWall embeds the plate in the concrete wall.
            
             OutsideWall locates the plate flush to the wall.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ClipAngleSpecification.UseErectionBolts">
             <summary>applies when both "Attachment to supported" and
             "Attachment to supporting" are set to 'Welded.' In other words,
             it applies to all-welded clip angles.
            
            
             Automatic specifies that connection design apply the choice made
             to Fabricator Setup &gt; Standard Fabricator Connections &gt; Attached
             to Supporting Member &gt; "Provide erection bolts" If "Attached to"
             (on this window) is set to 'Supporting.' If "Attached to" is set
             to 'Supported,' then connection design applies the choice made to
             Fabricator Setup &gt; Standard Fabricator Connections &gt; Attached to
             Supported Member &gt; "Provide erection bolts."
            
             Yes instructs connection design to design the welded-welded
             double clip angle connection with erection bolts to facilitate
             the field welding of the connection. The erection bolts are field
             bolts. For a beam end connection that is not auto standard, the
             bolts are the " Connection type" &gt; "NM bolt type to supporting"
             (or "NM bolt type to supported") and "NM bolt diameter" that are
             specified for that beam connection's end. For an auto standard
             beam connection, the bolts are the "NM bolt type" and "NM bolt
             diameter" that are specified for the relevant framing condition
             in Fabricator Setup &gt; Auto Standard Connections. If the
             welded-welded clip angle shop welds to the supporting, two
             erection bolts are provided. If it shop welds to the supported,
             four erection bolts are provided, two for the NS OSL, two for the
             FS OSL.
            
             No instructs connection design to design the welded-welded double
             clip angle without erection bolts.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.SeismicCopeFieldWeld">
             <summary>A cope for seismic field welds.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeismicCopeFieldWeld.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeismicCopeFieldWeld.getCPtr(DesignData.SDS2.Model.SeismicCopeFieldWeld)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeismicCopeFieldWeld.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeismicCopeFieldWeld.GetCopeLength">
             <summary>Length of the cope.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeismicCopeFieldWeld.GetReEntrantLength">
             <summary>Length of the reentrant cut.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeismicCopeFieldWeld.GetReEntrantDepth">
             <summary>Depth of the cope from the inside of the flange.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeismicCopeFieldWeld.GetFlangeFlushLength">
             <summary>Distance from the end of the flange to the beginning of
             the reentrant cut on the flange.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeismicCopeFieldWeld.GetReEntrantRadius">
             <summary>Radius of the reentrant cut hole.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeismicCopeFieldWeld.GetGrooveAngle">
             <summary>Angle of the flange weld chamfer.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeismicCopeFieldWeld.GetReEntrantHoleDistance">
             <summary>Depth of the center of the reentrant cut hole from the
             inside of the flange.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SeismicCopeFieldWeld.CopeLength">
             <summary>Length of the cope.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SeismicCopeFieldWeld.ReEntrantLength">
             <summary>Length of the reentrant cut.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SeismicCopeFieldWeld.ReEntrantDepth">
             <summary>Depth of the cope from the inside of the flange.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SeismicCopeFieldWeld.FlangeFlushLength">
             <summary>Distance from the end of the flange to the beginning of
             the reentrant cut on the flange.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SeismicCopeFieldWeld.ReEntrantRadius">
             <summary>Radius of the reentrant cut hole.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SeismicCopeFieldWeld.GrooveAngle">
             <summary>Angle of the flange weld chamfer.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SeismicCopeFieldWeld.ReEntrantHoleDistance">
             <summary>Depth of the center of the reentrant cut hole from the
             inside of the flange.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SeismicCopeFieldWeld.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.GridType">
             <summary>Enumerated grid line types</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.GridType.InfiniteStraightGrid">
             <summary>Infinite straight grid line</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.GridType.FiniteStraightGrid">
             <summary>Finite straight grid line, represented with two end points</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.GridType.CurvedGrid">
             <summary>Curved grid</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.WTee">
             <summary>A W tee material</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.WTee.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WTee.getCPtr(DesignData.SDS2.Model.WTee)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WTee.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WTee.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WTee.#ctor(DesignData.SDS2.Setup.WTeeShape)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WTee.GetGrade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.WTee.GetAvailableSteelGrades">
             <summary>A list of steel grades, valid for WTee, which can be
             assigned to the Grade property of a WTee</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.WTee.Grade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.WTee.AvailableSteelGrades">
             <summary>A list of steel grades, valid for WTee, which can be
             assigned to the Grade property of a WTee</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.LockableHoleType">
             <summary>Lockable value for hole types</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableHoleType.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableHoleType.getCPtr(DesignData.SDS2.Model.LockableHoleType)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableHoleType.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableHoleType.#ctor">
                  
            </member>
        <member name="M:DesignData.SDS2.Model.LockableHoleType.GetValue">
             <summary>The underlying value</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableHoleType.#ctor(DesignData.SDS2.Setup.HoleType)">
             <summary>Create a locked ViaMemberEdit LockableHoleType from a DesignData.SDS2.Setup.HoleType</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableHoleType.op_Implicit(DesignData.SDS2.Setup.HoleType)~DesignData.SDS2.Model.LockableHoleType">
             <summary>Implicit conversion using the DesignData.SDS2.Setup.HoleType constructor</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableHoleType.op_Implicit(DesignData.SDS2.Model.LockableHoleType)~DesignData.SDS2.Setup.HoleType">
             <summary>Implicit conversion to value type</summary>
            </member>
        <member name="P:DesignData.SDS2.Model.LockableHoleType.Value">
             <summary>The underlying value</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.NoteCommentList.swigCMemOwn">
            
            </member>
        <member name="M:DesignData.SDS2.Model.NoteCommentList.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.NoteCommentList.Dispose(System.Boolean)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.NoteCommentList.NoteCommentListEnumerator">
             Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
             whenever the collection is modified. This has been done for changes in the size of the
             collection but not when one of the elements of the collection is modified as it is a bit
             tricky to detect unmanaged code that modifies the collection under our feet.
            </member>
        <member name="M:DesignData.SDS2.Model.NoteCommentList.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.NoteCommentList.#ctor(DesignData.SDS2.Model.NoteCommentList)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.NoteCommentList.#ctor(System.Int32)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.NotchBoth">
             <summary>Notch the Top/Bottom and Near/Far sides of a hollow
             section.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.NotchBoth.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.NotchBoth.getCPtr(DesignData.SDS2.Model.NotchBoth)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.NotchBoth.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.NotchBoth.GetTopNotchLength">
             <summary>Length of the top/bottom notch.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.NotchBoth.GetTopNotchWidth">
             <summary>Width of the top/bottom notch.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.NotchBoth.GetTopNotchOffset">
             <summary>Offset from center of the top/bottom notch.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.NotchBoth.GetTopNotchRadius">
             <summary>Radius of the end of the top/bottom notch. When the
             radius is 0, the notch is cut square.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.NotchBoth.GetSideNotchLength">
             <summary>Length of the near/far side notch.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.NotchBoth.GetSideNotchWidth">
             <summary>Width of the near/far side notch.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.NotchBoth.GetSideNotchOffset">
             <summary>Offset from half depth of the near/far side notch.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.NotchBoth.GetSideNotchRadius">
             <summary>Radius of the end of the near/far side notch. When the
             radius is 0, the notch is cut square.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.NotchBoth.TopNotchLength">
             <summary>Length of the top/bottom notch.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.NotchBoth.TopNotchWidth">
             <summary>Width of the top/bottom notch.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.NotchBoth.TopNotchOffset">
             <summary>Offset from center of the top/bottom notch.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.NotchBoth.TopNotchRadius">
             <summary>Radius of the end of the top/bottom notch. When the
             radius is 0, the notch is cut square.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.NotchBoth.SideNotchLength">
             <summary>Length of the near/far side notch.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.NotchBoth.SideNotchWidth">
             <summary>Width of the near/far side notch.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.NotchBoth.SideNotchOffset">
             <summary>Offset from half depth of the near/far side notch.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.NotchBoth.SideNotchRadius">
             <summary>Radius of the end of the near/far side notch. When the
             radius is 0, the notch is cut square.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.NotchBoth.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.ThreadType">
             <summary>
             Thread direction.
             </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ThreadType.None">
             <summary>No thread.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ThreadType.Left">
             <summary>Left-handed thread.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ThreadType.Right">
             <summary>Right-handed thread.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.CopeShopWeldN3">
             <summary>Designates weld preparation and/or a cut to remove part of
             the top/bottom flange plus part of the web.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeShopWeldN3.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeShopWeldN3.getCPtr(DesignData.SDS2.Model.CopeShopWeldN3)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeShopWeldN3.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeShopWeldN3.GetLength">
             <summary>The length of the cope along the work point line</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeShopWeldN3.GetDepth">
             <summary>The depth of the cope from the flange, perpindicular to the length</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeShopWeldN3.GetClipWeb">
             <summary>How many inches to clip back the web at the edge of the cope.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeShopWeldN3.GetReEntrantRadius">
             <summary>The radius of the corner of the cope</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeShopWeldN3.GetGrooveAngle">
             <summary>Angle of the bevel on the flange</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CopeShopWeldN3.ClipWeb">
             <summary>How many inches to clip back the web at the edge of the cope.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CopeShopWeldN3.Length">
             <summary>The length of the cope along the work point line</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CopeShopWeldN3.Depth">
             <summary>The depth of the cope from the flange, perpindicular to the length</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CopeShopWeldN3.ReEntrantRadius">
             <summary>The radius of the corner of the cope</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CopeShopWeldN3.GrooveAngle">
             <summary>Angle of the bevel on the flange</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeShopWeldN3.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.WeldContour">
             <summary>Enumerated weld contours indicating contour symbols for a weld</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.WeldContour.NoContour">
             <summary>No contour symbol is included in the drawing</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.WeldContour.Flush">
             <summary>Indicates a add a flat line symbol</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.WeldContour.Concave">
             <summary>Indicates a concave line symbol</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.WeldContour.Convex">
             <summary>Indicates a convex line symbol</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.WeldContour.SmoothToes">
             <summary>
             Indicates a contour symbol that looks like two back-to-back J's.
             It serves as an instruction to the welder to perform weld toe grinding.
             </summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.HoleOperationSeries">
             <summary>The form or series</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.HoleOperationSeries.None">
             <summary> results in the form / series not being included in the hole callout label. If 'None' had been selected for the above example, the label would read: ø.81-16-2B-RH</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.HoleOperationSeries.UN">
                  
            </member>
        <member name="F:DesignData.SDS2.Model.HoleOperationSeries.UNC">
             <summary>stands for Unified National Course. For the example above. 'UNC' was selected as the "Form / Series," and therefore the label reads ø.81-16UNC-2B-RH</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.HoleOperationSeries.UNF">
             <summary>stands for Unified National Fine. If 'UNF' had been selected for the example above, the label would read ø.81-16UNF-2B-RH.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.HoleOperationSeries.UNEF">
             <summary>stand for Unified National Extra Fine. For the example above. 'UNEF' was selected as the "Form / Series," and therefore the label reads ø.81-16UNC-2B-RH.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.Girt">
             <summary>
             A builtin steel girt member.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Girt.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Girt.getCPtr(DesignData.SDS2.Model.Girt)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Girt.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Girt.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.AttachmentMethod">
             <summary>The method to attach connection material to supported or
             supporting material.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.AttachmentMethod.Welded">
             <summary>Weld it</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.AttachmentMethod.Bolted">
             <summary>Bolt it</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.RoundBarEnd">
             <summary>The end of a round bar</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundBarEnd.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundBarEnd.getCPtr(DesignData.SDS2.Model.RoundBarEnd)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundBarEnd.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundBarEnd.GetThreadType">
             <summary>Thread direction.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundBarEnd.GetThreadLength">
             <summary>Thread length.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RoundBarEnd.ThreadType">
             <summary>Thread direction.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RoundBarEnd.ThreadLength">
             <summary>Thread length.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.Miscellaneous">
             <summary>
             A builtin miscellaneous member.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Miscellaneous.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Miscellaneous.getCPtr(DesignData.SDS2.Model.Miscellaneous)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Miscellaneous.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Miscellaneous.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Miscellaneous.GetPythonObject">
             <summary>Access to the Python object associated with the miscellaneous member</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Miscellaneous.PythonObject">
             <summary>Access to the Python object associated with the miscellaneous member</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.EndPlateEndOption">
             <summary>Options for the ends of the end plates used</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.EndPlateEndOption.StiffenedFlush">
             <summary>makes the edge of the end plate flush with the
             flange. Placement of the stiffener is the specified BoltPattern
             (PlateBelowTensionBolts and PlateBetweenTensionBolts are the
             two options).</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.EndPlateEndOption.UnstiffenedFlush">
             <summary>makes the edge of the end plate flush with the
             flange. No stiffener are designed. TwoBolt and FourBolt are the
             two BoltPattern options.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.EndPlateEndOption.StiffenedExtended">
             <summary>extends the end plate beyond the flange and designs a
             triangular stiffener between the two bolts that are beyond the
             flange. FourBolt and ThirdUnstiffened are BoltPattern options
             that control the number of bolts inside the flange for this
             configuration.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.EndPlateEndOption.UnstiffenedExtended">
             <summary>extends the end plate beyond the flange, but without a
             stiffener. FourBolt and HalfUnstiffened and all "Third..."
             options are BoltPattern settings that control the number of bolts
             inside the flange for this configuration.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.StairConnectionAttachmentWelded">
             <summary>Welded StairConnection attachment</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionAttachmentWelded.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionAttachmentWelded.getCPtr(DesignData.SDS2.Model.StairConnectionAttachmentWelded)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionAttachmentWelded.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionAttachmentWelded.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionAttachmentWelded.GetSize">
             <summary>Weld size</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for negative weld sizes.</exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionAttachmentWelded.Size">
             <summary>Weld size</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for negative weld sizes.</exception>
            
            </member>
        <member name="T:DesignData.SDS2.Model.FlatBar">
             <summary>A flat steel bar.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlatBar.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlatBar.getCPtr(DesignData.SDS2.Model.FlatBar)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlatBar.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlatBar.GetOrderLength">
             <summary>The length of the plate.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlatBar.GetWorkpointLength">
             <summary>The workpoint length of the plate.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlatBar.GetCenteredOnDepth">
             TODO
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlatBar.GetAngleOfTwist">
             <summary>The angle (in radians) of twist from one end of the
             material to the other.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlatBar.GetRollType">
             <summary>The type of roll on this material, or None if there is
             no roll on this material.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlatBar.GetMidOrdinateRoll">
             <summary>The measurement from the center of the curved member to
             point halfway between the left and right end.  For Camber, this
             is the only valid value to set.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlatBar.GetIncludedAngleRoll">
             <summary>The included angle of the rolling operation.  This can be set
             for any operation besides a camber roll</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlatBar.GetRollingRadius">
             <summary>The rolling radius for any roll operation besides a camber roll.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlatBar.GetSpiralRollOffset">
             <summary>The positive or negative distance that the right end
             will be offset from the right work point in the member's Z axis.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlatBar.GetThicknessReferencePoint">
             <summary>The depth-wise reference plane of the bar.  Changing this shifts the
             bar without changing the work points of the bar.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlatBar.GetWidth">
             <summary> The width of the bar. Width and Thickness are always the same.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlatBar.GetThickness">
             <summary> The thickness of the bar. Width and Thickness are always the same.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlatBar.GetGrade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlatBar.GetAvailableSteelGrades">
             <summary>A list of steel grades, valid for FlatBars, which can be
             assigned to the Grade property of a FlatBar</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.FlatBar.Grade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.FlatBar.OrderLength">
             <summary>The length of the plate.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.FlatBar.WorkpointLength">
             <summary>The workpoint length of the plate.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.FlatBar.Thickness">
             <summary> The thickness of the bar. Width and Thickness are always the same.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.FlatBar.Width">
             <summary> The width of the bar. Width and Thickness are always the same.
             </summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.FlatBar.IsCenteredOnDepth">
             </member>
        <member name="P:DesignData.SDS2.Model.FlatBar.ThicknessReferencePoint">
             <summary>The depth-wise reference plane of the bar.  Changing this shifts the
             bar without changing the work points of the bar.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.FlatBar.AngleOfTwist">
             <summary>The angle (in radians) of twist from one end of the
             material to the other.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.FlatBar.RollType">
             <summary>The type of roll on this material, or None if there is
             no roll on this material.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.FlatBar.MidOrdinateRoll">
             <summary>The measurement from the center of the curved member to
             point halfway between the left and right end.  For Camber, this
             is the only valid value to set.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.FlatBar.IncludedAngleRoll">
             <summary>The included angle of the rolling operation.  This can be set
             for any operation besides a camber roll</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.FlatBar.RollingRadius">
             <summary>The rolling radius for any roll operation besides a camber roll.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.FlatBar.SpiralRollOffset">
             <summary>The positive or negative distance that the right end
             will be offset from the right work point in the member's Z axis.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.FlatBar.Ends">
             <summary>Information specific to the ends of the material.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.FlatBar.AvailableSteelGrades">
             <summary>A list of steel grades, valid for FlatBars, which can be
             assigned to the Grade property of a FlatBar</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlatBar.GetEnds">
             <summary>Information specific to the ends of the material.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.FlatBar.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.DeckingEnd">
             <summary>The end of a decking material</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.DeckingEnd.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.DeckingEnd.getCPtr(DesignData.SDS2.Model.DeckingEnd)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.DeckingEnd.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.DeckingEnd.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.DeckingEnd.GetCutAngle">
             <summary>
             Angle to cut across the end of the decking where 0 is a sqr cut.
             </summary>
             <value>A floating point value in radians.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.DeckingEnd.CutAngle">
             <summary>
             Angle to cut across the end of the decking where 0 is a sqr cut.
             </summary>
             <value>A floating point value in radians.</value>
            
            </member>
        <member name="T:DesignData.SDS2.Model.Column">
             <summary>
             A builtin steel column member.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Column.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Column.getCPtr(DesignData.SDS2.Model.Column)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Column.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Column.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Column.GetRotation">
             <summary>Rotation about the workline in radians.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Column.GetDoubleMaterial">
             <summary>Determines if the column's material is doubled.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Column.GetUseErectionPinHole">
             <summary> An erection pin hole is a lift hole near the top of a
             column that can be used by a crane to lift the column into place.
            
             Automatic generates an erection pin hole based on the selection
             made to Fabricator Setup &gt; Member Detailing Settings &gt;
             "Columns" section &gt; "Show erection pin holes on columns."
             Exception: Connection design may prevent a lift hole from being
             generated in order to avoid interference with a connection to the
             column.
            
             Yes centers a pin hole at the half-depth of the column. The pin
             hole is the diameter and edge distance (from the top of the
             column) specified in Member Detailing and Fabrication
             Options. The pin hole will be generated even if it interferes
             with a connection to the column.
            
             No prevents a pin hole from being created -- regardless of the
             choice made in Member Detailing Settings.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Column.GetBreakApart">
             <summary>Used to determine if connection material not welded to the member main
             material will be broken apart from the member</summary>
             <value>true = process and create soilds will break apart member
             false = process and create solids will combine member material</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Column.GetBottom">
             <summary>
             Gets the bottom end of the column.  The bottom end is defined as follows:
                * The end with the lowest Z coordinate value
                * If that matches, then the lowest X coordinate
                * If those match, then the lowest Y coordinate
            
             Unless the column has its ends set to swapped, then it's the
             reverse of that.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Column.GetTop">
             <summary>
             Gets the top end of the column.  The top end is defined as follows:
                * The end with the highest Z coordinate value
                * If that matches, then the highest X coordinate
                * If those match, then the highest Y coordinate
            
             Unless the column has its ends set to swapped, then it's the
             reverse of that.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Column.Rotation">
             <summary>Rotation about the workline in radians.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Column.IsDoubleMaterial">
             <summary>Determines if the column's material is doubled.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Column.UseErectionPinHole">
             <summary> An erection pin hole is a lift hole near the top of a
             column that can be used by a crane to lift the column into place.
            
             Automatic generates an erection pin hole based on the selection
             made to Fabricator Setup &gt; Member Detailing Settings &gt;
             "Columns" section &gt; "Show erection pin holes on columns."
             Exception: Connection design may prevent a lift hole from being
             generated in order to avoid interference with a connection to the
             column.
            
             Yes centers a pin hole at the half-depth of the column. The pin
             hole is the diameter and edge distance (from the top of the
             column) specified in Member Detailing and Fabrication
             Options. The pin hole will be generated even if it interferes
             with a connection to the column.
            
             No prevents a pin hole from being created -- regardless of the
             choice made in Member Detailing Settings.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Column.IsBreakApart">
             <summary>Used to determine if connection material not welded to the member main
             material will be broken apart from the member</summary>
             <value>true = process and create soilds will break apart member
             false = process and create solids will combine member material</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Column.Bottom">
             <summary>
             Gets the bottom end of the column.  The bottom end is defined as follows:
                * The end with the lowest Z coordinate value
                * If that matches, then the lowest X coordinate
                * If those match, then the lowest Y coordinate
            
             Unless the column has its ends set to swapped, then it's the
             reverse of that.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Column.Top">
             <summary>
             Gets the top end of the column.  The top end is defined as follows:
                * The end with the highest Z coordinate value
                * If that matches, then the highest X coordinate
                * If those match, then the highest Y coordinate
            
             Unless the column has its ends set to swapped, then it's the
             reverse of that.
             </summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.BasePlateWeldWithoutGroove">
             <summary>Base plate weld options when there is no groove</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.BasePlateWeldWithoutGroove.None">
             <summary>No weld</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.BasePlateWeldWithoutGroove.SingleFillet">
             <summary>Fillet weld for general welding of material</summary> 
            </member>
        <member name="T:DesignData.SDS2.Model.GridLine">
             <summary>
             Grid lines appear as lines, segments, circles, and arcs of a circle in the model.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GridLine.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.GridLine.getCPtr(DesignData.SDS2.Model.GridLine)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.GridLine.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.GridLine.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.GridLine.RefreshDatabaseTable">
             <summary>Refresh the the primary table for objects of this type.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GridLine.Get(DesignData.SDS2.Database.GridLineHandle)">
             <summary>
             Get a GridLine object for the GridLineHandle passed in.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GridLine.GetDepthOut">
             <summary>
             The distance in inches from this grid's work plane to a plane closer
             to the viewer.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GridLine.GetDepthIn">
             <summary>
             The distance in inches from this grid's work plane to a plane farther
             away than the viewer.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GridLine.GetViewType">
             <summary>The type of view defined by the grid line.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GridLine.GetGridType">
             <summary>Grid type</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GridLine.GetArcType">
             <summary>Arc type, only applies for curved grids</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GridLine.GetName">
             <summary>Name of the erection view defined by the grid line</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the handle is invalid.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GridLine.GetRadius">
             <summary>Radius, in inches, of curved grid lines</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GridLine.GetToViewCoordinates">
             <summary>
             Matrix, in inches, representing a transformation from global coordinates
             to the view coordinates for the grid line
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GridLine.GetToGlobalCoordinates">
             <summary>
             Matrix, in inches, representing a transformation from view coordinates
             to global coordinates for the grid line
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GridLine.GetViewBounds2D">
             <summary>
             2D viewing bounds in view coordinates.
             </summary>
             <remarks> <para>
             When the model is transformed from global coordinates to view
             coordinates, only the portion of the model that falls into
             the area defined by these bounds combined with the depth in
             and out is visible to the view defined by this gride line.
             </para> </remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GridLine.IsNearlyPlanView(System.Double)">
             <summary>
             True when the grid represents a plan view.  Specifically, this is
             when the the viewing direction is within <c>tan_tol</c> of being
             parallel to vertical in global coordinates.
             If tan_tol is 0.01745, it tests that the vectors are within
             approximately 1 degree of parallel.
             </summary>
             <param name="tan_tol">
             The tangent of the angle that specifies the desired tolerance.  Note that for small angles x,
             tan x ~= x, so you can also think of this nearly a tolerance in radians.
             </param>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the handle is invalid.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GridLine.GetPen">
             <summary>
             Grid line pen color
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GridLine.GetLineType">
             <summary>
             Grid line type
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the handle is invalid.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GridLine.GetIsAutoPinPermitted">
             <summary>
             True when the grid line is permitted to be automatically pinned to
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GridLine.GetIsForDetail">
             <summary>
             True when the grid line is allowed for detailing
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GridLine.GetGridBubbleOffset">
             <summary>
             Positive factor by which by which finite grid lines will be
             extended in proportion to the diameter of its grid bubble.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GridLine.GetHashCode">
                  
            </member>
        <member name="M:DesignData.SDS2.Model.GridLine.Equals(System.Object)">
            
            </member>
        <member name="P:DesignData.SDS2.Model.GridLine.DepthIn">
             <summary>
             The distance in inches from this grid's work plane to a plane farther
             away than the viewer.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GridLine.DepthOut">
             <summary>
             The distance in inches from this grid's work plane to a plane closer
             to the viewer.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GridLine.ViewType">
             <summary>The type of view defined by the grid line.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GridLine.GridType">
             <summary>Grid type</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GridLine.ArcType">
             <summary>Arc type, only applies for curved grids</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GridLine.Name">
             <summary>Name of the erection view defined by the grid line</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the handle is invalid.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GridLine.Radius">
             <summary>Radius, in inches, of curved grid lines</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GridLine.ToViewCoordinates">
             <summary>
             Matrix, in inches, representing a transformation from global coordinates
             to the view coordinates for the grid line
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GridLine.ToGlobalCoordinates">
             <summary>
             Matrix, in inches, representing a transformation from view coordinates
             to global coordinates for the grid line
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GridLine.ViewBounds2D">
             <summary>
             2D viewing bounds in view coordinates.
             </summary>
             <remarks> <para>
             When the model is transformed from global coordinates to view
             coordinates, only the portion of the model that falls into
             the area defined by these bounds combined with the depth in
             and out is visible to the view defined by this gride line.
             </para> </remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GridLine.Pen">
             <summary>
             Grid line pen color
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GridLine.LineType">
             <summary>
             Grid line type
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the handle is invalid.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GridLine.IsAutoPinPermitted">
             <summary>
             True when the grid line is permitted to be automatically pinned to
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GridLine.IsForDetail">
             <summary>
             True when the grid line is allowed for detailing
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GridLine.GridBubbleOffset">
             <summary>
             Positive factor by which by which finite grid lines will be
             extended in proportion to the diameter of its grid bubble.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the handle is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of an object that was added to a transaction but is unlocked
             </exception>
            
            </member>
        <member name="T:DesignData.SDS2.Model.ShearWeldType">
             <summary>Options for the weld on a shear tab</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ShearWeldType.SingleFillet">
             <summary>Fillet weld for general welding of material</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.ShearWeldType.DoubleFillet">
             <summary>Fillet weld for general welding of material</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.ShearWeldType.SingleBevelGroove">
             <summary>
             Bevel groove weld for general full penetration welding of material.
             </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ShearWeldType.GrooveWithBackingBar">
                  
            </member>
        <member name="T:DesignData.SDS2.Model.VertBraceWideFlangeWebAttachmentMethod">
             <summary>
             A specification for how the web of a vertical wide flange brace
             connects to the gusset plate.
             </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.VertBraceWideFlangeWebAttachmentMethod.Automatic">
             <summary>Use setup to determine the connection</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.VertBraceWideFlangeWebAttachmentMethod.None">
             <summary>No wide flange web connection</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.VertBraceWideFlangeWebAttachmentMethod.Plates">
             <summary>Connect with plates on the wide flange web</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.VertBraceWideFlangeWebAttachmentMethod.Channels">
             <summary>Connect with channels on the wide flange web</summary> 
            </member>
        <member name="T:DesignData.SDS2.Model.WeldProcessType">
             <summary>Enumerated weld process types</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.WeldProcessType.NoProcess">
             <summary>No prequalified weld tail process</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.WeldProcessType.SubmergedArcWelding">
             <summary>Submerged arch welding (SAW), tail text S</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.WeldProcessType.GasMetalArcWelding">
             <summary>Gas metal arc welding (GMAW), tail text G</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.WeldProcessType.FluxCoredArcWelding">
             <summary>Flux cored arc welding (FCAW), tail text F</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.WeldProcessType.GF">
             <summary>GMAW/FCAW (GF), tail text GF</summary> 
            </member>
        <member name="T:DesignData.SDS2.Model.PlugType">
             <summary>Hole plug type</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.PlugType.None">
             <summary>No hole plug</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.PlugType.Zinc">
             <summary>Zinc hole plug</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.PlugType.PlugWeld">
             <summary>Plug with weld</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.PlugType.Aluminum">
             <summary>An aluminum hole plug</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.PlugType.Epoxy">
             <summary>Plug with epoxy</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.RoundPlate">
             <summary>A round steel plate.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundPlate.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundPlate.getCPtr(DesignData.SDS2.Model.RoundPlate)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundPlate.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundPlate.GetDiameter">
             <summary>The diameter of the plate.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundPlate.GetThicknessReferencePoint">
             <summary>The center plane of the plate.  Changing this shifts the
             plate without changing the work points of the plate.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RoundPlate.ThicknessReferencePoint">
             <summary>The center plane of the plate.  Changing this shifts the
             plate without changing the work points of the plate.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RoundPlate.Diameter">
             <summary>The diameter of the plate.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RoundPlate.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.WideFlange">
             <summary>A wide flange material</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.WideFlange.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WideFlange.getCPtr(DesignData.SDS2.Model.WideFlange)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WideFlange.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WideFlange.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WideFlange.#ctor(DesignData.SDS2.Setup.WideFlangeShape)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WideFlange.GetGrade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.WideFlange.GetAvailableSteelGrades">
             <summary>A list of steel grades, valid for WideFlange, which can be
             assigned to the Grade property of a WideFlange</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.WideFlange.Grade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.WideFlange.AvailableSteelGrades">
             <summary>A list of steel grades, valid for WideFlange, which can be
             assigned to the Grade property of a WideFlange</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.PythonMaterial">
             <summary>A material implemented in python.  This can be accessed or
             modified by using the PythonObject property with the 'dynamic'
             type.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.PythonMaterial.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.PythonMaterial.getCPtr(DesignData.SDS2.Model.PythonMaterial)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.PythonMaterial.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.PythonMaterial.GetPythonObject">
             <summary>Return the python object, should be treated as a "dynamic" type</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.PythonMaterial.PythonObject">
             <summary>Return the python object, should be treated as a "dynamic" type</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.ColumnUserBaseCapPlateSpecification">
             <summary>A user specified base or cap plate connection</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ColumnUserBaseCapPlateSpecification.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ColumnUserBaseCapPlateSpecification.getCPtr(DesignData.SDS2.Model.ColumnUserBaseCapPlateSpecification)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ColumnUserBaseCapPlateSpecification.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ColumnUserBaseCapPlateSpecification.#ctor">
                  
            </member>
        <member name="M:DesignData.SDS2.Model.ColumnUserBaseCapPlateSpecification.GetPlateDefinition">
             <summary>The base or cap plate to use for this connection.  These can be found
             in the job setup object.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ColumnUserBaseCapPlateSpecification.GetUseTransverseBeamStiffener">
             <summary>Whether or not to use a transverse beam stiffener.
            
              Automatic specifies that the system apply a setup choice (Job
              Setup &gt; Design Settings &gt; "Always provide transverse beam
              stiffener").
            
              Yes instructs the system to create at least one pair of
              full-depth transverse beam stiffeners (one on the beam's near
              side, one far side) regardless of the "Load" on the column. Two
              pairs of stiffeners are created when the "Load" is sufficiently
              large. The two pairs of stiffeners align with the flanges of the
              column. A single pair of stiffeners is centered with respect to
              the column member line.
            
              No instructs the system to not create a pair of transverse
              beam stiffeners, even when the column's "Load" is large enough
              that the beam's web capacity is exceeded. If the system
              determines that the web capacity of the beam is exceeded, a
              connection is not designed, and you get the following end
              connection failure message: "Conn modified by framing situation,
              see Design Calcs."
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ColumnUserBaseCapPlateSpecification.GetAlignStiffenersWith">
             <summary> Automatic specifies that the system apply a setup
             choice (Fabricator Setup &gt; Standard Fabricator Connections &gt; Cap
             Plate Setup &gt; "Align transverse stiffeners with").
            
             Column instructs the system to create transverse beam stiffeners
             that are parallel with the workline (stick form member line) of
             the column.
            
             Beam configures the system to create transverse beam stiffeners
             that are perpendicular to the workline of the beam. The
             stiffeners are normal to the beam, regardless of the slope of the
             beam or column.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ColumnUserBaseCapPlateSpecification.GetUseExtendedStiffeners">
             <summary> Automatic specifies that the system look at the
             Fabricator Setup &gt; Standard Fabricator Connections &gt; Extended
             Flange Plate Setup &gt; "Plate overhang tolerance" to determine
             whether or not to design a connection. If the setup value is less
             than or equal to the actual base/cap plate overhang in the model,
             then a connection will be designed. If the setup value is greater
             than the overhang, a connection is not designed.
            
             Yes instructs the system to attempt to design flange extension
             plates and stiffeners. If it is determined that such a connection
             should not be designed, for example, because of interference with
             another member, the system locks are populated with null values
             (e.g. distances of 0) in leaves named " Bottom extension plate"
             or " Top extension plate" and " Stiffener Plate."
            
             No results in no flange extension plates and beam stiffeners.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ColumnUserBaseCapPlateSpecification.GetPlateRotation">
             <summary>The rotation of the plate around its center</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ColumnUserBaseCapPlateSpecification.GetPlateYOffset">
             <summary>The horizontal offset of the center of the plate from the
             center of the column</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ColumnUserBaseCapPlateSpecification.GetPlateZOffset">
             <summary>The vertical offset of the center of the plate from
             the center of the column</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ColumnUserBaseCapPlateSpecification.PlateDefinition">
             <summary>The base or cap plate to use for this connection.  These can be found
             in the job setup object.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ColumnUserBaseCapPlateSpecification.UseTransverseBeamStiffener">
             <summary>Whether or not to use a transverse beam stiffener.
            
              Automatic specifies that the system apply a setup choice (Job
              Setup &gt; Design Settings &gt; "Always provide transverse beam
              stiffener").
            
              Yes instructs the system to create at least one pair of
              full-depth transverse beam stiffeners (one on the beam's near
              side, one far side) regardless of the "Load" on the column. Two
              pairs of stiffeners are created when the "Load" is sufficiently
              large. The two pairs of stiffeners align with the flanges of the
              column. A single pair of stiffeners is centered with respect to
              the column member line.
            
              No instructs the system to not create a pair of transverse
              beam stiffeners, even when the column's "Load" is large enough
              that the beam's web capacity is exceeded. If the system
              determines that the web capacity of the beam is exceeded, a
              connection is not designed, and you get the following end
              connection failure message: "Conn modified by framing situation,
              see Design Calcs."
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ColumnUserBaseCapPlateSpecification.AlignStiffenersWith">
             <summary> Automatic specifies that the system apply a setup
             choice (Fabricator Setup &gt; Standard Fabricator Connections &gt; Cap
             Plate Setup &gt; "Align transverse stiffeners with").
            
             Column instructs the system to create transverse beam stiffeners
             that are parallel with the workline (stick form member line) of
             the column.
            
             Beam configures the system to create transverse beam stiffeners
             that are perpendicular to the workline of the beam. The
             stiffeners are normal to the beam, regardless of the slope of the
             beam or column.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ColumnUserBaseCapPlateSpecification.UseExtendedStiffeners">
             <summary> Automatic specifies that the system look at the
             Fabricator Setup &gt; Standard Fabricator Connections &gt; Extended
             Flange Plate Setup &gt; "Plate overhang tolerance" to determine
             whether or not to design a connection. If the setup value is less
             than or equal to the actual base/cap plate overhang in the model,
             then a connection will be designed. If the setup value is greater
             than the overhang, a connection is not designed.
            
             Yes instructs the system to attempt to design flange extension
             plates and stiffeners. If it is determined that such a connection
             should not be designed, for example, because of interference with
             another member, the system locks are populated with null values
             (e.g. distances of 0) in leaves named " Bottom extension plate"
             or " Top extension plate" and " Stiffener Plate."
            
             No results in no flange extension plates and beam stiffeners.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ColumnUserBaseCapPlateSpecification.PlateRotation">
             <summary>The rotation of the plate around its center</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ColumnUserBaseCapPlateSpecification.PlateYOffset">
             <summary>The horizontal offset of the center of the plate from the
             center of the column</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ColumnUserBaseCapPlateSpecification.PlateZOffset">
             <summary>The vertical offset of the center of the plate from
             the center of the column</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.TurnedShellLayoutReference">
             <summary>The thickness reference for TurnedShellLayout material.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.TurnedShellLayoutReference.FarSide">
             <summary>Expand thickness from the far side toward the near side</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.TurnedShellLayoutReference.NearSide">
             <summary>Expand thickness from the near side toward the far side</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.BoltMaterial">
             <summary>A bolt, added as a material, so that it will appear on the
             bill of material.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltMaterial.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltMaterial.getCPtr(DesignData.SDS2.Model.BoltMaterial)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltMaterial.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltMaterial.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltMaterial.GetDiameter">
             <summary>The diameter of the bolt shaft.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltMaterial.GetLength">
             <summary>The length of the bolt shaft</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltMaterial.GetRotation">
             <summary>The rotation of the bolt</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltMaterial.GetGripLength">
             <summary>The distance between the inside of the bolt head and inside of the nut</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltMaterial.GetHillsideWasherAngle">
             <summary>The angle from perpendicular of the fastener axis to the fastened material surface.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltMaterial.GetBoltType">
             <summary>Bolt setup information currently used on bolt</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltMaterial.GetFieldBolt">
             <summary>True if this is a bolt to be installed in the field,
             false if it's to be installed in the shop</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltMaterial.GetTensionControl">
             <summary>True if this is a tension control bolt</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltMaterial.GetHeadless">
             <summary>If true, then this bolt has no bolt head.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltMaterial.GetBoltless">
             <summary>If true then this bolt has only a bolt head</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltMaterial.GetBreakoutNutAndWasherOnBill">
             <summary>If true, then nuts and washers are broken out into their own lines on the bill of material.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltMaterial.GetCombineMaterialPlateWashers">
             <summary>If true, then washers will be combined based on the
             PlateWasherCombinationMethod setting.  If false, then each bolt
             will get its own plate washer.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws
             std::logic_error if referenced bolt does not exist.  </exception>
             <see cref="P:DesignData.SDS2.Model.Bolt.PlateWasherCombinationMethod" />
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltMaterial.GetFinish">
             <summary>The finish type of the bolt</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltMaterial.GetPlateWasherCombinationMethod">
             <summary>Return the plate washer method set.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltMaterial.GetWasherNutPrimary">
             <summary>
             Primary washer under the nut.
             A washer with WasherType.None indicates there is no washer.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltMaterial.GetWasherNutSecondary">
             <summary>
             Secondary washer under the nut.
             A washer with WasherType.None indicates there is no washer.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltMaterial.GetWasherNutTertiary">
             <summary>
             Tertiary washer under the nut.
             A washer with WasherType.None indicates there is no washer.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltMaterial.GetWasherHeadPrimary">
             <summary>
             Primary washer under the bolt head.
             A washer with WasherType.None indicates there is no washer.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltMaterial.GetWasherHeadSecondary">
             <summary>
             Secondary washer under the bolt head.
             A washer with WasherType.None indicates there is no washer.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltMaterial.GetWasherHeadTertiary">
             <summary>
             Tertiary washer under the bolt head.
             A washer with WasherType.None indicates there is no washer.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltMaterial.GetWashersUnderNut">
             <summary>A list of washers on this bolt under the nut with some positive quantity and non WasherType.None.  Note that modifying the list will
             not add, remove, or re-order the washers on the bolt.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltMaterial.GetWashersUnderHead">
             <summary>A list of washers on this bolt under the nut with some positive quantity and non WasherType.None.  Note that modifying the list will
             not add, remove, or re-order the washers on the bolt.
             </summary>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltMaterial.AddWasherNut">
             <summary>Added a washer into the first free slot.  There are three washers
             allowed for each bolt (ignoring the Quantity field), this will find the first
             of those three that's set to WasherType.None and put in a WasherType.Hardened
             or set with quantity 0 and set to a quantity of 1
             and return it.  If all slots are full, this will return null.</summary>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltMaterial.RemoveWasher(DesignData.SDS2.Model.Washer)">
             <summary>This will clear the slot represented by the washer passed in.</summary>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltMaterial.AddWasherHead">
             <summary>Added a washer into the first free slot.  There are three washers
             allowed for each bolt (ignoring the Quantity field), this will find the first
             of those three that's set to WasherType.None and put in a WasherType.Hardened
             or set with quantity 0 and set to a quantity of 1
             and return it.  If all slots are full, this will return null.</summary>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltMaterial.GetNuts">
             <summary>The list of nuts.  This list is a copy, so modifying
             this list will not remove, add, or reorder nuts.  Use AddNut and
             RemoveNut if you need to do so.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltMaterial.AddNut">
             <summary>Added a nut into the first free slot.  There are two
             nuts allowed for each bolt, this will find the first of those two
             that's set to NutType.None and put in a NutType.HeavyHex and
             return it.  If all slots are full, this will return
             null.</summary>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltMaterial.RemoveNut(DesignData.SDS2.Model.Nut)">
             <summary>This will clear the slot represented by the nut passed in.</summary>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BoltMaterial.Diameter">
             <summary>The diameter of the bolt shaft.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BoltMaterial.Length">
             <summary>The length of the bolt shaft</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BoltMaterial.Rotation">
             <summary>The rotation of the bolt</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BoltMaterial.GripLength">
             <summary>The distance between the inside of the bolt head and inside of the nut</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BoltMaterial.HillsideWasherAngle">
             <summary>The angle from perpendicular of the fastener axis to the fastened material surface.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BoltMaterial.BoltType">
             <summary>Bolt setup information currently used on bolt</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BoltMaterial.IsFieldBolt">
             <summary>True if this is a bolt to be installed in the field,
             false if it's to be installed in the shop</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BoltMaterial.IsTensionControl">
             <summary>True if this is a tension control bolt</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BoltMaterial.IsHeadless">
             <summary>If true, then this bolt has no bolt head.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BoltMaterial.IsBoltless">
             <summary>If true then this bolt has only a bolt head</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BoltMaterial.BreakoutNutAndWasherOnBill">
             <summary>If true, then nuts and washers are broken out into their own lines on the bill of material.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BoltMaterial.CombineMaterialPlateWashers">
             <summary>If true, then washers will be combined based on the
             PlateWasherCombinationMethod setting.  If false, then each bolt
             will get its own plate washer.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws
             std::logic_error if referenced bolt does not exist.  </exception>
             <see cref="P:DesignData.SDS2.Model.Bolt.PlateWasherCombinationMethod" />
            
            </member>
        <member name="P:DesignData.SDS2.Model.BoltMaterial.BoltFinish">
             <summary>The finish type of the bolt</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BoltMaterial.PlateWasherCombinationMethod">
             <summary>Return the plate washer method set.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             Thrown when setting data on the object without having added it to a transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BoltMaterial.WasherNutPrimary">
             <summary>
             Primary washer under the nut.
             A washer with WasherType.None indicates there is no washer.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BoltMaterial.WasherNutSecondary">
             <summary>
             Secondary washer under the nut.
             A washer with WasherType.None indicates there is no washer.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BoltMaterial.WasherNutTertiary">
             <summary>
             Tertiary washer under the nut.
             A washer with WasherType.None indicates there is no washer.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BoltMaterial.WasherHeadPrimary">
             <summary>
             Primary washer under the bolt head.
             A washer with WasherType.None indicates there is no washer.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BoltMaterial.WasherHeadSecondary">
             <summary>
             Secondary washer under the bolt head.
             A washer with WasherType.None indicates there is no washer.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BoltMaterial.WasherHeadTertiary">
             <summary>
             Tertiary washer under the bolt head.
             A washer with WasherType.None indicates there is no washer.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BoltMaterial.WashersUnderNut">
             <summary>A list of washers on this bolt under the nut with some positive quantity and non WasherType.None.  Note that modifying the list will
             not add, remove, or re-order the washers on the bolt.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BoltMaterial.WashersUnderHead">
             <summary>A list of washers on this bolt under the nut with some positive quantity and non WasherType.None.  Note that modifying the list will
             not add, remove, or re-order the washers on the bolt.
             </summary>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BoltMaterial.Nuts">
             <summary>The list of nuts.  This list is a copy, so modifying
             this list will not remove, add, or reorder nuts.  Use AddNut and
             RemoveNut if you need to do so.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when reading or writing the property of a bolt that was added to a transaction but is unlocked
             </exception>
             <exception>Throws std::logic_error if referenced bolt does not exist.
             </exception>
            
            </member>
        <member name="T:DesignData.SDS2.Model.HorzBracePlateSpecification">
             <summary>
             A specification for connecting a horizontal brace to one or more supporting
             members via a gusset plate and possibly clip angles.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorzBracePlateSpecification.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorzBracePlateSpecification.getCPtr(DesignData.SDS2.Model.HorzBracePlateSpecification)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorzBracePlateSpecification.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorzBracePlateSpecification.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorzBracePlateSpecification.GetAutoGrade">
             <summary>
             If true, the system determines the plate grade.
             If false, the value specified in the Grade property will be used.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorzBracePlateSpecification.GetGrade">
             <summary>
             The grade to set on the plate material for this connection.
             </summary>
             <remarks>Setting this fill flip AutoGrade to false</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorzBracePlateSpecification.GetGussetCut">
             <summary>
             The end cut for the corner of the gusset plate that meets at the supporting member(s).
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorzBracePlateSpecification.GetUseOversizedHoles">
             <summary>
             Specifies whether oversized round holes should be used for the brace-to-gusset interface.
             </summary>
             <remarks>As per AISC guidelines, connection design will use slip critical bolts for oversized holes</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorzBracePlateSpecification.GetHssAttachment">
             <summary>
             Specifies how the end of a hss brace is attached to the gusset plate.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorzBracePlateSpecification.GetNotchClearance">
             <summary>
             Specifies the distance, in inches, that the notch on a welded hss section extends past the gusset plate.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorzBracePlateSpecification.GetErectionBolt">
             <summary>
             Specifies the number of erection bolts used to connect a welded hss section to the gusset plate.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorzBracePlateSpecification.GetAngleAttachment">
             <summary>
             Specifies how the end of a single angle brace is attached to the gusset plate.
             </summary>
             <remarks>Applies for single angle braces. Double angles will be bolted.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorzBracePlateSpecification.GetIncludeEndWeld">
             <summary>
             Specifies whether an additional weld is applied to the end of
             a brace that runs perpendicular to the longitudinal axis of the brace.
             </summary>
             <remarks>Only applies when the brace is welded to the gusset plate.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorzBracePlateSpecification.GetBalancedWelds">
             <summary>
             Specifies whether the welds connecting a brace to the gussest are balanced.
             </summary>
             <remarks>Only applies when the brace is welded to the gusset plate.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorzBracePlateSpecification.GetClipEndOperation">
             <summary>
             Specifies if the corner of the gusset plate connected to the brace is clipped.
             </summary>
             <remarks>Only applies to certain brace types, e.g angle, tee, and wide flange.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorzBracePlateSpecification.GetSupportingAttachment">
             <summary>
             Specifies how the gusset plate is attached to the supporting member(s).
             </summary>
             <remarks>
             Some values do not apply in certain situations.
             For example, Welded does not apply when connecting to the web of two beams.
             See SDS2's help on horizontal brace connections for more information.
             </remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorzBracePlateSpecification.GetClipAnglesAttachment">
             <summary>
             Specifies how the gusset plate is attached to the clip angles when
             a the gusset plate is bolted to the supporting member(s).
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorzBracePlateSpecification.GetClipAngleLocation">
             <summary>
             Specifies the location of the clip angle connecting a gusset plate the supporting member.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorzBracePlateSpecification.GetIsAutoClipAngleLocation">
             <summary>
             Specifies whether the location of the clip angle connecting a gusset
             plate to the supporting member(s) is based on setup.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorzBracePlateSpecification.GetIsAutoClipAngleShape">
             <summary>
             Specifies whether the clip angle shape connecting a gusset
             plate to the supporting member(s) is based on setup.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorzBracePlateSpecification.GetClipAngleShape">
             <summary>
             Specifies the clip angle shape for connecting a gusset plate
             and the supporting member when IsAutoClipAngleShape is False.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorzBracePlateSpecification.GetClipAngleLongLegTo">
             <summary>
             Specifies the long leg orientation of the clip angle connecting the
             gusset plate to the supporting member(s).
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorzBracePlateSpecification.GetIsAutoClipAngleSupportedHoleType">
             <summary>
             Specifies if the hole type on the leg of the clip angle connecting the
             gusset plate to the supported member is determined by setup.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorzBracePlateSpecification.GetClipAngleSupportedHoleType">
             <summary>
             Specifies the hole type on the leg of the clip angle connecting the
             gusset plate to the supported member.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorzBracePlateSpecification.GetIsAutoClipAngleSupportingHoleType">
             <summary>
             Specifies if the hole type on the leg of the clip angle connecting the
             gusset plate to the supporting member is determined by setup.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorzBracePlateSpecification.GetClipAngleSupportingHoleType">
             <summary>
             Specifies the hole type on the leg of the clip angle connecting the
             gusset plate to the supporting member.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorzBracePlateSpecification.GetIsAutoClipAngleBoltType">
             <summary>
             Specifies if the bolt type for the bolts involved in connecting the clip angle
             to the supporting member and the brace gusset plate is using the value defined in setup.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorzBracePlateSpecification.GetClipAngleBoltType">
             <summary>
             Specifies the bolt type for the bolts involved in connecting the clip angle
             to the supporting member and the brace gusset plate.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorzBracePlateSpecification.GetIsAutoClipAngleBoltDiameter">
             <summary>
             Specifies if the bolt diameter for the bolts involved in connecting the clip angle
             to the supporting member and the brace gusset plate is using the value defined in setup.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorzBracePlateSpecification.GetClipAngleBoltDiameter">
             <summary>
             Specifies the bolt diameter, in inches, for the bolts involved in connecting the clip angle
             to the supporting member and the brace gusset plate is using the value defined in setup.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorzBracePlateSpecification.GetClipAngleBoltStagger">
             <summary>
             Specifies if the bolts on the two legs of a clip angle
             connecting the supporting member and the brace gusset plate are staggered.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorzBracePlateSpecification.GetSupportingMemberWebStressCheck">
             <summary>
             Specifies how the limit state is incorporated as a check within connection design
             that can potentially cause the connection to fail.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorzBracePlateSpecification.GetBeamToClip">
             <summary>
             Specifies the type of connection used for beam-to-clip.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HorzBracePlateSpecification.GetAttachClipTo">
             <summary>
             Specifies what to attach clip connections to.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorzBracePlateSpecification.IsAutoGrade">
             <summary>
             If true, the system determines the plate grade.
             If false, the value specified in the Grade property will be used.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorzBracePlateSpecification.Grade">
             <summary>
             The grade to set on the plate material for this connection.
             </summary>
             <remarks>Setting this fill flip AutoGrade to false</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorzBracePlateSpecification.GussetCut">
             <summary>
             The end cut for the corner of the gusset plate that meets at the supporting member(s).
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorzBracePlateSpecification.UseOversizedHoles">
             <summary>
             Specifies whether oversized round holes should be used for the brace-to-gusset interface.
             </summary>
             <remarks>As per AISC guidelines, connection design will use slip critical bolts for oversized holes</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorzBracePlateSpecification.HssAttachment">
             <summary>
             Specifies how the end of a hss brace is attached to the gusset plate.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorzBracePlateSpecification.NotchClearance">
             <summary>
             Specifies the distance, in inches, that the notch on a welded hss section extends past the gusset plate.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorzBracePlateSpecification.ErectionBolt">
             <summary>
             Specifies the number of erection bolts used to connect a welded hss section to the gusset plate.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorzBracePlateSpecification.AngleAttachment">
             <summary>
             Specifies how the end of a single angle brace is attached to the gusset plate.
             </summary>
             <remarks>Applies for single angle braces. Double angles will be bolted.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorzBracePlateSpecification.IncludeEndWeld">
             <summary>
             Specifies whether an additional weld is applied to the end of
             a brace that runs perpendicular to the longitudinal axis of the brace.
             </summary>
             <remarks>Only applies when the brace is welded to the gusset plate.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorzBracePlateSpecification.BalancedWelds">
             <summary>
             Specifies whether the welds connecting a brace to the gussest are balanced.
             </summary>
             <remarks>Only applies when the brace is welded to the gusset plate.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorzBracePlateSpecification.ClipEndOperation">
             <summary>
             Specifies if the corner of the gusset plate connected to the brace is clipped.
             </summary>
             <remarks>Only applies to certain brace types, e.g angle, tee, and wide flange.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorzBracePlateSpecification.SupportingAttachment">
             <summary>
             Specifies how the gusset plate is attached to the supporting member(s).
             </summary>
             <remarks>
             Some values do not apply in certain situations.
             For example, Welded does not apply when connecting to the web of two beams.
             See SDS2's help on horizontal brace connections for more information.
             </remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorzBracePlateSpecification.ClipAnglesAttachment">
             <summary>
             Specifies how the gusset plate is attached to the clip angles when
             a the gusset plate is bolted to the supporting member(s).
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorzBracePlateSpecification.ClipAngleLocation">
             <summary>
             Specifies the location of the clip angle connecting a gusset plate the supporting member.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorzBracePlateSpecification.IsAutoClipAngleLocation">
             <summary>
             Specifies whether the location of the clip angle connecting a gusset
             plate to the supporting member(s) is based on setup.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorzBracePlateSpecification.IsAutoClipAngleShape">
             <summary>
             Specifies whether the clip angle shape connecting a gusset
             plate to the supporting member(s) is based on setup.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorzBracePlateSpecification.ClipAngleShape">
             <summary>
             Specifies the clip angle shape for connecting a gusset plate
             and the supporting member when IsAutoClipAngleShape is False.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorzBracePlateSpecification.ClipAngleLongLegTo">
             <summary>
             Specifies the long leg orientation of the clip angle connecting the
             gusset plate to the supporting member(s).
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorzBracePlateSpecification.IsAutoClipAngleSupportedHoleType">
             <summary>
             Specifies if the hole type on the leg of the clip angle connecting the
             gusset plate to the supported member is determined by setup.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorzBracePlateSpecification.ClipAngleSupportedHoleType">
             <summary>
             Specifies the hole type on the leg of the clip angle connecting the
             gusset plate to the supported member.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorzBracePlateSpecification.IsAutoClipAngleSupportingHoleType">
             <summary>
             Specifies if the hole type on the leg of the clip angle connecting the
             gusset plate to the supporting member is determined by setup.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorzBracePlateSpecification.ClipAngleSupportingHoleType">
             <summary>
             Specifies the hole type on the leg of the clip angle connecting the
             gusset plate to the supporting member.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorzBracePlateSpecification.IsAutoClipAngleBoltType">
             <summary>
             Specifies if the bolt type for the bolts involved in connecting the clip angle
             to the supporting member and the brace gusset plate is using the value defined in setup.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorzBracePlateSpecification.ClipAngleBoltType">
             <summary>
             Specifies the bolt type for the bolts involved in connecting the clip angle
             to the supporting member and the brace gusset plate.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorzBracePlateSpecification.IsAutoClipAngleBoltDiameter">
             <summary>
             Specifies if the bolt diameter for the bolts involved in connecting the clip angle
             to the supporting member and the brace gusset plate is using the value defined in setup.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorzBracePlateSpecification.ClipAngleBoltDiameter">
             <summary>
             Specifies the bolt diameter, in inches, for the bolts involved in connecting the clip angle
             to the supporting member and the brace gusset plate is using the value defined in setup.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorzBracePlateSpecification.ClipAngleBoltStagger">
             <summary>
             Specifies if the bolts on the two legs of a clip angle
             connecting the supporting member and the brace gusset plate are staggered.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorzBracePlateSpecification.SupportingMemberWebStressCheck">
             <summary>
             Specifies how the limit state is incorporated as a check within connection design
             that can potentially cause the connection to fail.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorzBracePlateSpecification.BeamToClip">
             <summary>
             Specifies the type of connection used for beam-to-clip.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.HorzBracePlateSpecification.AttachClipTo">
             <summary>
             Specifies what to attach clip connections to.
             </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.NutList.swigCMemOwn">
            
            </member>
        <member name="M:DesignData.SDS2.Model.NutList.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.NutList.Dispose(System.Boolean)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.NutList.NutListEnumerator">
             Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
             whenever the collection is modified. This has been done for changes in the size of the
             collection but not when one of the elements of the collection is modified as it is a bit
             tricky to detect unmanaged code that modifies the collection under our feet.
            </member>
        <member name="M:DesignData.SDS2.Model.NutList.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.NutList.#ctor(DesignData.SDS2.Model.NutList)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.NutList.#ctor(System.Int32)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.StairConnectionShearPlate">
             <summary>Shear plate connection between stair stringer and supporting material</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionShearPlate.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionShearPlate.getCPtr(DesignData.SDS2.Model.StairConnectionShearPlate)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionShearPlate.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionShearPlate.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionShearPlate.GetStringerSide">
             <summary>Specifies the side of the stringer the plate touches.</summary> 
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionShearPlate.GetAttachToMember">
             <summary>Specifies which member that the plate ships with.</summary> 
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionShearPlate.GetAttachmentSupporting">
             <summary>Specifies how the plate connects to the supporting material.</summary>
             <remarks>This data is a copy of the attachment</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for null attachments.</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionShearPlate.GetAttachmentSupported">
             <summary>Specifies how the plate connects to the stair stringer.</summary>
             <remarks>This data is a copy of the attachment</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for null attachments.</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionShearPlate.GetThickness">
             <summary>Specifies plate thickness.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for dimensions less than or equal to 0.0.</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionShearPlate.GetLength">
             <summary>Specifies the plate length.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for dimensions less than or equal to 0.0.</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionShearPlate.GetWidth">
             <summary>Specifies the plate width.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for dimensions less than or equal to 0.0.</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionShearPlate.GetGrade">
             <summary>Specifies the plate material grade.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for invalid grades.</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionShearPlate.GetDimensionToStringerEdge">
             <summary>Specifies the vertical distance from the stringer edge to the plate.</summary> 
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionShearPlate.StringerSide">
             <summary>Specifies the side of the stringer the plate touches.</summary> 
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionShearPlate.AttachToMember">
             <summary>Specifies which member that the plate ships with.</summary> 
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionShearPlate.Thickness">
             <summary>Specifies plate thickness.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for dimensions less than or equal to 0.0.</exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionShearPlate.Length">
             <summary>Specifies the plate length.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for dimensions less than or equal to 0.0.</exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionShearPlate.Width">
             <summary>Specifies the plate width.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for dimensions less than or equal to 0.0.</exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionShearPlate.DimensionToStringerEdge">
             <summary>Specifies the vertical distance from the stringer edge to the plate.</summary> 
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionShearPlate.Grade">
             <summary>Specifies the plate material grade.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for invalid grades.</exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionShearPlate.AttachmentSupporting">
             <summary>Specifies how the plate connects to the supporting material.</summary>
             <remarks>This data is a copy of the attachment</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for null attachments.</exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionShearPlate.AttachmentSupported">
             <summary>Specifies how the plate connects to the stair stringer.</summary>
             <remarks>This data is a copy of the attachment</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for null attachments.</exception>
            
            </member>
        <member name="T:DesignData.SDS2.Model.HoleOperationDirection">
             <summary>Thread direction/handedness</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.HoleOperationDirection.RightHand">
             <summary>Right handed thread</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.HoleOperationDirection.LeftHand">
             <summary>Left handed thread</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.ColdFormedZ">
             <summary>Cold formed Z material</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.ColdFormedZ.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ColdFormedZ.getCPtr(DesignData.SDS2.Model.ColdFormedZ)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ColdFormedZ.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ColdFormedZ.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ColdFormedZ.#ctor(DesignData.SDS2.Setup.ColdFormedZShape)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ColdFormedZ.GetGrade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ColdFormedZ.GetAvailableSteelGrades">
             <summary>A list of steel grades for instances of this material type</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ColdFormedZ.Grade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ColdFormedZ.AvailableSteelGrades">
             <summary>A list of steel grades for instances of this material type</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.BasePlateWeldOuter">
             <summary>Weld options for the outside weld of base plates</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.BasePlateWeldOuter.None">
             <summary>No weld</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.BasePlateWeldOuter.SingleFillet">
             <summary>Fillet weld for general welding of material</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.BasePlateWeldOuter.SolidBevelGroove">
             <summary>
             Bevel groove weld for general full penetration welding of material.
             </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.BasePlateWeldOuter.SolidGroove">
             <summary>
             Bevel groove weld for general full penetration welding of material.
             </summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.LockableCutOperation">
             <summary>Lockable value for CutOperation</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableCutOperation.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableCutOperation.getCPtr(DesignData.SDS2.Model.LockableCutOperation)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableCutOperation.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableCutOperation.#ctor">
                  
            </member>
        <member name="M:DesignData.SDS2.Model.LockableCutOperation.GetValue">
             <summary>The underlying value</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableCutOperation.#ctor(DesignData.SDS2.Model.CutOperation)">
             <summary>Create a locked ViaMemberEdit LockableCutOperation from a CutOperation</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableCutOperation.op_Implicit(DesignData.SDS2.Model.CutOperation)~DesignData.SDS2.Model.LockableCutOperation">
             <summary>Implicit conversion using the CutOperation constructor</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableCutOperation.op_Implicit(DesignData.SDS2.Model.LockableCutOperation)~DesignData.SDS2.Model.CutOperation">
             <summary>Implicit conversion to value type</summary>
            </member>
        <member name="P:DesignData.SDS2.Model.LockableCutOperation.Value">
             <summary>The underlying value</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.HoleOperationList.swigCMemOwn">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationList.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationList.Dispose(System.Boolean)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.HoleOperationList.HoleOperationListEnumerator">
             Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
             whenever the collection is modified. This has been done for changes in the size of the
             collection but not when one of the elements of the collection is modified as it is a bit
             tricky to detect unmanaged code that modifies the collection under our feet.
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationList.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationList.#ctor(DesignData.SDS2.Model.HoleOperationList)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperationList.#ctor(System.Int32)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.BoltFinish">
             <summary>The finish of a bolt</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.BoltFinish.Black">
             <summary>Bare, ungalvanized</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.BoltFinish.MechanicallyGalvanized">
             <summary>Mechanically galvanized</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.BoltFinish.HotDippedGalvanized">
             <summary>Hot dipped galvanized</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.BoltFinish.F1136">
             <summary>Zinc/Aluminum ASTM F1136</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.MomentType">
             <summary>The type of moment connection</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.MomentType.NonMoment">
             <summary>Not a moment connection</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.MomentType.Bolted">
             <summary>A moment connection fastened with bolts</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.MomentType.Welded">
             <summary>A moment connection fastened with welds</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.LockableShape">
             <summary>A lockable value holding a reference to a Shape in the job</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableShape.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableShape.getCPtr(DesignData.SDS2.Model.LockableShape)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableShape.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableShape.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableShape.GetValue">
             <summary>The underlying shape data</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableShape.#ctor(DesignData.SDS2.Setup.Shape)">
             <summary>Create a locked ViaMemberEdit LockableShape from a DesignData.SDS2.Setup.Shape</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableShape.op_Implicit(DesignData.SDS2.Setup.Shape)~DesignData.SDS2.Model.LockableShape">
             <summary>Implicit conversion using the DesignData.SDS2.Setup.Shape constructor</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableShape.op_Implicit(DesignData.SDS2.Model.LockableShape)~DesignData.SDS2.Setup.Shape">
             <summary>Implicit conversion to value type</summary>
            </member>
        <member name="P:DesignData.SDS2.Model.LockableShape.Value">
             <summary>The underlying shape data</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.VerticalBraceEndList.swigCMemOwn">
            
            </member>
        <member name="M:DesignData.SDS2.Model.VerticalBraceEndList.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.VerticalBraceEndList.Dispose(System.Boolean)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.VerticalBraceEndList.VerticalBraceEndListEnumerator">
             Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
             whenever the collection is modified. This has been done for changes in the size of the
             collection but not when one of the elements of the collection is modified as it is a bit
             tricky to detect unmanaged code that modifies the collection under our feet.
            </member>
        <member name="M:DesignData.SDS2.Model.VerticalBraceEndList.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.VerticalBraceEndList.#ctor(DesignData.SDS2.Model.VerticalBraceEndList)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.VerticalBraceEndList.#ctor(System.Int32)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.CopePlate">
             <summary>A 90 degree (L-shaped) cut with a rounded corner</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopePlate.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopePlate.getCPtr(DesignData.SDS2.Model.CopePlate)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopePlate.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopePlate.#ctor">
            
            </member>
        <member name="F:DesignData.SDS2.Model.BoltList.swigCMemOwn">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltList.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltList.Dispose(System.Boolean)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.BoltList.BoltListEnumerator">
             Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
             whenever the collection is modified. This has been done for changes in the size of the
             collection but not when one of the elements of the collection is modified as it is a bit
             tricky to detect unmanaged code that modifies the collection under our feet.
            </member>
        <member name="M:DesignData.SDS2.Model.BoltList.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltList.#ctor(DesignData.SDS2.Model.BoltList)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BoltList.#ctor(System.Int32)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.WeldPenetrationType">
             <summary>Enumerated weld penetration types</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.WeldPenetrationType.NoPenetration">
             <summary>No weld penetration</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.WeldPenetrationType.LimitedThicknessFullPenetration">
             <summary>Limited thickness, full penetration, tail text L</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.WeldPenetrationType.UnlimitedThicknessFullPenetration">
             <summary>Unlimited thickness, full penetration, tail text U</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.WeldPenetrationType.PartialPenetration">
             <summary>partial-penetration, tail text P</summary> 
            </member>
        <member name="T:DesignData.SDS2.Model.Material">
             <summary>
             Material is the base class for all material types.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.getCPtr(DesignData.SDS2.Model.Material)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.GetHandle">
             <summary>The database handle for this object</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.Get(DesignData.SDS2.Database.MaterialHandle)">
             <summary>Get a Material object from a MaterialHandle for the
             current job.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.GetPiecemark">
             <summary> Piecemark is the string identifying any material
             identical to this material.
             </summary>
            
             <remarks> Piecemarks are assigned automatically, and should not
             typically be otherwise assigned.  Piecemarks are typically
             composed of a prefix string from setup indicating the material
             type followed by a number.
             </remarks>
            
             <exception cref="T:DesignData.SDS2.Exceptions.MaterialException">
             Assigning a piecemark may throw an exception if the piecemark
             is already in use.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.GetHoles">
             <summary>The list of holes drilled into this material.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.GetSurface">
             <summary>Retrieve material polygons.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.GetToGlobalCoordinates">
             <summary>Position and orientation of the material in global coordinates</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.GetToMemberCoordinates">
             <summary>Position and orientation of the material with respect to the member</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.GetColor">
             <summary>Get the color of the material</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.GetDescription">
             <summary>A description of the material.  This is either a
             default, automatically generated, description or one entered by
             the user.  If you set this, it will become a user
             description.</summary>
             <remarks>This string maxes out at 22
             characters.  SDS2 will cut off any text after that.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.GetIsUserDescription">
             <summary>True if the description set is a user set description,
             or set through the API</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.GetGrade">
             <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.GetIsMain">
             <summary>If true, then this material is "main" material.  Meaning
             that things are assembled by attaching them to this material.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.GetIsSystem">
             <summary>True if a material was generated by the system and has
             not been modified by the user.  False if it's been modified by
             the user, or was originally created by the user.  The distinction
             between system and user is about whether material is created
             inside process, by software (system), or if it's created by the
             user outside of process either through the API or with builtin
             tools.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.GetSurfaceArea">
             <summary>The surface area around the whole material.  This will not subtract out
             holes but it will subtract out material cuts and clips</summary>
             <remarks>In square inches</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.GetWeight">
             <summary>The weight of the material.</summary>
             <remarks>In pounds</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.GetSurfaceFinish">
             <summary>The surface finish of the material</summary>
             <remarks>For BoltMaterial, this property is ignored.  And BoltFinish should
             be used.</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the material is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when the group member is unlocked while setting the property.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.GetIsInABM">
             <summary>Indicator if the material should be included in the ABM</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the material is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when the group member is unlocked while setting the property.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.GetABM_Name">
             <summary>Name of the ABM this material is on</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the material is invalid.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.GetABM_ID">
             <summary>The ABM id for this material</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the material is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when the group member is unlocked while setting the property.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.GetABM_Note">
             <summary>ABM note for this material</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the material is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when the group member is unlocked while setting the property.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.GetUseAutoLengthInABM">
             <summary>
             False iff the ABM length is static data that does not change.  Otherwise, the length
             is calculated dynamically by SDS2 as it changes.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the material is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when the group member is unlocked while setting the property.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.GetUsePointToPointLengthInABM">
             <summary>
             True iff ABM length is based on the material's point to point length.  Otherwise,
             ABM length is based on the standard ABM length.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the material is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when the group member is unlocked while setting the property.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.GetABM_PointToPointLength">
             <summary>
             ABM point to point length.  Applicable when using point to point
             length for the ABM.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the material is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when the group member is unlocked while setting the property.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.GetABM_Length">
             <summary>
             ABM length.  Applicable when not using point to point length for the ABM.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the material is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when the group member is unlocked while setting the property.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.GetReferenceLocation">
             <summary>The offset from the materials origin point to the materials
             origin reference point.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.GetUsage">
             <summary>The usage description for this material.  This can be
             taken from a table in setup, or it can be set it any 29 character
             (or shorter) string.</summary> <remarks>This must be 29
             characters or shorter.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.GetCNCDownloaded">
             <summary>True if a cnc download file has been generated for this material.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.GetCNCScribeOntoOther">
             <summary>True if this material can be scribed onto other materials it attaches to</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.GetRevisionLevel">
                  
            </member>
        <member name="M:DesignData.SDS2.Model.Material.GetRevisionDate">
             <summary>The last date this was revised</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.GetRoute1">
             <summary>The Mult. Cutting # routing.  Assign these from the first list
             in the routing table on DesignData.SDS2.Database.Job.RoutingDefinitions.</summary>
             <remarks>The definition of this routing could change in the future</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             If the type of routing set is not correct:  You can't set a routing value
             from Route2 to Route1, for example.</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.GetRoute2">
             <summary>The labor code routing.    Assign these from the second list
             in the routing table on DesignData.SDS2.Database.Job.RoutingDefinitions.</summary>
             <remarks>The definition of this routing could change in the future</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             If the type of routing set is not correct:  You can't set a routing value
             from Route2 to Route1, for example.</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.GetRoute3">
             <summary>The job cost code routing.    Assign these from the third list
             in the routing table on DesignData.SDS2.Database.Job.RoutingDefinitions.</summary>
             <remarks>The definition of this routing could change in the future</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             If the type of routing set is not correct:  You can't set a routing value
             from Route2 to Route1, for example.</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.GetRoute4">
             <summary>The remarks routing.    Assign these from the fourth list
             in the routing table on DesignData.SDS2.Database.Job.RoutingDefinitions.</summary>
             <remarks>The definition of this routing could change in the future</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             If the type of routing set is not correct:  You can't set a routing value
             from Route2 to Route1, for example.</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Material.GetCustomPropertyMapHandle">
             <summary>
             A handle to the custom properties for this material.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Material.Piecemark">
             <summary> Piecemark is the string identifying any material
             identical to this material.
             </summary>
            
             <remarks> Piecemarks are assigned automatically, and should not
             typically be otherwise assigned.  Piecemarks are typically
             composed of a prefix string from setup indicating the material
             type followed by a number.
             </remarks>
            
             <exception cref="T:DesignData.SDS2.Exceptions.MaterialException">
             Assigning a piecemark may throw an exception if the piecemark
             is already in use.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Material.ToGlobalCoordinates">
             <summary>Position and orientation of the material in global coordinates</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Material.ToMemberCoordinates">
             <summary>Position and orientation of the material with respect to the member</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Material.Handle">
             <summary>The database handle for this object</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Material.Holes">
             <summary>The list of holes drilled into this material.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Material.Color">
             <summary>Get the color of the material</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Material.IsUserDescription">
             <summary>True if the description set is a user set description,
             or set through the API</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Material.Description">
             <summary>A description of the material.  This is either a
             default, automatically generated, description or one entered by
             the user.  If you set this, it will become a user
             description.</summary>
             <remarks>This string maxes out at 22
             characters.  SDS2 will cut off any text after that.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Material.Grade">
             <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Material.IsMain">
             <summary>If true, then this material is "main" material.  Meaning
             that things are assembled by attaching them to this material.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Material.IsSystem">
             <summary>True if a material was generated by the system and has
             not been modified by the user.  False if it's been modified by
             the user, or was originally created by the user.  The distinction
             between system and user is about whether material is created
             inside process, by software (system), or if it's created by the
             user outside of process either through the API or with builtin
             tools.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Material.SurfaceArea">
             <summary>The surface area around the whole material.  This will not subtract out
             holes but it will subtract out material cuts and clips</summary>
             <remarks>In square inches</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Material.Weight">
             <summary>The weight of the material.</summary>
             <remarks>In pounds</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Material.SurfaceFinish">
             <summary>The surface finish of the material</summary>
             <remarks>For BoltMaterial, this property is ignored.  And BoltFinish should
             be used.</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the material is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when the group member is unlocked while setting the property.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Material.Finish">
             <summary>The surface finish of the material</summary>
             <remarks>For BoltMaterial, this property is ignored.  And BoltFinish should
             be used.</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the material is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when the group member is unlocked while setting the property.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Material.IsInABM">
             <summary>Indicator if the material should be included in the ABM</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the material is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when the group member is unlocked while setting the property.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Material.ABM_Name">
             <summary>Name of the ABM this material is on</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the material is invalid.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Material.ABM_ID">
             <summary>The ABM id for this material</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the material is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when the group member is unlocked while setting the property.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Material.ABM_Note">
             <summary>ABM note for this material</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the material is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when the group member is unlocked while setting the property.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Material.UseAutoLengthInABM">
             <summary>
             False iff the ABM length is static data that does not change.  Otherwise, the length
             is calculated dynamically by SDS2 as it changes.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the material is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when the group member is unlocked while setting the property.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Material.UsePointToPointLengthInABM">
             <summary>
             True iff ABM length is based on the material's point to point length.  Otherwise,
             ABM length is based on the standard ABM length.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the material is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when the group member is unlocked while setting the property.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Material.ABM_PointToPointLength">
             <summary>
             ABM point to point length.  Applicable when using point to point
             length for the ABM.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the material is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when the group member is unlocked while setting the property.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Material.ABM_Length">
             <summary>
             ABM length.  Applicable when not using point to point length for the ABM.
             </summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             InvalidValueException thrown when the material is invalid.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when the group member is unlocked while setting the property.
             </exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Material.CustomPropertyMapHandle">
             <summary>
             A handle to the custom properties for this material.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Material.ReferenceLocation">
             <summary>The offset from the materials origin point to the materials
             origin reference point.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Material.Quantity">
             </member>
        <member name="P:DesignData.SDS2.Model.Material.Usage">
             <summary>The usage description for this material.  This can be
             taken from a table in setup, or it can be set it any 29 character
             (or shorter) string.</summary> <remarks>This must be 29
             characters or shorter.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Material.IsCNCDownloaded">
             <summary>True if a cnc download file has been generated for this material.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Material.IsCNCScribeOntoOther">
             <summary>True if this material can be scribed onto other materials it attaches to</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Material.RevisionLevel">
             </member>
        <member name="P:DesignData.SDS2.Model.Material.RevisionDate">
             <summary>The last date this was revised</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Material.Route1">
             <summary>The Mult. Cutting # routing.  Assign these from the first list
             in the routing table on DesignData.SDS2.Database.Job.RoutingDefinitions.</summary>
             <remarks>The definition of this routing could change in the future</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             If the type of routing set is not correct:  You can't set a routing value
             from Route2 to Route1, for example.</exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Material.Route2">
             <summary>The labor code routing.    Assign these from the second list
             in the routing table on DesignData.SDS2.Database.Job.RoutingDefinitions.</summary>
             <remarks>The definition of this routing could change in the future</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             If the type of routing set is not correct:  You can't set a routing value
             from Route2 to Route1, for example.</exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Material.Route3">
             <summary>The job cost code routing.    Assign these from the third list
             in the routing table on DesignData.SDS2.Database.Job.RoutingDefinitions.</summary>
             <remarks>The definition of this routing could change in the future</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             If the type of routing set is not correct:  You can't set a routing value
             from Route2 to Route1, for example.</exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Material.Route4">
             <summary>The remarks routing.    Assign these from the fourth list
             in the routing table on DesignData.SDS2.Database.Job.RoutingDefinitions.</summary>
             <remarks>The definition of this routing could change in the future</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             If the type of routing set is not correct:  You can't set a routing value
             from Route2 to Route1, for example.</exception>
            
            </member>
        <member name="T:DesignData.SDS2.Model.IMemberRollingOperationSwigImpl">
             <summary>Similar to IRollingOperation for materials, but this is
             limited to the parametric axis roll, and it only applies to
             some members.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.IMemberRollingOperationSwigImpl.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.IMemberRollingOperationSwigImpl.getCPtr(DesignData.SDS2.Model.IMemberRollingOperationSwigImpl)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.IMemberRollingOperationSwigImpl.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.IMemberRollingOperationSwigImpl.Dispose(System.Boolean)">
            
            </member>
        <member name="P:DesignData.SDS2.Model.IMemberRollingOperationSwigImpl.RollType">
             </member>
        <member name="P:DesignData.SDS2.Model.IMemberRollingOperationSwigImpl.MidOrdinateRoll">
             </member>
        <member name="P:DesignData.SDS2.Model.IMemberRollingOperationSwigImpl.IncludedAngleRoll">
             </member>
        <member name="P:DesignData.SDS2.Model.IMemberRollingOperationSwigImpl.RollingRadius">
             </member>
        <member name="P:DesignData.SDS2.Model.IMemberRollingOperationSwigImpl.SpiralRollOffset">
             </member>
        <member name="T:DesignData.SDS2.Model.CopePlain">
             <summary>A simple cut of the flange and web</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopePlain.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopePlain.getCPtr(DesignData.SDS2.Model.CopePlain)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopePlain.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopePlain.GetLength">
             <summary>The length of the cope along the work point
             line</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopePlain.GetDepth">
             <summary>The depth of the cope from the flange</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopePlain.GetRadius">
             <summary>The radius of the corner of the cope</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CopePlain.Length">
             <summary>The length of the cope along the work point
             line</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CopePlain.Depth">
             <summary>The depth of the cope from the flange</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CopePlain.Radius">
             <summary>The radius of the corner of the cope</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopePlain.#ctor">
            
            </member>
        <member name="F:DesignData.SDS2.Model.GratingEndList.swigCMemOwn">
            
            </member>
        <member name="M:DesignData.SDS2.Model.GratingEndList.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.GratingEndList.Dispose(System.Boolean)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.GratingEndList.GratingEndListEnumerator">
             Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
             whenever the collection is modified. This has been done for changes in the size of the
             collection but not when one of the elements of the collection is modified as it is a bit
             tricky to detect unmanaged code that modifies the collection under our feet.
            </member>
        <member name="M:DesignData.SDS2.Model.GratingEndList.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.GratingEndList.#ctor(DesignData.SDS2.Model.GratingEndList)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.GratingEndList.#ctor(System.Int32)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.StairConnectionStringerSide">
             <summary>Stringer side placement for stair connection material</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.StairConnectionStringerSide.Interior">
             <summary>Inside face of the stringer</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.StairConnectionStringerSide.Exterior">
             <summary>Outside face of the stringer</summary> 
            </member>
        <member name="T:DesignData.SDS2.Model.ToeIO">
             <summary>Toe I/O of Member.</summary>
            </member>
        <member name="F:DesignData.SDS2.Model.ToeIO.Far">
             <summary>Far side.  Valid for vertical/horizontal
                      braces with single material.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ToeIO.BackToBack">
             <summary>Back to back.  Valid for vertical braces
                      with double material.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ToeIO.Near">
             <summary>Near side.  Valid for vertical braces with
                      single material, or any horizontal brace</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ToeIO.Star">
             <summary>Star configuration.  Valid for vertical braces
                      with double material.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ToeIO.Both">
             <summary>Both sides.  Valid for horizontal braces with
                      double material.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ToeIO.DoubleNear">
             <summary>Double material near side.  Valid for vertical braces
                      that are a double material.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ToeIO.DoubleFar">
             <summary>Double material far side.  Valid for vertical braces
                      that are a double material.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.SeismicMomentFrameType">
             <summary>The seismic moment frame type for a member's seismic moment design</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.SeismicMomentFrameType.Automatic">
             <summary>Choose between OMF, IMF, and SMF based on settings from setup</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.SeismicMomentFrameType.OMF">
             <summary>Ordinary Moment Frame connections provide less
             resistance to lateral motion than IMF or SMF frames and are only
             recommended for non-seismic or low seismic regions.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.SeismicMomentFrameType.IMF">
             <summary>Intermediate Moment Frame connections are designed to be
             installed in moderate seismic regions.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.SeismicMomentFrameType.SMF">
             <summary>Special Moment Frame connections are designed to resist
             flexural, axial, and shearing actions that result as a building
             sways through multiple inelastic displacement cycles due to a
             strong earthquake.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.CopeFieldWeldN3Standard">
             <summary>Similar to a CopePlain, but for field welds</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeFieldWeldN3Standard.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeFieldWeldN3Standard.getCPtr(DesignData.SDS2.Model.CopeFieldWeldN3Standard)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeFieldWeldN3Standard.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeFieldWeldN3Standard.GetLength">
             <summary>The length of the cope along the work point line</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeFieldWeldN3Standard.GetDepth">
             <summary>The depth of the cope from the flange</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeFieldWeldN3Standard.GetReEntrantRadius">
             <summary>The radius of the corner of the cope</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeFieldWeldN3Standard.GetGrooveAngle">
             <summary>The angle to cut the flange back</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CopeFieldWeldN3Standard.Length">
             <summary>The length of the cope along the work point line</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CopeFieldWeldN3Standard.Depth">
             <summary>The depth of the cope from the flange</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CopeFieldWeldN3Standard.ReEntrantRadius">
             <summary>The radius of the corner of the cope</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CopeFieldWeldN3Standard.GrooveAngle">
             <summary>The angle to cut the flange back</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeFieldWeldN3Standard.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.PinType">
             <summary>
             Type of Pin.
             </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.PinType.Straight">
             <summary>No thread.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.PinType.Headed">
             <summary>Left-handed thread.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.PinType.None">
             <summary>Right-handed thread.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.Member">
             <summary>
             All member data, including data which is slow to access in
             the SDS2 database.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Member.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Member.getCPtr(DesignData.SDS2.Model.Member)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Member.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Member.Get(DesignData.SDS2.Database.MemberHandle)">
             <summary>Get a Member object for the MemberHandle passed in.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Member.GetMaterial">
             <summary>Return a list of all Material on the Member.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Member.GetBolts">
             <summary>The list of all bolts on the members.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Member.GetWelds">
             <summary>Return a list of all welds on the member.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Member.Add(DesignData.SDS2.Model.Member)">
             <summary>Add a new Member to the current Transaction.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException"> If
             there is no Transaction or the Member has already been added to
             the database.  </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Member.Add(DesignData.SDS2.Model.Material)">
             <summary>
             Add a new Material.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Member.Add(DesignData.SDS2.Model.DetailView)">
             <summary>
             Add a new user view. These views are not visable via GetViews() until
             The transaction is committed. In some cases, adding a view may replace
             existing views instead of creating a new view. For example, adding
             a main view will replace the current main view. Adding a cross section
             view will create a new view.
             </summary>
             <remarks>
             Adding a view will add the same view to all members that share the same piecemark
             as defined by the piecemark before the transaction is committed.
             As such, developers should add views after committing any piecemark related changes.
             </remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             If there is no Transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when the member is unlocked.
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Thrown when the view is null or the member has not been added to the database.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Member.Delete(DesignData.SDS2.Model.DetailView)">
             <summary>
             Delete a view. Deleted views are not visable via GetViews() until
             The transaction is committed.
             </summary>
             <remarks>
             Deleting a view will delete the same view from all members that share the same piecemark
             as defined by the piecemark before the transaction is committed.
             As such, developers should delete views after committing any piecemark related changes.
             Deleting a view that does not exist does nothing.
             There are no views to delete on standalone members.
             </remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Thrown the member has not been added to the databbase or when deleting
             a member's main view. To replace the main view, use Add()
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotAddedException">
             If there is no Transaction
             </exception>
             <exception cref="T:DesignData.SDS2.Exceptions.NotLockedException">
             Thrown when the member is unlocked.
             </exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Member.GetComponents">
             <summary>Get a list of all components on this member</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidOperationException">
             If this member has not been added and committed we cannot lookup materials
             for it.</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Member.GetEnds">
             <summary>
             Get both ends in a single list, left then right.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Member.GetViews">
             <summary>Get a deep copy of all views on this member</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Member.GetUseSingleMaterialForWeldedShape">
             <summary>This only applies to the main material, and does not
             necessarily apply to all member types.  This definitely applies
             to beams, columns, vertical braces, and purlins.
            
             If true, SDS2 will create a single piece of material to represent
             several welded plates.  If false, it will create plates as individual
             pieces and weld them together.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Member.GetLiftAssignmentDescription">
             <summary>A description of any assigned crane lift assignment for
             this member.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Member.UseSingleMaterialForWeldedShape">
             <summary>This only applies to the main material, and does not
             necessarily apply to all member types.  This definitely applies
             to beams, columns, vertical braces, and purlins.
            
             If true, SDS2 will create a single piece of material to represent
             several welded plates.  If false, it will create plates as individual
             pieces and weld them together.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Member.Ends">
             <summary>
             Get both ends in a single list, left then right.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Member.LiftAssignmentDescription">
             <summary>A description of any assigned crane lift assignment for
             this member.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.CopeFieldWeldN1FEMA">
             <summary>A cope for FEMA welds.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeFieldWeldN1FEMA.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeFieldWeldN1FEMA.getCPtr(DesignData.SDS2.Model.CopeFieldWeldN1FEMA)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeFieldWeldN1FEMA.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeFieldWeldN1FEMA.GetCopeLength">
             <summary>Length of the cope.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeFieldWeldN1FEMA.GetReEntrantLength">
             <summary>Length of the reentrant cut.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeFieldWeldN1FEMA.GetReEntrantDepth">
             <summary>Depth of the cope from the inside of the flange.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeFieldWeldN1FEMA.GetFlangeFlushLength">
             <summary>Distance from the end of the flange to the beginning of
             the reentrant cut on the flange.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeFieldWeldN1FEMA.GetReEntrantRadius">
             <summary>Radius of the reentrant cut hole.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeFieldWeldN1FEMA.GetGrooveAngle">
             <summary>Angle of the flange weld chamfer.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeFieldWeldN1FEMA.GetReEntrantHoleDistance">
             <summary>Depth of the center of the reentrant cut hole from the
             inside of the flange.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CopeFieldWeldN1FEMA.CopeLength">
             <summary>Length of the cope.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CopeFieldWeldN1FEMA.ReEntrantLength">
             <summary>Length of the reentrant cut.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CopeFieldWeldN1FEMA.ReEntrantDepth">
             <summary>Depth of the cope from the inside of the flange.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CopeFieldWeldN1FEMA.FlangeFlushLength">
             <summary>Distance from the end of the flange to the beginning of
             the reentrant cut on the flange.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CopeFieldWeldN1FEMA.ReEntrantRadius">
             <summary>Radius of the reentrant cut hole.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CopeFieldWeldN1FEMA.GrooveAngle">
             <summary>Angle of the flange weld chamfer.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CopeFieldWeldN1FEMA.ReEntrantHoleDistance">
             <summary>Depth of the center of the reentrant cut hole from the
             inside of the flange.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeFieldWeldN1FEMA.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.CopeShopWeldN1FEMA">
             <summary>A cope for FEMA welds.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeShopWeldN1FEMA.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeShopWeldN1FEMA.getCPtr(DesignData.SDS2.Model.CopeShopWeldN1FEMA)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeShopWeldN1FEMA.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeShopWeldN1FEMA.GetCopeLength">
             <summary>Length of the cope.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeShopWeldN1FEMA.GetReEntrantLength">
             <summary>Length of the reentrant cut.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeShopWeldN1FEMA.GetReEntrantDepth">
             <summary>Depth of the cope from the inside of the flange.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeShopWeldN1FEMA.GetClipWeb">
             <summary>Length and depth clipped from the corner of the coped
             web.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeShopWeldN1FEMA.GetFlangeFlushLength">
             <summary>Distance from the end of the flange to the beginning of
             the reentrant cut on the flange.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeShopWeldN1FEMA.GetReEntrantRadius">
             <summary>Radius of the reentrant cut hole.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeShopWeldN1FEMA.GetGrooveAngle">
             <summary>Angle of the flange weld chamfer.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeShopWeldN1FEMA.GetReEntrantHoleDistance">
             <summary>Depth of the center of the reentrant cut hole from the
             inside of the flange.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CopeShopWeldN1FEMA.CopeLength">
             <summary>Length of the cope.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CopeShopWeldN1FEMA.ReEntrantLength">
             <summary>Length of the reentrant cut.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CopeShopWeldN1FEMA.ReEntrantDepth">
             <summary>Depth of the cope from the inside of the flange.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CopeShopWeldN1FEMA.ClipWeb">
             <summary>Length and depth clipped from the corner of the coped
             web.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CopeShopWeldN1FEMA.FlangeFlushLength">
             <summary>Distance from the end of the flange to the beginning of
             the reentrant cut on the flange.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CopeShopWeldN1FEMA.ReEntrantRadius">
             <summary>Radius of the reentrant cut hole.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CopeShopWeldN1FEMA.GrooveAngle">
             <summary>Angle of the flange weld chamfer.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CopeShopWeldN1FEMA.ReEntrantHoleDistance">
             <summary>Depth of the center of the reentrant cut hole from the
             inside of the flange.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeShopWeldN1FEMA.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.RolledPlateFabricationMethod">
             <summary>Methods for fabricating rolled material</summary>
            </member>
        <member name="F:DesignData.SDS2.Model.RolledPlateFabricationMethod.ContinuousRolling">
             <summary>The curve of the rolled material will be smooth and continuous.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.RolledPlateFabricationMethod.SegmentedBending">
             <summary>Causes the rolled material to be a series of flat
             (not-curved) bend segments. The number of segments is the number
             entered to "Bend segments."</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.ShearMaterialType">
             <summary>Material types which can be used for shear tabs</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ShearMaterialType.Plate">
             <summary>Use a simple rectangular plate.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ShearMaterialType.Wtee">
             <summary>Use a W-Tee section.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ShearMaterialType.BuiltupPlates">
             <summary>Use a W-Tee shaped section builtup from rectangular plates.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.EndPlateSpecification">
             <summary>An end plate connection</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.EndPlateSpecification.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.EndPlateSpecification.getCPtr(DesignData.SDS2.Model.EndPlateSpecification)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.EndPlateSpecification.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.EndPlateSpecification.#ctor">
                  
            </member>
        <member name="M:DesignData.SDS2.Model.EndPlateSpecification.GetWideGage">
             <summary>true, which is 'wide,' specifies that the system
             to create a wide gage end plate per the center-to-center distance
             entered in setup (Fabricator Setup &gt; Standard Fabricator
             Connections &gt; End Plate Settings &gt; "Center to center holes, wide
             gage").
            
             false, which is 'narrow,' instructs the system to create a
             narrow gage end plate per the center-to-center distance entered
             in setup (Fabricator Setup &gt; Standard Fabricator Connections &gt;
             End Plate Settings &gt; "Center to center holes, narrow gage").
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.EndPlateSpecification.GetSafetyConnection">
             <summary>applies when two beams with end plates frame to opposite
             sides of a supporting column web (or a beam web). In such a
             framing situation, the end plates on the two beams will share
             bolts.
            
             See documentation on enumeration for individual settings</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.EndPlateSpecification.GetWeldedExtendedTee">
             <summary>can apply to a beam with an end plate connection framing
             perpendicular or sloping or skewed to a supporting beam. "Moment
             type" must be set to 'Non-moment' in the beam's " Moment"
             leaf. The option is also available for non-monent end plates that
             are specified in Job Setup &gt; User Defined Connections or Auto
             Standard Connections.
            
             If true, the system is instructed to generate a built-up tee (two
             plates welded together) for the end plate to bolt to. For some
             framing situations, the check box for "Full depth extended tee"
             controls whether the tee is designed to the depth of the
             connection or to the full depth of the supporting beam.
            
             If false, the end plate bolts directly to the supporting beam's
             web.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.EndPlateSpecification.GetFullDepthTee">
             <summary>applies when -- here in " Connection specifications" --
             the box is checked for " Welded extended tee."
            
             If true, the system is instructed to a built-up tee that is the
             full depth of the supporting beam.
            
             If false, the built-up tee is designed to the depth of the end
             plate if the top and bottom flanges of the supported beam (this
             beam) are entirely below or entirely above the half-depth of the
             supporting beam. If the depth of the supported beam is greater
             than half the depth of the supporting beam, the built-up tee is
             designed to the full depth of the supporting beam.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.EndPlateSpecification.GetExtendToBeamFlanges">
             <summary>option can apply to a 'Non-moment' end plate on a wide
             flange or HSS rectangular/tube beam when an axial load ("Tension"
             or "Compression") has been entered on this end of the beam. The
             option is also available for non-monent end plates that are
             specified in Job Setup &gt; User Defined Connections. It does not
             apply to auto standard connections.
            
            
             If true, the system attempts to create an end plate that welds to
             the flanges (as well as the web) of the beam. The end plate is
             extended the "Extension dimension" distance above/below the
             top/bottom flanges of the beam.
            
             If false, the system is instructed to create the end plate so
             that its upper and lower edges are inside the top and bottom
             flanges of the beam.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.EndPlateSpecification.GetUseExpandedVerticalBoltSpacing">
             <summary>option applies to end plates on beams whose "Moment
             type" is set to 'Non-moment' in this beam end's " Moment"
             leaf. The option is also available for non-monent end plates that
             are specified in Job Setup &gt; User Defined Connections or Auto
             Standard Connections.
            
             Automatic specifies that the system apply the choice made
             to Fabricator Setup &gt; Standard Fabricator Connections &gt; End Plate
             Setup &gt; "Use expanded vertical bolt spacing."
            
             Yes instructs the system to expand the vertical spacing of
             bolts to 1.5 times or 2 times the Fabricator Setup &gt; Connection
             Detailing/Fabricator Options &gt; "Bolt spacing" that is set per
             bolt diameter. A spacing other than 1.5 or 2 times the standard
             bolt spacing may be used in order to accommodate piecemarking
             issues, loading conditions and unusual geometries.
            
             No instructs the system to use the Fabricator Setup &gt;
             Connection Erectability Settings &gt; "Bolt spacing" that is
             set per bolt diameter.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.EndPlateSpecification.GetCombineBeamAndVBraceEndPlates">
             <summary>For an angle, W tee or channel vertical brace framing to
             a beam and column, the system creates an end plate for the
             gusset-to-column interface if the beam connects to the column
             with an end plate. This " Connection specifications" option sets
             whether or not the end plates can be combined into a single end
             plate.
            
             Automatic specifies that the system apply the choice made to
             Fabricator Setup &gt; Standard Fabricator Connections &gt; End Plate
             Setup &gt; "Combine beam and vertical brace end plates."
            
             Yes instructs the system to create a single end plate to connect
             both the beam and the vertical brace gusset plate to the column.
            
             No instructs the system to create two separate end plates, one to
             connect the beam to the column, the other to connect the vertical
             brace gusset plate to the column.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.EndPlateSpecification.GetAxialLoadCheck">
             <summary>The "Supporting member web stress (T)" will be reported
             as a "Left/Right end limit state" when a "Tension" load has been
             applied to the supported beam's end plate connection end. This
             option affects whether or not that limit state is incorporated as
             a check within the system that can potentially cause the
             end plate connection to fail.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.EndPlateSpecification.GetExtensionDimension">
             <summary>The distance the system is instructed to extend the end
             plate above/below the top/bottom flanges of the beam. For this to
             apply, ExtendToBeamFlanges must be true.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.EndPlateSpecification.GetUseWebExtensionPlate">
             <summary>can apply to an end plate on a beam framing to a
             column. Regardless of the choice made here, " Web Extension
             Plate" the system locks are available. These locks have
             null values (distances of 0) if a web extehension plate is not
             required and when 'Never' is specified.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.EndPlateSpecification.IsWideGage">
             <summary>true, which is 'wide,' specifies that the system
             to create a wide gage end plate per the center-to-center distance
             entered in setup (Fabricator Setup &gt; Standard Fabricator
             Connections &gt; End Plate Settings &gt; "Center to center holes, wide
             gage").
            
             false, which is 'narrow,' instructs the system to create a
             narrow gage end plate per the center-to-center distance entered
             in setup (Fabricator Setup &gt; Standard Fabricator Connections &gt;
             End Plate Settings &gt; "Center to center holes, narrow gage").
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.EndPlateSpecification.SafetyConnection">
             <summary>applies when two beams with end plates frame to opposite
             sides of a supporting column web (or a beam web). In such a
             framing situation, the end plates on the two beams will share
             bolts.
            
             See documentation on enumeration for individual settings</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.EndPlateSpecification.IsWeldedExtendedTee">
             <summary>can apply to a beam with an end plate connection framing
             perpendicular or sloping or skewed to a supporting beam. "Moment
             type" must be set to 'Non-moment' in the beam's " Moment"
             leaf. The option is also available for non-monent end plates that
             are specified in Job Setup &gt; User Defined Connections or Auto
             Standard Connections.
            
             If true, the system is instructed to generate a built-up tee (two
             plates welded together) for the end plate to bolt to. For some
             framing situations, the check box for "Full depth extended tee"
             controls whether the tee is designed to the depth of the
             connection or to the full depth of the supporting beam.
            
             If false, the end plate bolts directly to the supporting beam's
             web.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.EndPlateSpecification.IsFullDepthTee">
             <summary>applies when -- here in " Connection specifications" --
             the box is checked for " Welded extended tee."
            
             If true, the system is instructed to a built-up tee that is the
             full depth of the supporting beam.
            
             If false, the built-up tee is designed to the depth of the end
             plate if the top and bottom flanges of the supported beam (this
             beam) are entirely below or entirely above the half-depth of the
             supporting beam. If the depth of the supported beam is greater
             than half the depth of the supporting beam, the built-up tee is
             designed to the full depth of the supporting beam.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.EndPlateSpecification.ExtendToBeamFlanges">
             <summary>option can apply to a 'Non-moment' end plate on a wide
             flange or HSS rectangular/tube beam when an axial load ("Tension"
             or "Compression") has been entered on this end of the beam. The
             option is also available for non-monent end plates that are
             specified in Job Setup &gt; User Defined Connections. It does not
             apply to auto standard connections.
            
            
             If true, the system attempts to create an end plate that welds to
             the flanges (as well as the web) of the beam. The end plate is
             extended the "Extension dimension" distance above/below the
             top/bottom flanges of the beam.
            
             If false, the system is instructed to create the end plate so
             that its upper and lower edges are inside the top and bottom
             flanges of the beam.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.EndPlateSpecification.UseExpandedVerticalBoltSpacing">
             <summary>option applies to end plates on beams whose "Moment
             type" is set to 'Non-moment' in this beam end's " Moment"
             leaf. The option is also available for non-monent end plates that
             are specified in Job Setup &gt; User Defined Connections or Auto
             Standard Connections.
            
             Automatic specifies that the system apply the choice made
             to Fabricator Setup &gt; Standard Fabricator Connections &gt; End Plate
             Setup &gt; "Use expanded vertical bolt spacing."
            
             Yes instructs the system to expand the vertical spacing of
             bolts to 1.5 times or 2 times the Fabricator Setup &gt; Connection
             Detailing/Fabricator Options &gt; "Bolt spacing" that is set per
             bolt diameter. A spacing other than 1.5 or 2 times the standard
             bolt spacing may be used in order to accommodate piecemarking
             issues, loading conditions and unusual geometries.
            
             No instructs the system to use the Fabricator Setup &gt;
             Connection Erectability Settings &gt; "Bolt spacing" that is
             set per bolt diameter.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.EndPlateSpecification.CombineBeamAndVBraceEndPlates">
             <summary>For an angle, W tee or channel vertical brace framing to
             a beam and column, the system creates an end plate for the
             gusset-to-column interface if the beam connects to the column
             with an end plate. This " Connection specifications" option sets
             whether or not the end plates can be combined into a single end
             plate.
            
             Automatic specifies that the system apply the choice made to
             Fabricator Setup &gt; Standard Fabricator Connections &gt; End Plate
             Setup &gt; "Combine beam and vertical brace end plates."
            
             Yes instructs the system to create a single end plate to connect
             both the beam and the vertical brace gusset plate to the column.
            
             No instructs the system to create two separate end plates, one to
             connect the beam to the column, the other to connect the vertical
             brace gusset plate to the column.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.EndPlateSpecification.AxialLoadCheck">
             <summary>The "Supporting member web stress (T)" will be reported
             as a "Left/Right end limit state" when a "Tension" load has been
             applied to the supported beam's end plate connection end. This
             option affects whether or not that limit state is incorporated as
             a check within the system that can potentially cause the
             end plate connection to fail.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.EndPlateSpecification.ExtensionDimension">
             <summary>The distance the system is instructed to extend the end
             plate above/below the top/bottom flanges of the beam. For this to
             apply, ExtendToBeamFlanges must be true.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.EndPlateSpecification.UseWebExtensionPlate">
             <summary>can apply to an end plate on a beam framing to a
             column. Regardless of the choice made here, " Web Extension
             Plate" the system locks are available. These locks have
             null values (distances of 0) if a web extehension plate is not
             required and when 'Never' is specified.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.LockableBasePlateWeldWithGroove">
             <summary>Lockable value for BasePlateWeldWithGroove</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBasePlateWeldWithGroove.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBasePlateWeldWithGroove.getCPtr(DesignData.SDS2.Model.LockableBasePlateWeldWithGroove)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBasePlateWeldWithGroove.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBasePlateWeldWithGroove.#ctor">
                  
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBasePlateWeldWithGroove.GetValue">
             <summary>The underlying value</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBasePlateWeldWithGroove.#ctor(DesignData.SDS2.Model.BasePlateWeldWithGroove)">
             <summary>Create a locked ViaMemberEdit LockableBasePlateWeldWithGroove from a BasePlateWeldWithGroove</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBasePlateWeldWithGroove.op_Implicit(DesignData.SDS2.Model.BasePlateWeldWithGroove)~DesignData.SDS2.Model.LockableBasePlateWeldWithGroove">
             <summary>Implicit conversion using the BasePlateWeldWithGroove constructor</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBasePlateWeldWithGroove.op_Implicit(DesignData.SDS2.Model.LockableBasePlateWeldWithGroove)~DesignData.SDS2.Model.BasePlateWeldWithGroove">
             <summary>Implicit conversion to value type</summary>
            </member>
        <member name="P:DesignData.SDS2.Model.LockableBasePlateWeldWithGroove.Value">
             <summary>The underlying value</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.BentPlateEnd">
             <summary>The end of a bent plate.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlateEnd.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlateEnd.getCPtr(DesignData.SDS2.Model.BentPlateEnd)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlateEnd.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlateEnd.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlateEnd.GetSetback">
             <summary>The setback from the end where the plate material starts.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlateEnd.GetLeg1CutAngle">
             <summary>Angle to cut across the end of the plate leg.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.BentPlateEnd.GetLeg2CutAngle">
             <summary>Angle to cut across the end of the plate leg.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BentPlateEnd.Setback">
             <summary>The setback from the end where the plate material starts.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BentPlateEnd.Leg1CutAngle">
             <summary>Angle to cut across the end of the plate leg.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.BentPlateEnd.Leg2CutAngle">
             <summary>Angle to cut across the end of the plate leg.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.StairConnectionFloorClip">
             <summary>Clip angle connection between stair stringer and supporting floor material</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionFloorClip.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionFloorClip.getCPtr(DesignData.SDS2.Model.StairConnectionFloorClip)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionFloorClip.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionFloorClip.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionFloorClip.GetStringerSide">
             <summary>Specifies the side of the stringer the clip angle touches.</summary> 
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionFloorClip.GetAttachToMember">
             <summary>Specifies which member that the clip angle ships with.</summary> 
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionFloorClip.GetAttachmentSupporting">
             <summary>Specifies how the clip angle connects to the supporting material.</summary>
             <remarks>This data is a copy of the attachment</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for null attachments.</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionFloorClip.GetAttachmentSupported">
             <summary>Specifies how the clip angle connects to the stair stringer.</summary>
             <remarks>This data is a copy of the attachment</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for null attachments.</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionFloorClip.GetShape">
             <summary>Specifies the clip angle shape.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for null shapes.</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionFloorClip.GetLength">
             <summary>Specifies the clip angle length.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for dimensions less than or equal to 0.0.</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionFloorClip.GetLongLegTo">
             <summary>Specifies which member the long leg of the clip angle touches.</summary> 
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionFloorClip.GetGrade">
             <summary>Specifies the clip angle material grade.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for invalid grades.</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionFloorClip.GetDimensionToStringerEdge">
             <summary>Specifies the vertical distance from the stringer edge to the clip angle.</summary> 
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionFloorClip.GetIsLocatedAtSetbackElevation">
             <summary>Specifies if the connection elevation should adjust based on the stringer's end setback.</summary> 
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionFloorClip.StringerSide">
             <summary>Specifies the side of the stringer the clip angle touches.</summary> 
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionFloorClip.AttachToMember">
             <summary>Specifies which member that the clip angle ships with.</summary> 
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionFloorClip.Length">
             <summary>Specifies the clip angle length.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for dimensions less than or equal to 0.0.</exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionFloorClip.DimensionToStringerEdge">
             <summary>Specifies the vertical distance from the stringer edge to the clip angle.</summary> 
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionFloorClip.IsLocatedAtSetbackElevation">
             <summary>Specifies if the connection elevation should adjust based on the stringer's end setback.</summary> 
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionFloorClip.LongLegTo">
             <summary>Specifies which member the long leg of the clip angle touches.</summary> 
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionFloorClip.Shape">
             <summary>Specifies the clip angle shape.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for null shapes.</exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionFloorClip.Grade">
             <summary>Specifies the clip angle material grade.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for invalid grades.</exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionFloorClip.AttachmentSupporting">
             <summary>Specifies how the clip angle connects to the supporting material.</summary>
             <remarks>This data is a copy of the attachment</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for null attachments.</exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.StairConnectionFloorClip.AttachmentSupported">
             <summary>Specifies how the clip angle connects to the stair stringer.</summary>
             <remarks>This data is a copy of the attachment</remarks>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown for null attachments.</exception>
            
            </member>
        <member name="T:DesignData.SDS2.Model.RectangularPlate">
             <summary>A rectangular steel plate.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RectangularPlate.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.RectangularPlate.getCPtr(DesignData.SDS2.Model.RectangularPlate)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.RectangularPlate.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.RectangularPlate.GetWorkpointLength">
             <summary>The workpoint length of the plate.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RectangularPlate.GetOrderLength">
             <summary>The length of the plate as it would need to be ordered.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RectangularPlate.GetWidth">
             <summary>The width of the plate.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RectangularPlate.GetPartLength">
             <summary>This reports the distance parallel with the X axis of
             the material from the furthest point on the material's left end
             (first work point end) to the furthest point on the material's
             right end. Unlike the OrderLength, this distance is measured
             after end cuts are made to the material. In most cases, the PartLength
             and OrderLength are exactly the same.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RectangularPlate.GetThicknessReferencePoint">
             <summary>The center plane of the plate.  Changing this shifts the
             plate without changing the work points of the plate.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RectangularPlate.GetEnds">
             <summary>Objects to represent the ends of the plate along the
             length, corresponding to the workpoints</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RectangularPlate.ThicknessReferencePoint">
             <summary>The center plane of the plate.  Changing this shifts the
             plate without changing the work points of the plate.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RectangularPlate.Ends">
             <summary>Objects to represent the ends of the plate along the
             length, corresponding to the workpoints</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RectangularPlate.Width">
             <summary>The width of the plate.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RectangularPlate.OrderLength">
             <summary>The length of the plate as it would need to be ordered.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RectangularPlate.WorkpointLength">
             <summary>The workpoint length of the plate.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RectangularPlate.PartLength">
             <summary>This reports the distance parallel with the X axis of
             the material from the furthest point on the material's left end
             (first work point end) to the furthest point on the material's
             right end. Unlike the OrderLength, this distance is measured
             after end cuts are made to the material. In most cases, the PartLength
             and OrderLength are exactly the same.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RectangularPlate.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.ColdFormedChannel">
             <summary>Cold formed channel material</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.ColdFormedChannel.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ColdFormedChannel.getCPtr(DesignData.SDS2.Model.ColdFormedChannel)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ColdFormedChannel.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ColdFormedChannel.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ColdFormedChannel.#ctor(DesignData.SDS2.Setup.ColdFormedChannelShape)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ColdFormedChannel.GetGrade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ColdFormedChannel.GetAvailableSteelGrades">
             <summary>A list of steel grades for instances of this material type</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ColdFormedChannel.Grade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ColdFormedChannel.AvailableSteelGrades">
             <summary>A list of steel grades for instances of this material type</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.MomentConnectionMaterial">
             <summary>The kind of extra material to add to a connection for the
             moment</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.MomentConnectionMaterial.None">
             <summary>No additional material used</summary>
             <remarks>Only applicable with MomentType.Welded</remarks>
            
            </member>
        <member name="F:DesignData.SDS2.Model.MomentConnectionMaterial.Plate">
             <summary>Use plates to build the moment connection</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.MomentConnectionMaterial.Angle">
             <summary>Use angles to build the moment connection</summary>
             <remarks>Only applicable with MomentType.Bolted</remarks>
            
            </member>
        <member name="T:DesignData.SDS2.Model.Channel">
             <summary>A channel material</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Channel.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Channel.getCPtr(DesignData.SDS2.Model.Channel)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Channel.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Channel.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Channel.#ctor(DesignData.SDS2.Setup.ChannelShape)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Channel.GetToeDirection">
             <summary>Determines which direction the flanges of the channel
             point.  The flanges being the "toe"</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Channel.GetGrade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Channel.GetAvailableSteelGrades">
             <summary>A list of steel grades, valid for Channel, which can be
             assigned to the Grade property of a Channel</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Channel.Grade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Channel.ToeDirection">
             <summary>Determines which direction the flanges of the channel
             point.  The flanges being the "toe"</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Channel.AvailableSteelGrades">
             <summary>A list of steel grades, valid for Channel, which can be
             assigned to the Grade property of a Channel</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.HoleOperation">
             <summary>Base class for hole operations.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperation.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperation.getCPtr(DesignData.SDS2.Model.HoleOperation)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperation.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.HoleOperation.Dispose(System.Boolean)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.BeamExtensionPlateWeldType">
             <summary>Beam extension plate weld options</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.BeamExtensionPlateWeldType.None">
             <summary>No weld</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.BeamExtensionPlateWeldType.SingleBevelGroove">
             <summary>
             Bevel groove weld for general full penetration welding of material.
             </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.BeamExtensionPlateWeldType.DoubleBevelGroove">
             <summary>
             Bevel groove weld for general full penetration welding of material.
             </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.BeamExtensionPlateWeldType.SquareButtGroove">
             <summary>
             Square groove weld for butt joints of material 3/8" thick or less
             </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.BeamExtensionPlateWeldType.SingleVGroove">
             <summary>V groove weld for butt joints of thicker material.</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.BeamExtensionPlateWeldType.DoubleVGroove">
             <summary>V groove weld for butt joints of thicker material.</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.BeamExtensionPlateWeldType.SingleUGroove">
             <summary>
             U groove weld for butt joints of thicker material.
             </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.BeamExtensionPlateWeldType.DoubleUGroove">
             <summary>V groove weld for butt joints of thicker material.</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.BeamExtensionPlateWeldType.SingleJGroove">
             <summary>
             J groove weld for special full penetration welding of material.
             </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.BeamExtensionPlateWeldType.DoubleJGroove">
             <summary>
             J groove weld for special full penetration welding of material.
             </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.BeamExtensionPlateWeldType.GrooveWithSquareBackGroove">
                  
            </member>
        <member name="T:DesignData.SDS2.Model.PythonComponent">
             <summary>A component implemented in python</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.PythonComponent.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.PythonComponent.getCPtr(DesignData.SDS2.Model.PythonComponent)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.PythonComponent.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.PythonComponent.GetPythonObject">
             <summary>The underlying python object for this component.  Use this object
             with the "dynamic" type in csharp.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.PythonComponent.PythonObject">
             <summary>The underlying python object for this component.  Use this object
             with the "dynamic" type in csharp.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.PlateCutOperation">
             <summary>Base class for plate cut operations</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.PlateCutOperation.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.PlateCutOperation.getCPtr(DesignData.SDS2.Model.PlateCutOperation)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.PlateCutOperation.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.PlateCutOperation.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.PlateCutOperation.GetLength">
             <summary>The length of the cut operation</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.PlateCutOperation.GetWidth">
             <summary>The width of the cut operation</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.PlateCutOperation.Length">
             <summary>The length of the cut operation</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.PlateCutOperation.Width">
             <summary>The width of the cut operation</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.AutoGussetSupporting">
             <summary>
             Attachment method for clip to connection.
             </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.AutoGussetSupporting.Auto">
             <summary> Auto select. </summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.AutoGussetSupporting.Gusset">
             <summary> On Gusset. </summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.AutoGussetSupporting.Supporting">
             <summary> On Supporting. </summary> 
            </member>
        <member name="T:DesignData.SDS2.Model.LockablePlateSide">
              
            </member>
        <member name="M:DesignData.SDS2.Model.LockablePlateSide.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockablePlateSide.getCPtr(DesignData.SDS2.Model.LockablePlateSide)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockablePlateSide.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockablePlateSide.#ctor">
                  
            </member>
        <member name="M:DesignData.SDS2.Model.LockablePlateSide.GetValue">
             <summary>The underlying value</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockablePlateSide.#ctor(DesignData.SDS2.Model.PlateSide)">
             <summary>Create a locked ViaMemberEdit LockablePlateSide from a PlateSide</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockablePlateSide.op_Implicit(DesignData.SDS2.Model.PlateSide)~DesignData.SDS2.Model.LockablePlateSide">
             <summary>Implicit conversion using the PlateSide constructor</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockablePlateSide.op_Implicit(DesignData.SDS2.Model.LockablePlateSide)~DesignData.SDS2.Model.PlateSide">
             <summary>Implicit conversion to value type</summary>
            </member>
        <member name="P:DesignData.SDS2.Model.LockablePlateSide.Value">
             <summary>The underlying value</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.LockableEndCutType">
             <summary>Lockable value for end cuts</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableEndCutType.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableEndCutType.getCPtr(DesignData.SDS2.Model.LockableEndCutType)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableEndCutType.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableEndCutType.#ctor">
                  
            </member>
        <member name="M:DesignData.SDS2.Model.LockableEndCutType.GetValue">
             <summary>The underlying value</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.LockableEndCutType.Value">
             <summary>The underlying value</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.ShearTabSpecification">
             <summary>A shear tab connection</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShearTabSpecification.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShearTabSpecification.getCPtr(DesignData.SDS2.Model.ShearTabSpecification)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShearTabSpecification.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShearTabSpecification.#ctor">
                  
            </member>
        <member name="M:DesignData.SDS2.Model.ShearTabSpecification.GetShearMaterialType">
             <summary>The material type to use to make the shear tab</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShearTabSpecification.GetAttachmentMethod">
             <summary>The attachment method for the shear tab, to the
             supporting material.  This is only used if the MaterialType is
             set to a Wtee for a built-up plate.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShearTabSpecification.GetUseThroughPlate">
             <summary>If the supporting column is a tube, run the shear plate
             through the wall of the tube.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShearTabSpecification.GetExtendPastFlange">
             <summary>Set the supported beam back beyond the flange of the
             supporting column (when connecting to the column web) if true.
             If false, clip the supported beam so that it fits inside the
             column flange.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShearTabSpecification.GetUseStiffenerOppositeShearTab">
             <summary>If true, put a stiffener on the opposite the shear tab
             when framing into the web of a beam</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShearTabSpecification.GetAttachToMember">
             <summary>Which member to attach connection material to, supported
             or supporting.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShearTabSpecification.GetUsePaddlePlate">
             <summary>If the supported beam is a tube, when true this will use
             a paddle plate to connect the tube, rather than shear tabs on
             each side of the tube.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShearTabSpecification.GetSide">
             <summary>Which side of the supported member to put the shear
             plate on.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShearTabSpecification.GetSupportCondition">
             <summary>For ASD9 and LRFD3 only</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShearTabSpecification.GetCombineShearTab">
             <summary>When this end of this beam frames to a column with a
             single-plate shear connection and a vertical brace frames to this
             beam and that same column, the system can either create one
             combined shear plate or two shear plates (one for the
             beam-to-column interface, the second for the gusset-to-column
             interface).</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShearTabSpecification.GetSkewPlateHoles">
             <summary>If set to yes, the rows of holes will be parallel with
             the supported beam flange.  If set to no, they will be parallel
             with the supporting column.  Automatic will pull this setting
             from setup.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShearTabSpecification.GetUseBackupBar">
             <summary>Applies to skewed beam-to-beam or beam-to-column
             single-plate shear connections with angles to the supported
             member of less than 45 degrees. Standard AISC practices call for
             a back-up bar to be used for such welds.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShearTabSpecification.GetUseAlternateEccentricity">
             <summary>Applies when 'ASD13' or 'LRFD13' or a newer AISC method
             is the "Connection design method." It applies to " Extend past
             flange" shear connections. Per the AISC 13th Edition, p 10-103
             and AISC 14th Edition, p 10-104, "alternate considerations of the
             design eccentricity are acceptable when justified by rational
             analysis.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShearTabSpecification.GetAxialLoadCheck">
             <summary> The "Supporting member web stress" will be reported as
             a "Left/Right end limit state" when a "Tension load" has been
             applied to the supported beam's shear plate connection end. This
             option affects whether or not that limit state is incorporated as
             a check within connection design that can potentially cause the
             shear plate connection to fail</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShearTabSpecification.GetExtendToWebByForce">
             <summary>Only applies if ExtendPastFlange is true.  If true, this
             will force the stabilizer plates to be extended to the web.  If
             false, the system will decide if that is necessary and do so if
             required.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShearTabSpecification.GetUseHSSReinforcementPlate">
             <summary>When set to Yes, column reinforcement plates are
             designed, as needed, for non-moment shear plates or welded moment
             connections to an HSS rectangular or TS column. If No and column
             wall reinforcement is needed, you will get the end connection
             failure.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShearTabSpecification.GetEmbedLocation">
             <summary>Applies when a beam frames to a concrete wall.  If
             InsideWall, then the embed plate will be modeled inside the
             concrete wall.  When OutsideWall, it is attached to the outside
             of the wall.  Automatic will pull this option from
             setup.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShearTabSpecification.GetUseExpandedVerticalBoltSpacing">
             <summary>Applies to 'Non-moment' shear plates or shear tees to a
             beam or a column.  If Yes, permits the system to expand the
             vertical spacing of bolts to 1.5 times or 2 times the Fabricator
             Setup &gt; Connection Erectability Settings &gt; "Bolt spacing"
             that is set per bolt diameter. The system may also adjust to a
             spacing other than 1.5 or 2 times the standard bolt spacing in
             order to accommodate piecemarking issues, loading conditions and
             unusual geometries.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ShearTabSpecification.GetBevelShearTab">
             <summary>Per AISC, beveling of a 5/16- to 3/8-inch shear plate is
             required when the dihedral angle is between 45 and 60 degrees. A
             1/2-inch shear plate is required to be beveled from 22° to 45°
             from perpendicular.  Yes will bevel as needed, where No will
             never bevel.  Automatic pulls this option from setup.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ShearTabSpecification.ShearMaterialType">
             <summary>The material type to use to make the shear tab</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ShearTabSpecification.AttachmentMethod">
             <summary>The attachment method for the shear tab, to the
             supporting material.  This is only used if the MaterialType is
             set to a Wtee for a built-up plate.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ShearTabSpecification.UseThroughPlate">
             <summary>If the supporting column is a tube, run the shear plate
             through the wall of the tube.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ShearTabSpecification.ExtendPastFlange">
             <summary>Set the supported beam back beyond the flange of the
             supporting column (when connecting to the column web) if true.
             If false, clip the supported beam so that it fits inside the
             column flange.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ShearTabSpecification.UseStiffenerOppositeShearTab">
             <summary>If true, put a stiffener on the opposite the shear tab
             when framing into the web of a beam</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ShearTabSpecification.AttachToMember">
             <summary>Which member to attach connection material to, supported
             or supporting.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ShearTabSpecification.DisablePlastificationCheck">
             </member>
        <member name="P:DesignData.SDS2.Model.ShearTabSpecification.UsePaddlePlate">
             <summary>If the supported beam is a tube, when true this will use
             a paddle plate to connect the tube, rather than shear tabs on
             each side of the tube.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ShearTabSpecification.Side">
             <summary>Which side of the supported member to put the shear
             plate on.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ShearTabSpecification.TopExtension">
             </member>
        <member name="P:DesignData.SDS2.Model.ShearTabSpecification.BottomExtension">
             </member>
        <member name="P:DesignData.SDS2.Model.ShearTabSpecification.SupportCondition">
             <summary>For ASD9 and LRFD3 only</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ShearTabSpecification.CombineShearTab">
             <summary>When this end of this beam frames to a column with a
             single-plate shear connection and a vertical brace frames to this
             beam and that same column, the system can either create one
             combined shear plate or two shear plates (one for the
             beam-to-column interface, the second for the gusset-to-column
             interface).</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ShearTabSpecification.SkewPlateHoles">
             <summary>If set to yes, the rows of holes will be parallel with
             the supported beam flange.  If set to no, they will be parallel
             with the supporting column.  Automatic will pull this setting
             from setup.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ShearTabSpecification.FlangePlateEnd">
             </member>
        <member name="P:DesignData.SDS2.Model.ShearTabSpecification.UseBackupBar">
             <summary>Applies to skewed beam-to-beam or beam-to-column
             single-plate shear connections with angles to the supported
             member of less than 45 degrees. Standard AISC practices call for
             a back-up bar to be used for such welds.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ShearTabSpecification.UseAlternateEccentricity">
             <summary>Applies when 'ASD13' or 'LRFD13' or a newer AISC method
             is the "Connection design method." It applies to " Extend past
             flange" shear connections. Per the AISC 13th Edition, p 10-103
             and AISC 14th Edition, p 10-104, "alternate considerations of the
             design eccentricity are acceptable when justified by rational
             analysis.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ShearTabSpecification.AxialLoadCheck">
             <summary> The "Supporting member web stress" will be reported as
             a "Left/Right end limit state" when a "Tension load" has been
             applied to the supported beam's shear plate connection end. This
             option affects whether or not that limit state is incorporated as
             a check within connection design that can potentially cause the
             shear plate connection to fail</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ShearTabSpecification.ExtendToWebByForce">
             <summary>Only applies if ExtendPastFlange is true.  If true, this
             will force the stabilizer plates to be extended to the web.  If
             false, the system will decide if that is necessary and do so if
             required.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ShearTabSpecification.UseHSSReinforcementPlate">
             <summary>When set to Yes, column reinforcement plates are
             designed, as needed, for non-moment shear plates or welded moment
             connections to an HSS rectangular or TS column. If No and column
             wall reinforcement is needed, you will get the end connection
             failure.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ShearTabSpecification.EmbedLocation">
             <summary>Applies when a beam frames to a concrete wall.  If
             InsideWall, then the embed plate will be modeled inside the
             concrete wall.  When OutsideWall, it is attached to the outside
             of the wall.  Automatic will pull this option from
             setup.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ShearTabSpecification.UseExpandedVerticalBoltSpacing">
             <summary>Applies to 'Non-moment' shear plates or shear tees to a
             beam or a column.  If Yes, permits the system to expand the
             vertical spacing of bolts to 1.5 times or 2 times the Fabricator
             Setup &gt; Connection Erectability Settings &gt; "Bolt spacing"
             that is set per bolt diameter. The system may also adjust to a
             spacing other than 1.5 or 2 times the standard bolt spacing in
             order to accommodate piecemarking issues, loading conditions and
             unusual geometries.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ShearTabSpecification.BevelShearTab">
             <summary>Per AISC, beveling of a 5/16- to 3/8-inch shear plate is
             required when the dihedral angle is between 45 and 60 degrees. A
             1/2-inch shear plate is required to be beveled from 22° to 45°
             from perpendicular.  Yes will bevel as needed, where No will
             never bevel.  Automatic pulls this option from setup.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.IfRequiredNever">
             <summary>See documentation on property using this to see meaning</summary>
            </member>
        <member name="F:DesignData.SDS2.Model.IfRequiredNever.Never">
                  
            </member>
        <member name="F:DesignData.SDS2.Model.IfRequiredNever.IfRequired">
                  
            </member>
        <member name="T:DesignData.SDS2.Model.EndPreparation">
             <summary> End preparation lockables for most builtin members types
             (such as beams and braces).  These are convenience methods for looking
             up lockables normally found on ConnectionComponent.GetLockable</summary>
             <see cref="M:DesignData.SDS2.Model.ConnectionComponent.GetLockable(System.String)" />
            
            </member>
        <member name="M:DesignData.SDS2.Model.EndPreparation.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.EndPreparation.getCPtr(DesignData.SDS2.Model.EndPreparation)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.EndPreparation.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.EndPreparation.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.EndPreparation.GetEndCutType">
             <summary>The end cut type for this end.  This is a shortcut for getting
             the appropriate lockable from the connection component for this end.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.EndPreparation.GetWebCutAngle">
             <summary>The web cut angle for this end.  This is a shortcut for getting
             the appropriate lockable from the connection component for this end.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.EndPreparation.GetFlangeCutAngle">
             <summary>The flange cut angle for this end.  This is a shortcut for getting
             the appropriate lockable from the connection component for this end.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.EndPreparation.GetMomentConnectionWebSetback">
             <summary>The moment web setback for this end.  This is a shortcut for getting
             the appropriate lockable from the connection component for this end.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.EndPreparation.EndCutType">
             <summary>The end cut type for this end.  This is a shortcut for getting
             the appropriate lockable from the connection component for this end.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.EndPreparation.WebCutAngle">
             <summary>The web cut angle for this end.  This is a shortcut for getting
             the appropriate lockable from the connection component for this end.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.EndPreparation.FlangeCutAngle">
             <summary>The flange cut angle for this end.  This is a shortcut for getting
             the appropriate lockable from the connection component for this end.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.EndPreparation.MomentConnectionWebSetback">
             <summary>The moment web setback for this end.  This is a shortcut for getting
             the appropriate lockable from the connection component for this end.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.PlateWasherCombinationMethod">
             <summary>The method of combining plate washers for a set of bolts</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.PlateWasherCombinationMethod.SinglePlate">
             <summary>Cover all bolts bolting the same hole group with a single plate</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.PlateWasherCombinationMethod.Strips">
             <summary>Cover bolts in single columns with one plate per column</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.CopeFieldWeldN3">
             <summary>Designates weld preparation and/or a cut to remove part of
             the top/bottom flange plus part of the web.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeFieldWeldN3.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeFieldWeldN3.getCPtr(DesignData.SDS2.Model.CopeFieldWeldN3)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeFieldWeldN3.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeFieldWeldN3.GetLength">
             <summary>The length of the cope along the work point line</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeFieldWeldN3.GetDepth">
             <summary>The depth of the cope from the flange, perpindicular to the length</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeFieldWeldN3.GetReEntrantRadius">
             <summary>The radius of the corner of the cope</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeFieldWeldN3.GetGrooveAngle">
             <summary>Angle of the bevel on the flange</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CopeFieldWeldN3.Length">
             <summary>The length of the cope along the work point line</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CopeFieldWeldN3.Depth">
             <summary>The depth of the cope from the flange, perpindicular to the length</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CopeFieldWeldN3.ReEntrantRadius">
             <summary>The radius of the corner of the cope</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CopeFieldWeldN3.GrooveAngle">
             <summary>Angle of the bevel on the flange</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CopeFieldWeldN3.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.Pipe">
             <summary>A pipe material</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Pipe.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Pipe.getCPtr(DesignData.SDS2.Model.Pipe)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Pipe.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Pipe.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Pipe.#ctor(DesignData.SDS2.Setup.PipeShape)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Pipe.GetGrade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Pipe.GetAvailableSteelGrades">
             <summary>A list of steel grades, valid for Pipe, which can be
             assigned to the Grade property of a Pipe</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Pipe.Grade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Pipe.AvailableSteelGrades">
             <summary>A list of steel grades, valid for Pipe, which can be
             assigned to the Grade property of a Pipe</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.CutFlangeWidth">
             <summary>For S shapes and W shapes and Wtees, it applies two flange
             cuts, one on the near side and the other on the far side.  Both cut
             to the web.  A zero near side or far side length means no cut is made
             on that side.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CutFlangeWidth.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CutFlangeWidth.getCPtr(DesignData.SDS2.Model.CutFlangeWidth)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CutFlangeWidth.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CutFlangeWidth.GetLengthNearSide">
             <summary>The length to cut back from the end of the flange along the work line
             for the near side flange cut.  0 for no cut</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CutFlangeWidth.GetLengthFarSide">
             <summary>The length to cut back from the end of the flange along the work line
             for the far side flange cut.  0 for no cut</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CutFlangeWidth.GetWidth">
             <summary>The width of flange to leave along the web.  Instead of
             changing this to zero, use a CutFlangeFlush operation.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CutFlangeWidth.LengthNearSide">
             <summary>The length to cut back from the end of the flange along the work line
             for the near side flange cut.  0 for no cut</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CutFlangeWidth.LengthFarSide">
             <summary>The length to cut back from the end of the flange along the work line
             for the far side flange cut.  0 for no cut</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CutFlangeWidth.Width">
             <summary>The width of flange to leave along the web.  Instead of
             changing this to zero, use a CutFlangeFlush operation.</summary>
             <remarks>If this cut operation is on a material, then lockables are
             always in a locked state.  For members, the locked state matters.
             When assigning one of these values using a primitive double, it will
             lock and assign that value.  When working directly with the
             LockableDouble, you will need to lock the value in addition to
             assigning it to override the system value.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CutFlangeWidth.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.WasherType">
             <summary>Enumeration of valid values for the WasherType attribute of
             Bolt.  </summary>
            </member>
        <member name="F:DesignData.SDS2.Model.WasherType.None">
                 
            </member>
        <member name="F:DesignData.SDS2.Model.WasherType.Flat">
                 
            </member>
        <member name="F:DesignData.SDS2.Model.WasherType.Hardened">
                 
            </member>
        <member name="F:DesignData.SDS2.Model.WasherType.Bevel">
                 
            </member>
        <member name="F:DesignData.SDS2.Model.WasherType.SquarePlate">
                 
            </member>
        <member name="F:DesignData.SDS2.Model.WasherType.DirectTensionIndicator">
                 
            </member>
        <member name="F:DesignData.SDS2.Model.WasherType.RoundPlate">
                 
            </member>
        <member name="F:DesignData.SDS2.Model.WasherType.Hillside">
                 
            </member>
        <member name="F:DesignData.SDS2.Model.WasherType.DoubleThickHardened">
                 
            </member>
        <member name="F:DesignData.SDS2.Model.WasherType.HeavyPlate">
                 
            </member>
        <member name="F:DesignData.SDS2.Model.WasherType.MaterialPlate">
                 
            </member>
        <member name="T:DesignData.SDS2.Model.BasePlateWeldInner">
             <summary>Weld options for the inside weld of base plates</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.BasePlateWeldInner.None">
             <summary>No weld</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.BasePlateWeldInner.SingleFillet">
             <summary>Fillet weld for general welding of material</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.BasePlateWeldInner.SolidGroove">
             <summary>
             Bevel groove weld for general full penetration welding of material.
             </summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.Turnbuckle">
             <summary>A steel turnbuckle.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Turnbuckle.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Turnbuckle.getCPtr(DesignData.SDS2.Model.Turnbuckle)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Turnbuckle.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Turnbuckle.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Turnbuckle.#ctor(DesignData.SDS2.Setup.TurnbuckleShape)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.Turnbuckle.GetLeftThreadType">
             <summary>Thread direction of the left end.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Turnbuckle.GetRightThreadType">
             <summary>Thread direction of the right end.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Turnbuckle.GetGrade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.Turnbuckle.GetAvailableSteelGrades">
             <summary>A list of steel grades, valid for Turnbuckles, which can be
             assigned to the Grade property of a Turnbuckle</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Turnbuckle.Grade">
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">
             Attempting to set a grade not in this type of material's grade list will
             throw an InvalidValueException.  This is determined by searching that grade
             list for a grade which is equal (operator ==).
             </exception>
            
            <summary>Returns a steel grade, or null if not applicable</summary>
             <remarks>To set a grade look for the Grade property on the derived class.  You'll
             need to choose a grade from an appropriate grade list for that material type.  Which
             can be found in a static property, on that class, called AvailableSteelGrades.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Turnbuckle.LeftThreadType">
             <summary>Thread direction of the left end.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Turnbuckle.RightThreadType">
             <summary>Thread direction of the right end.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.Turnbuckle.AvailableSteelGrades">
             <summary>A list of steel grades, valid for Turnbuckles, which can be
             assigned to the Grade property of a Turnbuckle</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.StiffClip">
             <summary>Stiffener clip options</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.StiffClip.One">
             <summary>One clip</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.StiffClip.Both">
             <summary>Both clips</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.SplicePlateSpecification">
             <summary>A splice plate connection</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SplicePlateSpecification.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.SplicePlateSpecification.getCPtr(DesignData.SDS2.Model.SplicePlateSpecification)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.SplicePlateSpecification.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.SplicePlateSpecification.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.SplicePlateSpecification.GetSide">
             <summary>Side(s) of the member that the web connection material is on</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SplicePlateSpecification.GetWebPlatesOn">
             <summary>Member end(s) that the web plates ship with</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SplicePlateSpecification.GetIsColumnWebPlateAdded">
             <summary>True when a web plate is specified. (columns only)</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SplicePlateSpecification.GetIsColumnButtPlateAdded">
             <summary>True when a butt plate is specified. (columns only)</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SplicePlateSpecification.GetIsColumnChannelWebConnection">
             <summary>True when a channel web is specified. (columns only)</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SplicePlateSpecification.GetColumnChannelWebLowerConnectionMethod">
             <summary>Attachment method of channel web connection. (columns only)</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SplicePlateSpecification.GetFlangePlatesOn">
             <summary>Member end(s) that the flange plates ship with (beams only)</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SplicePlateSpecification.GetAutoGrade">
             <summary>
             If true, the system determines the splice plate grade.
             If false, the value specified in the Grade property will be used.
             </summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.SplicePlateSpecification.GetGrade">
             <summary>
             The grade to set on the splice plate material for this connection.
             This value does not apply to a column channel web.
             </summary>
             <remarks>Setting this fill flip AutoGrade to false</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SplicePlateSpecification.ColumnSpliceAttachmentMethod">
             </member>
        <member name="P:DesignData.SDS2.Model.SplicePlateSpecification.Side">
             <summary>Side(s) of the member that the web connection material is on</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SplicePlateSpecification.WebPlatesOn">
             <summary>Member end(s) that the web plates ship with</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SplicePlateSpecification.IsColumnWebPlateAdded">
             <summary>True when a web plate is specified. (columns only)</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SplicePlateSpecification.IsColumnButtPlateAdded">
             <summary>True when a butt plate is specified. (columns only)</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SplicePlateSpecification.IsColumnChannelWebConnection">
             <summary>True when a channel web is specified. (columns only)</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SplicePlateSpecification.ColumnChannelWebLowerConnectionMethod">
             <summary>Attachment method of channel web connection. (columns only)</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SplicePlateSpecification.FlangePlatesOn">
             <summary>Member end(s) that the flange plates ship with (beams only)</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SplicePlateSpecification.IsAutoGrade">
             <summary>
             If true, the system determines the splice plate grade.
             If false, the value specified in the Grade property will be used.
             </summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.SplicePlateSpecification.Grade">
             <summary>
             The grade to set on the splice plate material for this connection.
             This value does not apply to a column channel web.
             </summary>
             <remarks>Setting this fill flip AutoGrade to false</remarks>
            
            </member>
        <member name="T:DesignData.SDS2.Model.StairConnectionSpecification">
             <summary>Base class for StairConnection types</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionSpecification.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionSpecification.getCPtr(DesignData.SDS2.Model.StairConnectionSpecification)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionSpecification.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.StairConnectionSpecification.Dispose(System.Boolean)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.GrooveAngle">
             <summary>The angle of bevel on the flange of the beam.  From a very
             short list of allowed options, named in degrees.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.GrooveAngle.Automatic">
             <summary>Establish from setup options</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.GrooveAngle.Zero">
             <summary>No bevel</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.GrooveAngle.Fifteen">
             <summary>15 degrees</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.GrooveAngle.Thirty">
             <summary>30 degrees</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.GrooveAngle.FortyFive">
             <summary>45 degrees</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.GrooveAngle.Sixty">
             <summary>60 degrees</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.RolledPlate">
             <summary>A plate rolled around its first workpoint</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RolledPlate.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.RolledPlate.getCPtr(DesignData.SDS2.Model.RolledPlate)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.RolledPlate.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.RolledPlate.GetOrderLength">
             <summary>The length of the plate as it would need to be ordered.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RolledPlate.GetWorkpointLength">
             <summary>The workpoint length of the plate.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RolledPlate.GetWidth">
             <summary>The width of the plate.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RolledPlate.GetOutsideRadius">
             <summary>The distance from the outside corner the rolled plate to
             the center of an imaginary circle extrapolated from the outside
             edges of the rolled plate. This distance must be measured at the
             end of the rolled plate where the first work point that was
             located if the "Outside tapered radius" results in a
             taper.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RolledPlate.GetOutsideTaperedRadius">
             <summary>A distance specifying the radius of the rolled plate
             from the end opposite to where the first work point was
             located.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RolledPlate.GetIncludedAngle">
             <summary>An angle more than 0 and less than 2PI radians.  This is
             the share of a circle that the plate fills.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RolledPlate.GetThicknessReferencePoint">
             <summary>The center plane of the plate.  Changing this shifts the
             plate without changing the work points of the plate.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.RolledPlate.GetFabricationMethod">
             <summary>The method used to fabricate the rolled plate</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RolledPlate.ThicknessReferencePoint">
             <summary>The center plane of the plate.  Changing this shifts the
             plate without changing the work points of the plate.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RolledPlate.OrderLength">
             <summary>The length of the plate as it would need to be ordered.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RolledPlate.Width">
             <summary>The width of the plate.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RolledPlate.WorkpointLength">
             <summary>The workpoint length of the plate.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RolledPlate.OutsideRadius">
             <summary>The distance from the outside corner the rolled plate to
             the center of an imaginary circle extrapolated from the outside
             edges of the rolled plate. This distance must be measured at the
             end of the rolled plate where the first work point that was
             located if the "Outside tapered radius" results in a
             taper.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RolledPlate.OutsideTaperedRadius">
             <summary>A distance specifying the radius of the rolled plate
             from the end opposite to where the first work point was
             located.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RolledPlate.IncludedAngle">
             <summary>An angle more than 0 and less than 2PI radians.  This is
             the share of a circle that the plate fills.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RolledPlate.FabricationMethod">
             <summary>The method used to fabricate the rolled plate</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.RolledPlate.BendSegments">
             </member>
        <member name="M:DesignData.SDS2.Model.RolledPlate.#ctor">
            
            </member>
        <member name="T:DesignData.SDS2.Model.MomentConnectionType">
             <summary>The standard the moment connection follows</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.MomentConnectionType.AISC_Eurocode">
             <summary>The typical value for both AISC and eurocode connections.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.MomentConnectionType.MBMA">
             <summary>Only available on AISC bolted moment end plate connections</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.CuttableMaterialEnd">
             <summary>A material end which can be setback or have a simple web or
             flange cut applied.  Some derived classes offer significantly more
             cutting options.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CuttableMaterialEnd.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CuttableMaterialEnd.getCPtr(DesignData.SDS2.Model.CuttableMaterialEnd)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CuttableMaterialEnd.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CuttableMaterialEnd.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.CuttableMaterialEnd.GetSetback">
             <summary>The setback from the end where the plate material starts.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CuttableMaterialEnd.GetWebCutAngle">
             <summary>Angle to cut across the end of the bar relative to the "Web".</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.CuttableMaterialEnd.GetFlangeCutAngle">
             <summary>Angle to cut across the end of the bar relative to the "Flange".</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CuttableMaterialEnd.Setback">
             <summary>The setback from the end where the plate material starts.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CuttableMaterialEnd.WebCutAngle">
             <summary>Angle to cut across the end of the bar relative to the "Web".</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.CuttableMaterialEnd.FlangeCutAngle">
             <summary>Angle to cut across the end of the bar relative to the "Flange".</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.WeldSegment">
             <summary> WeldSegment represents the position and orientation in the
             model of a logical segment of a weld.  The segment may be stitched,
             so the weld between the two points of the segment may not be
             continuous. </summary>
            </member>
        <member name="M:DesignData.SDS2.Model.WeldSegment.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldSegment.getCPtr(DesignData.SDS2.Model.WeldSegment)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldSegment.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldSegment.Dispose(System.Boolean)">
            
            </member>
        <member name="P:DesignData.SDS2.Model.WeldSegment.p1">
             <summary>End point of a logical weld segment.</summary>
            
            </member>
        <member name="P:DesignData.SDS2.Model.WeldSegment.p2">
             <summary>End point of a logical weld segment.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.SafetySeatLocation">
             <summary>Location options for where to place a safety seat with
             respect to the beam</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.SafetySeatLocation.Bottom">
             <summary>Below the beam</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.SafetySeatLocation.Top">
             <summary>Above the beam</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.VertBraceWideFlangeAttachmentMethod">
             <summary>
             A specification for how the flanges of a vertical wide flange brace
             connects to the gusset plate.
             </summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.VertBraceWideFlangeAttachmentMethod.Automatic">
             <summary>Use setup to determine the connection</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.VertBraceWideFlangeAttachmentMethod.None">
             <summary>No wide flange flange connection</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.VertBraceWideFlangeAttachmentMethod.ClawAngles">
             <summary>Connect with angles on both sides of the gusset connecting to the wide flange flanges</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.VertBraceWideFlangeAttachmentMethod.PaddlePlates">
             <summary>Connect with plates on the wide flange flanges with notches for the gusset plate to fit into.</summary> 
            </member>
        <member name="T:DesignData.SDS2.Model.LockableAttachToMember">
             <summary>A lockable for the AttachToMember enum</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableAttachToMember.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableAttachToMember.getCPtr(DesignData.SDS2.Model.LockableAttachToMember)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableAttachToMember.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableAttachToMember.#ctor">
                  
            </member>
        <member name="M:DesignData.SDS2.Model.LockableAttachToMember.GetValue">
             <summary>The underlying value</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableAttachToMember.#ctor(DesignData.SDS2.Model.AttachToMember)">
             <summary>Create a locked ViaMemberEdit LockableAttachToMember from a AttachToMember</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableAttachToMember.op_Implicit(DesignData.SDS2.Model.AttachToMember)~DesignData.SDS2.Model.LockableAttachToMember">
             <summary>Implicit conversion using the AttachToMember constructor</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableAttachToMember.op_Implicit(DesignData.SDS2.Model.LockableAttachToMember)~DesignData.SDS2.Model.AttachToMember">
             <summary>Implicit conversion to value type</summary>
            </member>
        <member name="P:DesignData.SDS2.Model.LockableAttachToMember.Value">
             <summary>The underlying value</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.ConnectionSpecification">
             <summary>Specification to design specific connection types.  This is a base class,
             all options are found on derived connection types.</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ConnectionSpecification.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ConnectionSpecification.getCPtr(DesignData.SDS2.Model.ConnectionSpecification)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ConnectionSpecification.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ConnectionSpecification.Dispose(System.Boolean)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.ColumnSpliceAttachmentMethod">
             <summary>The method to attach spliced columns.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ColumnSpliceAttachmentMethod.WeldedWithoutFlangePlates">
             <summary>Weld one column end directly to the other column</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ColumnSpliceAttachmentMethod.BoltedFlangePlates">
             <summary>Bolt flange plates to both columns ends</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ColumnSpliceAttachmentMethod.WeldedFlangePlates">
             <summary>Weld flange plates to one column end and bolt to the other column</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.ModelCompleteMode">
             <summary>SDS2 has two distinct modes for model complete.  A legacy
             mode that's not very strict and generally just warns users to not change
             a member.  And a restrictive mode which actively prevents changes.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ModelCompleteMode.Automatic">
             <summary>Look to a setup option to decide which mode is preferred</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ModelCompleteMode.Legacy">
             <summary>Use the legacy mode, this allows changes to be made to members
             by APIs and user interfaces.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ModelCompleteMode.Restrictive">
             <summary>Use the restrictive mode, this disallows changes in the user
             interface and causes APIs to throw exceptions when attempting to change
             model complete members.</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.StairConnectionLongLegTo">
             <summary>Long leg placement for stair connection clip angle material</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.StairConnectionLongLegTo.Supporting">
             <summary>Long leg rests on supporting material</summary> 
            </member>
        <member name="F:DesignData.SDS2.Model.StairConnectionLongLegTo.Supported">
             <summary>Long leg rests on supported material</summary> 
            </member>
        <member name="T:DesignData.SDS2.Model.LockableBasePlateWeldInner">
             <summary>Lockable value for BasePlateWeldInner</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBasePlateWeldInner.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBasePlateWeldInner.getCPtr(DesignData.SDS2.Model.LockableBasePlateWeldInner)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBasePlateWeldInner.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBasePlateWeldInner.#ctor">
                  
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBasePlateWeldInner.GetValue">
             <summary>The underlying value</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBasePlateWeldInner.#ctor(DesignData.SDS2.Model.BasePlateWeldInner)">
             <summary>Create a locked ViaMemberEdit LockableBasePlateWeldInner from a BasePlateWeldInner</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBasePlateWeldInner.op_Implicit(DesignData.SDS2.Model.BasePlateWeldInner)~DesignData.SDS2.Model.LockableBasePlateWeldInner">
             <summary>Implicit conversion using the BasePlateWeldInner constructor</summary>
            </member>
        <member name="M:DesignData.SDS2.Model.LockableBasePlateWeldInner.op_Implicit(DesignData.SDS2.Model.LockableBasePlateWeldInner)~DesignData.SDS2.Model.BasePlateWeldInner">
             <summary>Implicit conversion to value type</summary>
            </member>
        <member name="P:DesignData.SDS2.Model.LockableBasePlateWeldInner.Value">
             <summary>The underlying value</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.ConnectionComponent">
             <summary>A builtin connection component</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ConnectionComponent.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ConnectionComponent.getCPtr(DesignData.SDS2.Model.ConnectionComponent)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ConnectionComponent.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.ConnectionComponent.GetLockables">
             <summary>Get a map of all lockables on this connection</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ConnectionComponent.GetInputSpecification">
             <summary>The requested connection specification input by the user.  This can
             be modified in place, or a new specification can be made and assigned to this.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown if the
             input specification isn't valid for this member type.</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ConnectionComponent.GetDesignedSpecification">
             <summary>The connection specification the system used to design
             the current connection.  This can vary from the requested when
             the system determines that the requested specification is
             invalid.  Or if the requested spec is auto standard, this will be
             filled in with the actual connection specification that auto
             standard applied.</summary>
             <remarks>This should be considered readonly.  Changes you make here will not modify
             the designed connection.</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ConnectionComponent.GetLockable(System.String)">
             <summary>Get a single lockable by name.  Doing this with the map
             would work just as well, but this can be more efficient if you
             just need one.</summary>
             <remarks>This will be a copy of the lockable.  If you make changes to it, to see
             them reflected you will need to pass it to SetLockable</remarks>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ConnectionComponent.SetLockable(System.String,DesignData.SDS2.Model.Lockable)">
             <summary>Apply a lockable value to this connection.  You can only pass in
             names which would return a non-null lockable from GetLockable (so you can't
             add new lockable keys this way, you can just replace their value).</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidOperationException">
             Thrown when attempting to override a locked lockable within process.  Unless
             you are implementing an extension of SDS2 (such as a custom member) this does
             not apply.</exception>
            
            </member>
        <member name="M:DesignData.SDS2.Model.ConnectionComponent.GetLabelForLockableName(System.String)">
             <summary>Use this method to translate names in the map returned
             by GetLockables into the labels visible on the edit screen.  This
             is useful to help figure out what name you should use in your
             code to map to a name you see on the screen.
            
             The returned name will be translated into the user's local language.
            
             If this returns an empty string, then the name was not found.</summary>
            
             <remarks>Your final code should not include use of this method,
             this is for debugging purposes.</remarks>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ConnectionComponent.InputSpecification">
             <summary>The requested connection specification input by the user.  This can
             be modified in place, or a new specification can be made and assigned to this.</summary>
             <exception cref="T:DesignData.SDS2.Exceptions.InvalidValueException">Thrown if the
             input specification isn't valid for this member type.</exception>
            
            </member>
        <member name="P:DesignData.SDS2.Model.ConnectionComponent.DesignedSpecification">
             <summary>The connection specification the system used to design
             the current connection.  This can vary from the requested when
             the system determines that the requested specification is
             invalid.  Or if the requested spec is auto standard, this will be
             filled in with the actual connection specification that auto
             standard applied.</summary>
             <remarks>This should be considered readonly.  Changes you make here will not modify
             the designed connection.</remarks>
            
            </member>
        <member name="T:DesignData.SDS2.Model.GratingEnd">
             <summary>The end of a grating material</summary>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GratingEnd.#ctor(System.IntPtr,System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.GratingEnd.getCPtr(DesignData.SDS2.Model.GratingEnd)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.GratingEnd.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.GratingEnd.Dispose(System.Boolean)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.GratingEnd.GetBandThickness">
             <summary>Thickness of the end band.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="M:DesignData.SDS2.Model.GratingEnd.GetCutAngle">
             <summary>
             Angle to cut across the end of the grating where 0 is a sqr cut.
             </summary>
             <value>A floating point value in radians.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GratingEnd.BandThickness">
             <summary>Thickness of the end band.</summary>
             <value>A floating point value in inches.</value>
            
            </member>
        <member name="P:DesignData.SDS2.Model.GratingEnd.CutAngle">
             <summary>
             Angle to cut across the end of the grating where 0 is a sqr cut.
             </summary>
             <value>A floating point value in radians.</value>
            
            </member>
        <member name="T:DesignData.SDS2.Model.PlateSide">
             <summary>Which side the plate goes on</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.PlateSide.Neither">
             <summary>Do not place a plate on either side</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.PlateSide.Near">
             <summary>Only place a plate on the near side</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.PlateSide.Far">
             <summary>Only place a plate on the far side</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.PlateSide.Both">
             <summary>Place a plate on each side</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.ColumnEnd">
             <summary>Enumeration representing the ends of a column.</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ColumnEnd.Bottom">
             <summary>The bottom most</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ColumnEnd.Top">
             <summary>The top most</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.WeldSegmentList.swigCMemOwn">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldSegmentList.Finalize">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldSegmentList.Dispose(System.Boolean)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.WeldSegmentList.WeldSegmentListEnumerator">
             Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
             whenever the collection is modified. This has been done for changes in the size of the
             collection but not when one of the elements of the collection is modified as it is a bit
             tricky to detect unmanaged code that modifies the collection under our feet.
            </member>
        <member name="M:DesignData.SDS2.Model.WeldSegmentList.#ctor">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldSegmentList.#ctor(DesignData.SDS2.Model.WeldSegmentList)">
            
            </member>
        <member name="M:DesignData.SDS2.Model.WeldSegmentList.#ctor(System.Int32)">
            
            </member>
        <member name="T:DesignData.SDS2.Model.DatabaseExtensionMethods">
             <summary>
               Extension methods for DesignData.SDS2.Database.  These are all
               convenience methods and will appear to be on classes in DesignData.SDS2.Database.
             </summary>
            </member>
        <member name="M:DesignData.SDS2.Model.DatabaseExtensionMethods.Add(DesignData.SDS2.Database.Transaction,DesignData.SDS2.Model.Material)">
             <summary>
               Add a material to the transaction so that it can be modified.
               You will need to Lock() again after adding materials.
             </summary>
             <remarks>
              This is the same as transaction.Add(material.Handle);
             </remarks>
            </member>
        <member name="M:DesignData.SDS2.Model.DatabaseExtensionMethods.Add(DesignData.SDS2.Database.Transaction,DesignData.SDS2.Model.Hole)">
             <summary>
                Add a hole to the transaction so that it can be modified.
                You will need to Lock() again after adding holes.
             </summary>
             <remarks>
              This is the same as transaction.Add(hole.Handle);
             </remarks>
            </member>
        <member name="M:DesignData.SDS2.Model.DatabaseExtensionMethods.Add(DesignData.SDS2.Database.Transaction,DesignData.SDS2.Model.Bolt)">
             <summary>
               Add a bolt to the transaction so that it can be modified.
               You will need to Lock() again after adding bolts.
             </summary>
             <remarks>
              This is the same as transaction.Add(bolt.Handle);
             </remarks>
            </member>
        <member name="M:DesignData.SDS2.Model.DatabaseExtensionMethods.Add(DesignData.SDS2.Database.Transaction,DesignData.SDS2.Model.Weld)">
             <summary>
               Add a bolt to the transaction so that it can be modified.
               You will need to Lock() again after adding welds.
             </summary>
             <remarks>
              This is the same as transaction.Add(weld.Handle);
             </remarks>
            </member>
        <member name="M:DesignData.SDS2.Model.DatabaseExtensionMethods.Add(DesignData.SDS2.Database.Transaction,DesignData.SDS2.Model.MemberBrief)">
             <summary>
               Add a member to the transaction before locking so that it can be modified.
             </summary>
             <remarks>
              This is the same as transaction.Add(member.Handle);
             </remarks>
            </member>
        <member name="M:DesignData.SDS2.Model.DatabaseExtensionMethods.Add(DesignData.SDS2.Database.Transaction,DesignData.SDS2.Model.Member)">
             <summary>
               Add a member to the transaction before locking so that it can be modified.
             </summary>
             <remarks>
              This is the same as transaction.Add(member.Handle);
             </remarks>
            </member>
        <member name="M:DesignData.SDS2.Model.DatabaseExtensionMethods.Add(DesignData.SDS2.Database.Transaction,DesignData.SDS2.Model.Component)">
             <summary>
               Add a component to the transaction before locking so that it can be modified.
             </summary>
             <remarks>
              This is the same as transaction.Add(component.Handle);
             </remarks>
            </member>
        <member name="T:DesignData.SDS2.Model.CustomPropertyValueType">
             <summary>
               This has been moved to DesignData.SDS2.Setup, please use that in new code.  This
               is just a placeholder to autobox these so existing code will still compile.
             </summary>
            </member>
        <member name="M:DesignData.SDS2.Model.CustomPropertyValueType.op_Implicit(DesignData.SDS2.Model.CustomPropertyValueType)~DesignData.SDS2.Setup.CustomPropertyValueType">
             <summary>
               Implicitly box and unbox to keep existing code compiling using obsolete type
             </summary>
            </member>
        <member name="M:DesignData.SDS2.Model.CustomPropertyValueType.op_Implicit(DesignData.SDS2.Setup.CustomPropertyValueType)~DesignData.SDS2.Model.CustomPropertyValueType">
             <summary>
               Implicitly box and unbox to keep existing code compiling using obsolete type
             </summary>
            </member>
        <member name="M:DesignData.SDS2.Model.CustomPropertyValueType.op_Explicit(DesignData.SDS2.Model.CustomPropertyValueType)~System.Int32">
             <summary>
               Implicitly box and unbox to keep existing code compiling using obsolete type
             </summary>
            </member>
        <member name="M:DesignData.SDS2.Model.CustomPropertyValueType.op_Implicit(System.Int32)~DesignData.SDS2.Model.CustomPropertyValueType">
             <summary>
               Implicitly box and unbox to keep existing code compiling using obsolete type
             </summary>
            </member>
        <member name="F:DesignData.SDS2.Model.CustomPropertyValueType.None">
             <summary>This value doesn't exist in the schema</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.CustomPropertyValueType.String">
             <summary>This value is a System.String</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.CustomPropertyValueType.Double">
             <summary>This value is an double</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.CustomPropertyValueType.Date">
             <summary>This value is a date</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.CustomPropertyValueType.Bool">
             <summary>This value is a boolean</summary>
            
            </member>
        <member name="T:DesignData.SDS2.Model.ModelViewDescription">
             <summary>
               This has been renamed ModelViewDefinition, please reference that class from now on.
             </summary>
            </member>
        <member name="M:DesignData.SDS2.Model.ModelViewDescription.op_Implicit(DesignData.SDS2.Model.ModelViewDescription)~DesignData.SDS2.Model.ModelViewDefinition">
             <summary>
               Implicitly convert between new name and obsoleted name
             </summary>
            </member>
        <member name="M:DesignData.SDS2.Model.ModelViewDescription.op_Implicit(DesignData.SDS2.Model.ModelViewDefinition)~DesignData.SDS2.Model.ModelViewDescription">
             <summary>
               Implicitly convert between new name and obsoleted name
             </summary>
            </member>
        <member name="M:DesignData.SDS2.Model.ModelViewDescription.op_Explicit(DesignData.SDS2.Model.ModelViewDescription)~System.Int32">
             <summary>
               Implicitly convert between new name and obsoleted name
             </summary>
            </member>
        <member name="M:DesignData.SDS2.Model.ModelViewDescription.op_Implicit(System.Int32)~DesignData.SDS2.Model.ModelViewDescription">
             <summary>
               Implicitly convert between new name and obsoleted name
             </summary>
            </member>
        <member name="F:DesignData.SDS2.Model.ModelViewDescription.Unknown">
             <summary>Using 'unknown' is an error condition</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ModelViewDescription.CoordinationView2">
             <summary>IFC 2x3 Coordination View 2.0 is the most common MVD used worldwide</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ModelViewDescription.EM11SteelFabrication">
             <summary>IFC 2x3 EM11 is an AISC creation used only by steel fabricators</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ModelViewDescription.DesignTransferView">
             <summary>IFC 4 Design Transfer View is the most common, general purpose IFC 4 MVD</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ModelViewDescription.ACI131ConcreteReinforcement">
             <summary>IFC 4 ACI 131.2R-17 contains only concrete reinforcement materials</summary>
            
            </member>
        <member name="F:DesignData.SDS2.Model.ModelViewDescription.ReferenceView">
             <summary>IFC 4 Reference View provides little benefit and isn't supported yet</summary>
            
            </member>
    </members>
</doc>